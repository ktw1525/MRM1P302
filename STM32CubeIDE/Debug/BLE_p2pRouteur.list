
BLE_p2pRouteur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce34  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  0800cf74  0800cf74  0001cf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd70  0800dd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd78  0800dd78  0001dd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dd7c  0800dd7c  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000004  0800dd80  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000ac  0800de28  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000124  20000148  0800dec1  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000005c  2000026c  0800dfe5  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800e041  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013c8  200002dc  0800e052  000202dc  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200016a4  0800e052  000216a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000202d9  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_line   0002ee25  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   0003f024  00000000  00000000  0004f12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00007847  00000000  00000000  0008e152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000027e0  00000000  00000000  000959a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f809a  00000000  00000000  00098180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000024e0  00000000  00000000  00190220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0002e091  00000000  00000000  00192700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c0791  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000abec  00000000  00000000  001c07e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002dc 	.word	0x200002dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cf5c 	.word	0x0800cf5c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e0 	.word	0x200002e0
 800017c:	0800cf5c 	.word	0x0800cf5c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000528:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052c:	3304      	adds	r3, #4

0800052e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000530:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000532:	d3f9      	bcc.n	8000528 <CopyDataInit>
  bx lr
 8000534:	4770      	bx	lr

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000536:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000538:	3004      	adds	r0, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800053a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>
  bx lr
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <LoopForever+0x8>)
 8000546:	490d      	ldr	r1, [pc, #52]	; (800057c <LoopForever+0xc>)
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <LoopForever+0x10>)
 800054a:	2300      	movs	r3, #0
 800054c:	f7ff ffef 	bl	800052e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x14>)
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopForever+0x18>)
 8000554:	2300      	movs	r3, #0
 8000556:	f7ff fff0 	bl	800053a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800055a:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopForever+0x1c>)
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <LoopForever+0x20>)
 800055e:	2300      	movs	r3, #0
 8000560:	f7ff ffeb 	bl	800053a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000564:	f004 fb3a 	bl	8004bdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000568:	f00b fc94 	bl	800be94 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800056c:	f001 fa88 	bl	8001a80 <main>

08000570 <LoopForever>:

LoopForever:
  b LoopForever
 8000570:	e7fe      	b.n	8000570 <LoopForever>
 8000572:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000574:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000578:	20000004 	.word	0x20000004
 800057c:	200000ac 	.word	0x200000ac
 8000580:	0800dd80 	.word	0x0800dd80
  INIT_BSS _sbss, _ebss
 8000584:	200002dc 	.word	0x200002dc
 8000588:	200016a4 	.word	0x200016a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800058c:	200301e0 	.word	0x200301e0
 8000590:	20030a57 	.word	0x20030a57

08000594 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_IRQHandler>
	...

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e4:	68fb      	ldr	r3, [r7, #12]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fe:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800060e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000612:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061c:	68fb      	ldr	r3, [r7, #12]
}
 800061e:	bf00      	nop
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800062e:	f004 fbdd 	bl	8004dec <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000632:	f004 fbe1 	bl	8004df8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000636:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800063a:	f7ff ffad 	bl	8000598 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 800063e:	f009 fbc5 	bl	8009dcc <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000642:	f000 f821 	bl	8000688 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000646:	f000 f8c3 	bl	80007d0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800064a:	bf00      	nop
}
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <APPD_EnableCPU2+0x34>)
 8000658:	1d3c      	adds	r4, r7, #4
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	c403      	stmia	r4!, {r0, r1}
 8000666:	8022      	strh	r2, [r4, #0]
 8000668:	3402      	adds	r4, #2
 800066a:	0c13      	lsrs	r3, r2, #16
 800066c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800066e:	f00b f921 	bl	800b8b4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f00a f81c 	bl	800a6b2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800067a:	bf00      	nop
}
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bdb0      	pop	{r4, r5, r7, pc}
 8000682:	bf00      	nop
 8000684:	0800cf74 	.word	0x0800cf74

08000688 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	77fb      	strb	r3, [r7, #31]
 80006ac:	e038      	b.n	8000720 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80006ae:	7ffb      	ldrb	r3, [r7, #31]
 80006b0:	4a44      	ldr	r2, [pc, #272]	; (80007c4 <APPD_SetCPU2GpioConfig+0x13c>)
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4413      	add	r3, r2
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d02b      	beq.n	8000714 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <APPD_SetCPU2GpioConfig+0x13c>)
 80006c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80006c4:	4a40      	ldr	r2, [pc, #256]	; (80007c8 <APPD_SetCPU2GpioConfig+0x140>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d01b      	beq.n	8000702 <APPD_SetCPU2GpioConfig+0x7a>
 80006ca:	4a3f      	ldr	r2, [pc, #252]	; (80007c8 <APPD_SetCPU2GpioConfig+0x140>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d823      	bhi.n	8000718 <APPD_SetCPU2GpioConfig+0x90>
 80006d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006d4:	d003      	beq.n	80006de <APPD_SetCPU2GpioConfig+0x56>
 80006d6:	4a3d      	ldr	r2, [pc, #244]	; (80007cc <APPD_SetCPU2GpioConfig+0x144>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d009      	beq.n	80006f0 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80006dc:	e01c      	b.n	8000718 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80006de:	7ffb      	ldrb	r3, [r7, #31]
 80006e0:	4a38      	ldr	r2, [pc, #224]	; (80007c4 <APPD_SetCPU2GpioConfig+0x13c>)
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	889a      	ldrh	r2, [r3, #4]
 80006e8:	8bbb      	ldrh	r3, [r7, #28]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	83bb      	strh	r3, [r7, #28]
          break;
 80006ee:	e014      	b.n	800071a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <APPD_SetCPU2GpioConfig+0x13c>)
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	889a      	ldrh	r2, [r3, #4]
 80006fa:	8b7b      	ldrh	r3, [r7, #26]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	837b      	strh	r3, [r7, #26]
          break;
 8000700:	e00b      	b.n	800071a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000702:	7ffb      	ldrb	r3, [r7, #31]
 8000704:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	4413      	add	r3, r2
 800070a:	889a      	ldrh	r2, [r3, #4]
 800070c:	8b3b      	ldrh	r3, [r7, #24]
 800070e:	4313      	orrs	r3, r2
 8000710:	833b      	strh	r3, [r7, #24]
          break;
 8000712:	e002      	b.n	800071a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000714:	bf00      	nop
 8000716:	e000      	b.n	800071a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000718:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800071a:	7ffb      	ldrb	r3, [r7, #31]
 800071c:	3301      	adds	r3, #1
 800071e:	77fb      	strb	r3, [r7, #31]
 8000720:	7ffb      	ldrb	r3, [r7, #31]
 8000722:	2b21      	cmp	r3, #33	; 0x21
 8000724:	d9c3      	bls.n	80006ae <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000732:	8bbb      	ldrh	r3, [r7, #28]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d014      	beq.n	8000762 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000738:	8bbb      	ldrh	r3, [r7, #28]
 800073a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff3f 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff55 	bl	80005f2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f005 f806 	bl	8005760 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000754:	8bbb      	ldrh	r3, [r7, #28]
 8000756:	2200      	movs	r2, #0
 8000758:	4619      	mov	r1, r3
 800075a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075e:	f005 f96f 	bl	8005a40 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000762:	8b7b      	ldrh	r3, [r7, #26]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000768:	8b7b      	ldrh	r3, [r7, #26]
 800076a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	2002      	movs	r0, #2
 800076e:	f7ff ff27 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff ff3d 	bl	80005f2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <APPD_SetCPU2GpioConfig+0x144>)
 800077e:	f004 ffef 	bl	8005760 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000782:	8b7b      	ldrh	r3, [r7, #26]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <APPD_SetCPU2GpioConfig+0x144>)
 800078a:	f005 f959 	bl	8005a40 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800078e:	8b3b      	ldrh	r3, [r7, #24]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d013      	beq.n	80007bc <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000794:	8b3b      	ldrh	r3, [r7, #24]
 8000796:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	2004      	movs	r0, #4
 800079a:	f7ff ff11 	bl	80005c0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800079e:	2004      	movs	r0, #4
 80007a0:	f7ff ff27 	bl	80005f2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <APPD_SetCPU2GpioConfig+0x140>)
 80007aa:	f004 ffd9 	bl	8005760 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80007ae:	8b3b      	ldrh	r3, [r7, #24]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <APPD_SetCPU2GpioConfig+0x140>)
 80007b6:	f005 f943 	bl	8005a40 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
}
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	0800dac4 	.word	0x0800dac4
 80007c8:	48000800 	.word	0x48000800
 80007cc:	48000400 	.word	0x48000400

080007d0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80007d4:	bf00      	nop
}
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80007e2:	f001 f9f1 	bl	8001bc8 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 80007e6:	bf00      	nop
}
 80007e8:	bd80      	pop	{r7, pc}

080007ea <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	460b      	mov	r3, r1
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80007f8:	897a      	ldrh	r2, [r7, #10]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	68f9      	ldr	r1, [r7, #12]
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 ff44 	bl	800168c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000804:	bf00      	nop
}
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <LL_C2_PWR_SetPowerMode+0x28>)
 8000816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800081a:	f023 0207 	bic.w	r2, r3, #7
 800081e:	4905      	ldr	r1, [pc, #20]	; (8000834 <LL_C2_PWR_SetPowerMode+0x28>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	58000400 	.word	0x58000400

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000864:	f000 f814 	bl	8000890 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <APPE_Init+0x2c>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fd06 	bl	800127c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000870:	f7ff fedb 	bl	800062a <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000874:	2101      	movs	r1, #1
 8000876:	2001      	movs	r0, #1
 8000878:	f00b f8ba 	bl	800b9f0 <UTIL_LPM_SetOffMode>

  Led_Init();
 800087c:	f000 f867 	bl	800094e <Led_Init>

  Button_Init();
 8000880:	f000 f875 	bl	800096e <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000884:	f000 f812 	bl	80008ac <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200015d0 	.word	0x200015d0

08000890 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000894:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000898:	f7ff ffce 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800089c:	f00b f896 	bl	800b9cc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008a0:	2004      	movs	r0, #4
 80008a2:	f7ff ffb3 	bl	800080c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80008a6:	bf00      	nop
}
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80008b2:	f00a fe49 	bl	800b548 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <appe_Tl_Init+0x50>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008be:	f00b f9ab 	bl	800bc18 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <appe_Tl_Init+0x54>)
 80008c4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <appe_Tl_Init+0x58>)
 80008c8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <appe_Tl_Init+0x5c>)
 80008d0:	f009 ff06 	bl	800a6e0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <appe_Tl_Init+0x60>)
 80008d6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <appe_Tl_Init+0x64>)
 80008da:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <appe_Tl_Init+0x68>)
 80008de:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80008e0:	f240 533c 	movw	r3, #1340	; 0x53c
 80008e4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00a ff6e 	bl	800b7cc <TL_MM_Init>

  TL_Enable();
 80008f0:	f00a fe24 	bl	800b53c <TL_Enable>

  return;
 80008f4:	bf00      	nop
}
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	0800a719 	.word	0x0800a719
 8000900:	20030724 	.word	0x20030724
 8000904:	08000919 	.word	0x08000919
 8000908:	0800092f 	.word	0x0800092f
 800090c:	2003093c 	.word	0x2003093c
 8000910:	20030830 	.word	0x20030830
 8000914:	200301e8 	.word	0x200301e8

08000918 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000922:	bf00      	nop
}
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000936:	f7ff fe8b 	bl	8000650 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800093a:	f001 fd6f 	bl	800241c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800093e:	2100      	movs	r1, #0
 8000940:	2001      	movs	r0, #1
 8000942:	f00b f855 	bl	800b9f0 <UTIL_LPM_SetOffMode>
  return;
 8000946:	bf00      	nop
}
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000952:	2000      	movs	r0, #0
 8000954:	f004 f862 	bl	8004a1c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000958:	2001      	movs	r0, #1
 800095a:	f004 f85f 	bl	8004a1c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800095e:	2002      	movs	r0, #2
 8000960:	f004 f85c 	bl	8004a1c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000964:	2001      	movs	r0, #1
 8000966:	f004 f893 	bl	8004a90 <BSP_LED_On>
#endif

  return;
 800096a:	bf00      	nop
}
 800096c:	bd80      	pop	{r7, pc}

0800096e <Button_Init>:

static void Button_Init( void )
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000972:	2101      	movs	r1, #1
 8000974:	2000      	movs	r0, #0
 8000976:	f004 f8bf 	bl	8004af8 <BSP_PB_Init>
#endif

  return;
 800097a:	bf00      	nop
}
 800097c:	bd80      	pop	{r7, pc}

0800097e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000982:	bf00      	nop
}
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000996:	f04f 30ff 	mov.w	r0, #4294967295
 800099a:	f00b f859 	bl	800ba50 <UTIL_SEQ_Run>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b4:	f00b f952 	bl	800bc5c <UTIL_SEQ_SetTask>
  return;
 80009b8:	bf00      	nop
}
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80009c8:	2002      	movs	r0, #2
 80009ca:	f00b f9b3 	bl	800bd34 <UTIL_SEQ_SetEvt>
  return;
 80009ce:	bf00      	nop
}
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80009de:	2002      	movs	r0, #2
 80009e0:	f00b f9c8 	bl	800bd74 <UTIL_SEQ_WaitEvt>
  return;
 80009e4:	bf00      	nop
}
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	2b10      	cmp	r3, #16
 80009fa:	d006      	beq.n	8000a0a <HAL_GPIO_EXTI_Callback+0x1e>
 80009fc:	2b10      	cmp	r3, #16
 80009fe:	dc0d      	bgt.n	8000a1c <HAL_GPIO_EXTI_Callback+0x30>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d005      	beq.n	8000a10 <HAL_GPIO_EXTI_Callback+0x24>
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d006      	beq.n	8000a16 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000a0a:	f002 fbe1 	bl	80031d0 <APP_BLE_Key_Button1_Action>
      break; 
 8000a0e:	e006      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000a10:	f002 fbe6 	bl	80031e0 <APP_BLE_Key_Button2_Action>
      break; 
 8000a14:	e003      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000a16:	f002 fbea 	bl	80031ee <APP_BLE_Key_Button3_Action>
      break;
 8000a1a:	e000      	b.n	8000a1e <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000a1c:	bf00      	nop

  }
  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <LL_EXTI_EnableIT_0_31>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000a36:	4905      	ldr	r1, [pc, #20]	; (8000a4c <LL_EXTI_EnableIT_0_31+0x24>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	58000800 	.word	0x58000800

08000a50 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	600b      	str	r3, [r1, #0]

}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	58000800 	.word	0x58000800

08000a74 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <ReadRtcSsrValue+0x3c>)
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <ReadRtcSsrValue+0x3c>)
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a8a:	e005      	b.n	8000a98 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <ReadRtcSsrValue+0x3c>)
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d1f5      	bne.n	8000a8c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000aa0:	683b      	ldr	r3, [r7, #0]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40002800 	.word	0x40002800

08000ab4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <LinkTimerAfter+0x88>)
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3315      	adds	r3, #21
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d009      	beq.n	8000af2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ade:	7bfa      	ldrb	r2, [r7, #15]
 8000ae0:	4916      	ldr	r1, [pc, #88]	; (8000b3c <LinkTimerAfter+0x88>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	3314      	adds	r3, #20
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	4911      	ldr	r1, [pc, #68]	; (8000b3c <LinkTimerAfter+0x88>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	3315      	adds	r3, #21
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <LinkTimerAfter+0x88>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	3314      	adds	r3, #20
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b1a:	79ba      	ldrb	r2, [r7, #6]
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <LinkTimerAfter+0x88>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4413      	add	r3, r2
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	440b      	add	r3, r1
 8000b28:	3315      	adds	r3, #21
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	701a      	strb	r2, [r3, #0]

  return;
 8000b2e:	bf00      	nop
}
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200000ac 	.word	0x200000ac

08000b40 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <LinkTimerBefore+0xb8>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d032      	beq.n	8000bc2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	4927      	ldr	r1, [pc, #156]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	3314      	adds	r3, #20
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	4922      	ldr	r1, [pc, #136]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3315      	adds	r3, #21
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b84:	79fa      	ldrb	r2, [r7, #7]
 8000b86:	491d      	ldr	r1, [pc, #116]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	79ba      	ldrb	r2, [r7, #6]
 8000b96:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	4918      	ldr	r1, [pc, #96]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3314      	adds	r3, #20
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	4913      	ldr	r1, [pc, #76]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	440b      	add	r3, r1
 8000bba:	3314      	adds	r3, #20
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000bc0:	e014      	b.n	8000bec <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	490d      	ldr	r1, [pc, #52]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3315      	adds	r3, #21
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	4908      	ldr	r1, [pc, #32]	; (8000bfc <LinkTimerBefore+0xbc>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	440b      	add	r3, r1
 8000be4:	3314      	adds	r3, #20
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	701a      	strb	r2, [r3, #0]
  return;
 8000bea:	bf00      	nop
}
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000013c 	.word	0x2000013c
 8000bfc:	200000ac 	.word	0x200000ac

08000c00 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c0a:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <linkTimer+0x144>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	d118      	bne.n	8000c46 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <linkTimer+0x144>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <linkTimer+0x148>)
 8000c1c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000c1e:	4a49      	ldr	r2, [pc, #292]	; (8000d44 <linkTimer+0x144>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	4949      	ldr	r1, [pc, #292]	; (8000d4c <linkTimer+0x14c>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	440b      	add	r3, r1
 8000c32:	3315      	adds	r3, #21
 8000c34:	2206      	movs	r2, #6
 8000c36:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c38:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <linkTimer+0x150>)
 8000c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	81fb      	strh	r3, [r7, #14]
 8000c44:	e078      	b.n	8000d38 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000c46:	f000 f909 	bl	8000e5c <ReturnTimeElapsed>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	493e      	ldr	r1, [pc, #248]	; (8000d4c <linkTimer+0x14c>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	6819      	ldr	r1, [r3, #0]
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	4419      	add	r1, r3
 8000c66:	4839      	ldr	r0, [pc, #228]	; (8000d4c <linkTimer+0x14c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4403      	add	r3, r0
 8000c72:	3308      	adds	r3, #8
 8000c74:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c76:	79fa      	ldrb	r2, [r7, #7]
 8000c78:	4934      	ldr	r1, [pc, #208]	; (8000d4c <linkTimer+0x14c>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3308      	adds	r3, #8
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <linkTimer+0x144>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <linkTimer+0x14c>)
 8000c94:	460b      	mov	r3, r1
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	440b      	add	r3, r1
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d337      	bcc.n	8000d18 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <linkTimer+0x144>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000cae:	7b7a      	ldrb	r2, [r7, #13]
 8000cb0:	4926      	ldr	r1, [pc, #152]	; (8000d4c <linkTimer+0x14c>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	3315      	adds	r3, #21
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cc2:	e013      	b.n	8000cec <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000cc4:	7b7a      	ldrb	r2, [r7, #13]
 8000cc6:	4921      	ldr	r1, [pc, #132]	; (8000d4c <linkTimer+0x14c>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3315      	adds	r3, #21
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000cd8:	7b7a      	ldrb	r2, [r7, #13]
 8000cda:	491c      	ldr	r1, [pc, #112]	; (8000d4c <linkTimer+0x14c>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3315      	adds	r3, #21
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d00b      	beq.n	8000d0a <linkTimer+0x10a>
 8000cf2:	7b3a      	ldrb	r2, [r7, #12]
 8000cf4:	4915      	ldr	r1, [pc, #84]	; (8000d4c <linkTimer+0x14c>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3308      	adds	r3, #8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d2dc      	bcs.n	8000cc4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d0a:	7b7a      	ldrb	r2, [r7, #13]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fecf 	bl	8000ab4 <LinkTimerAfter>
 8000d16:	e00f      	b.n	8000d38 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <linkTimer+0x144>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff0c 	bl	8000b40 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <linkTimer+0x144>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <linkTimer+0x148>)
 8000d30:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <linkTimer+0x144>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000d38:	89fb      	ldrh	r3, [r7, #14]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000013c 	.word	0x2000013c
 8000d48:	2000013d 	.word	0x2000013d
 8000d4c:	200000ac 	.word	0x200000ac
 8000d50:	20000140 	.word	0x20000140

08000d54 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <UnlinkTimer+0xf8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d111      	bne.n	8000d94 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <UnlinkTimer+0xf8>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <UnlinkTimer+0xfc>)
 8000d78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d7a:	79fa      	ldrb	r2, [r7, #7]
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <UnlinkTimer+0x100>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	440b      	add	r3, r1
 8000d88:	3315      	adds	r3, #21
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <UnlinkTimer+0xf8>)
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e03e      	b.n	8000e12 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	492f      	ldr	r1, [pc, #188]	; (8000e54 <UnlinkTimer+0x100>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	3314      	adds	r3, #20
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	492a      	ldr	r1, [pc, #168]	; (8000e54 <UnlinkTimer+0x100>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	3315      	adds	r3, #21
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000dbc:	79f9      	ldrb	r1, [r7, #7]
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	4824      	ldr	r0, [pc, #144]	; (8000e54 <UnlinkTimer+0x100>)
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	440b      	add	r3, r1
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4403      	add	r3, r0
 8000dcc:	3315      	adds	r3, #21
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2d8      	uxtb	r0, r3
 8000dd2:	4920      	ldr	r1, [pc, #128]	; (8000e54 <UnlinkTimer+0x100>)
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	3315      	adds	r3, #21
 8000de0:	4602      	mov	r2, r0
 8000de2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d013      	beq.n	8000e12 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000dea:	79f9      	ldrb	r1, [r7, #7]
 8000dec:	7bba      	ldrb	r2, [r7, #14]
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <UnlinkTimer+0x100>)
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4403      	add	r3, r0
 8000dfa:	3314      	adds	r3, #20
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2d8      	uxtb	r0, r3
 8000e00:	4914      	ldr	r1, [pc, #80]	; (8000e54 <UnlinkTimer+0x100>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3314      	adds	r3, #20
 8000e0e:	4602      	mov	r2, r0
 8000e10:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	490f      	ldr	r1, [pc, #60]	; (8000e54 <UnlinkTimer+0x100>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	330c      	adds	r3, #12
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <UnlinkTimer+0xf8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b06      	cmp	r3, #6
 8000e2e:	d107      	bne.n	8000e40 <UnlinkTimer+0xec>
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <UnlinkTimer+0x104>)
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
}
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	2000013c 	.word	0x2000013c
 8000e50:	2000013d 	.word	0x2000013d
 8000e54:	200000ac 	.word	0x200000ac
 8000e58:	20000140 	.word	0x20000140

08000e5c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <ReturnTimeElapsed+0x70>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6a:	d026      	beq.n	8000eba <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e6c:	f7ff fe02 	bl	8000a74 <ReadRtcSsrValue>
 8000e70:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <ReturnTimeElapsed+0x70>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d805      	bhi.n	8000e88 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <ReturnTimeElapsed+0x70>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e00a      	b.n	8000e9e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <ReturnTimeElapsed+0x74>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <ReturnTimeElapsed+0x70>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <ReturnTimeElapsed+0x78>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	fb02 f303 	mul.w	r3, r2, r3
 8000eaa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <ReturnTimeElapsed+0x7c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	40d3      	lsrs	r3, r2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	e001      	b.n	8000ebe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	b29b      	uxth	r3, r3
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000140 	.word	0x20000140
 8000ed0:	200002fe 	.word	0x200002fe
 8000ed4:	200002fd 	.word	0x200002fd
 8000ed8:	200002fc 	.word	0x200002fc

08000edc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d108      	bne.n	8000efe <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000eec:	f7ff fdc2 	bl	8000a74 <ReadRtcSsrValue>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <RestartWakeupCounter+0xa8>)
 8000ef4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f004 f901 	bl	80050fe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000efc:	e03e      	b.n	8000f7c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d803      	bhi.n	8000f0c <RestartWakeupCounter+0x30>
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <RestartWakeupCounter+0xac>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d002      	beq.n	8000f12 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f12:	bf00      	nop
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <RestartWakeupCounter+0xb0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f7      	beq.n	8000f14 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <RestartWakeupCounter+0xb0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <RestartWakeupCounter+0xb0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f38:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <RestartWakeupCounter+0xb4>)
 8000f3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f40:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000f42:	2003      	movs	r0, #3
 8000f44:	f004 f8e9 	bl	800511a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <RestartWakeupCounter+0xb8>)
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	041b      	lsls	r3, r3, #16
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	4910      	ldr	r1, [pc, #64]	; (8000f94 <RestartWakeupCounter+0xb8>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000f58:	f7ff fd8c 	bl	8000a74 <ReadRtcSsrValue>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <RestartWakeupCounter+0xa8>)
 8000f60:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <RestartWakeupCounter+0xb0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <RestartWakeupCounter+0xb0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f74:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f76:	f3af 8000 	nop.w
  return ;
 8000f7a:	bf00      	nop
}
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000140 	.word	0x20000140
 8000f88:	200002fc 	.word	0x200002fc
 8000f8c:	200002f8 	.word	0x200002f8
 8000f90:	58000800 	.word	0x58000800
 8000f94:	40002800 	.word	0x40002800

08000f98 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <RescheduleTimerList+0x124>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000faa:	d108      	bne.n	8000fbe <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000fac:	bf00      	nop
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <RescheduleTimerList+0x128>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f7      	bne.n	8000fae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <RescheduleTimerList+0x128>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <RescheduleTimerList+0x128>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <RescheduleTimerList+0x12c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	493b      	ldr	r1, [pc, #236]	; (80010c8 <RescheduleTimerList+0x130>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000fec:	f7ff ff36 	bl	8000e5c <ReturnTimeElapsed>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d205      	bcs.n	8001008 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <RescheduleTimerList+0x134>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e04d      	b.n	80010a4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <RescheduleTimerList+0x138>)
 800100c:	8812      	ldrh	r2, [r2, #0]
 800100e:	b292      	uxth	r2, r2
 8001010:	4413      	add	r3, r2
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4293      	cmp	r3, r2
 8001018:	d906      	bls.n	8001028 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <RescheduleTimerList+0x138>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <RescheduleTimerList+0x134>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e03d      	b.n	80010a4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	b29a      	uxth	r2, r3
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <RescheduleTimerList+0x134>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001038:	e034      	b.n	80010a4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	4922      	ldr	r1, [pc, #136]	; (80010c8 <RescheduleTimerList+0x130>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	429a      	cmp	r2, r3
 8001050:	d20a      	bcs.n	8001068 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	491c      	ldr	r1, [pc, #112]	; (80010c8 <RescheduleTimerList+0x130>)
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	3308      	adds	r3, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e013      	b.n	8001090 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	4917      	ldr	r1, [pc, #92]	; (80010c8 <RescheduleTimerList+0x130>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3308      	adds	r3, #8
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	4811      	ldr	r0, [pc, #68]	; (80010c8 <RescheduleTimerList+0x130>)
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4403      	add	r3, r0
 800108c:	3308      	adds	r3, #8
 800108e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <RescheduleTimerList+0x130>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	440b      	add	r3, r1
 800109e:	3315      	adds	r3, #21
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d1c7      	bne.n	800103a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80010aa:	89bb      	ldrh	r3, [r7, #12]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff15 	bl	8000edc <RestartWakeupCounter>

  return ;
 80010b2:	bf00      	nop
}
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40002800 	.word	0x40002800
 80010c0:	200002f8 	.word	0x200002f8
 80010c4:	2000013c 	.word	0x2000013c
 80010c8:	200000ac 	.word	0x200000ac
 80010cc:	20000144 	.word	0x20000144
 80010d0:	20000300 	.word	0x20000300

080010d4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010da:	f3ef 8310 	mrs	r3, PRIMASK
 80010de:	617b      	str	r3, [r7, #20]
  return(result);
 80010e0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	22ca      	movs	r2, #202	; 0xca
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2253      	movs	r2, #83	; 0x53
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80010fc:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800110e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001118:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800111c:	4954      	ldr	r1, [pc, #336]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	330c      	adds	r3, #12
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d172      	bne.n	8001218 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001132:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001136:	494e      	ldr	r1, [pc, #312]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001146:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800114a:	4949      	ldr	r1, [pc, #292]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	3310      	adds	r3, #16
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d050      	beq.n	8001208 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001166:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800116a:	4941      	ldr	r1, [pc, #260]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	330d      	adds	r3, #13
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d126      	bne.n	80011ce <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fde4 	bl	8000d54 <UnlinkTimer>
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	f383 8810 	msr	PRIMASK, r3
}
 8001196:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001198:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800119c:	4934      	ldr	r1, [pc, #208]	; (8001270 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	3304      	adds	r3, #4
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f9d4 	bl	8001560 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	22ca      	movs	r2, #202	; 0xca
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2253      	movs	r2, #83	; 0x53
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
 80011cc:	e014      	b.n	80011f8 <HW_TS_RTC_Wakeup_Handler+0x124>
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f383 8810 	msr	PRIMASK, r3
}
 80011d8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80011da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f932 	bl	8001448 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	22ca      	movs	r2, #202	; 0xca
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2253      	movs	r2, #83	; 0x53
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80011f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	4619      	mov	r1, r3
 8001200:	69b8      	ldr	r0, [r7, #24]
 8001202:	f000 fa35 	bl	8001670 <HW_TS_RTC_Int_AppNot>
 8001206:	e025      	b.n	8001254 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001208:	f7ff fec6 	bl	8000f98 <RescheduleTimerList>
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f383 8810 	msr	PRIMASK, r3
}
 8001216:	e01d      	b.n	8001254 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001218:	bf00      	nop
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f7      	beq.n	800121a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800123e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001242:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f383 8810 	msr	PRIMASK, r3
}
 8001252:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800125e:	bf00      	nop
}
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200002f8 	.word	0x200002f8
 800126c:	2000013c 	.word	0x2000013c
 8001270:	200000ac 	.word	0x200000ac
 8001274:	20000144 	.word	0x20000144
 8001278:	58000800 	.word	0x58000800

0800127c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001288:	4a64      	ldr	r2, [pc, #400]	; (800141c <HW_TS_Init+0x1a0>)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HW_TS_Init+0x1a0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	22ca      	movs	r2, #202	; 0xca
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
 8001298:	4b60      	ldr	r3, [pc, #384]	; (800141c <HW_TS_Init+0x1a0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2253      	movs	r2, #83	; 0x53
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <HW_TS_Init+0x1a4>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4a5e      	ldr	r2, [pc, #376]	; (8001420 <HW_TS_Init+0x1a4>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <HW_TS_Init+0x1a4>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f1c3 0304 	rsb	r3, r3, #4
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b58      	ldr	r3, [pc, #352]	; (8001424 <HW_TS_Init+0x1a8>)
 80012c2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80012c4:	4b56      	ldr	r3, [pc, #344]	; (8001420 <HW_TS_Init+0x1a4>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80012cc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80012d0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	fa92 f2a2 	rbit	r2, r2
 80012d8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d101      	bne.n	80012e8 <HW_TS_Init+0x6c>
  {
    return 32U;
 80012e4:	2220      	movs	r2, #32
 80012e6:	e003      	b.n	80012f0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	fab2 f282 	clz	r2, r2
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	40d3      	lsrs	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3301      	adds	r3, #1
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <HW_TS_Init+0x1ac>)
 80012fa:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HW_TS_Init+0x1a4>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	b29b      	uxth	r3, r3
 8001302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001306:	b29b      	uxth	r3, r3
 8001308:	3301      	adds	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HW_TS_Init+0x1b0>)
 800130e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <HW_TS_Init+0x1b0>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a44      	ldr	r2, [pc, #272]	; (8001428 <HW_TS_Init+0x1ac>)
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <HW_TS_Init+0x1a8>)
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	40d3      	lsrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001330:	4293      	cmp	r3, r2
 8001332:	d904      	bls.n	800133e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HW_TS_Init+0x1b4>)
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	801a      	strh	r2, [r3, #0]
 800133c:	e003      	b.n	8001346 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HW_TS_Init+0x1b4>)
 8001344:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001346:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800134a:	f7ff fb81 	bl	8000a50 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800134e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001352:	f7ff fb69 	bl	8000a28 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d143      	bne.n	80013e4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <HW_TS_Init+0x1b8>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HW_TS_Init+0x1bc>)
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800136a:	2300      	movs	r3, #0
 800136c:	77fb      	strb	r3, [r7, #31]
 800136e:	e00c      	b.n	800138a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001370:	7ffa      	ldrb	r2, [r7, #31]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <HW_TS_Init+0x1c0>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	330c      	adds	r3, #12
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	3301      	adds	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d9ef      	bls.n	8001370 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HW_TS_Init+0x1c4>)
 8001392:	2206      	movs	r2, #6
 8001394:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <HW_TS_Init+0x1a0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HW_TS_Init+0x1a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HW_TS_Init+0x1a0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HW_TS_Init+0x1a0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HW_TS_Init+0x1c8>)
 80013c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f003 fea6 	bl	800511a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HW_TS_Init+0x1a0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HW_TS_Init+0x1a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	e00a      	b.n	80013fa <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HW_TS_Init+0x1a0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f003 fe82 	bl	80050fe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HW_TS_Init+0x1a0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001404:	2200      	movs	r2, #0
 8001406:	2103      	movs	r1, #3
 8001408:	2003      	movs	r0, #3
 800140a:	f003 fe36 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800140e:	2003      	movs	r0, #3
 8001410:	f003 fe4d 	bl	80050ae <HAL_NVIC_EnableIRQ>

  return;
 8001414:	bf00      	nop
}
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002f8 	.word	0x200002f8
 8001420:	40002800 	.word	0x40002800
 8001424:	200002fc 	.word	0x200002fc
 8001428:	200002fd 	.word	0x200002fd
 800142c:	200002fe 	.word	0x200002fe
 8001430:	20000300 	.word	0x20000300
 8001434:	20000144 	.word	0x20000144
 8001438:	20000140 	.word	0x20000140
 800143c:	200000ac 	.word	0x200000ac
 8001440:	2000013c 	.word	0x2000013c
 8001444:	58000800 	.word	0x58000800

08001448 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001452:	f3ef 8310 	mrs	r3, PRIMASK
 8001456:	60fb      	str	r3, [r7, #12]
  return(result);
 8001458:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800145a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001460:	2003      	movs	r0, #3
 8001462:	f003 fe32 	bl	80050ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HW_TS_Stop+0x100>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	22ca      	movs	r2, #202	; 0xca
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HW_TS_Stop+0x100>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2253      	movs	r2, #83	; 0x53
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4933      	ldr	r1, [pc, #204]	; (800154c <HW_TS_Stop+0x104>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	330c      	adds	r3, #12
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d148      	bne.n	8001524 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc5c 	bl	8000d54 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HW_TS_Stop+0x108>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d135      	bne.n	8001514 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HW_TS_Stop+0x10c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b4:	d108      	bne.n	80014c8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80014b6:	bf00      	nop
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HW_TS_Stop+0x100>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f7      	bne.n	80014b8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HW_TS_Stop+0x100>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <HW_TS_Stop+0x100>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014da:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014dc:	bf00      	nop
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HW_TS_Stop+0x100>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f7      	beq.n	80014de <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HW_TS_Stop+0x100>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HW_TS_Stop+0x100>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001502:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HW_TS_Stop+0x110>)
 8001506:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800150a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800150c:	2003      	movs	r0, #3
 800150e:	f003 fe04 	bl	800511a <HAL_NVIC_ClearPendingIRQ>
 8001512:	e007      	b.n	8001524 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HW_TS_Stop+0x114>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	7cfa      	ldrb	r2, [r7, #19]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001520:	f7ff fd3a 	bl	8000f98 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HW_TS_Stop+0x100>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800152e:	2003      	movs	r0, #3
 8001530:	f003 fdbd 	bl	80050ae <HAL_NVIC_EnableIRQ>
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f383 8810 	msr	PRIMASK, r3
}
 800153e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001540:	bf00      	nop
}
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002f8 	.word	0x200002f8
 800154c:	200000ac 	.word	0x200000ac
 8001550:	2000013c 	.word	0x2000013c
 8001554:	40002800 	.word	0x40002800
 8001558:	58000800 	.word	0x58000800
 800155c:	2000013d 	.word	0x2000013d

08001560 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	493c      	ldr	r1, [pc, #240]	; (8001660 <HW_TS_Start+0x100>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	330c      	adds	r3, #12
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d103      	bne.n	800158c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff ff5e 	bl	8001448 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800158c:	f3ef 8310 	mrs	r3, PRIMASK
 8001590:	60fb      	str	r3, [r7, #12]
  return(result);
 8001592:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800159a:	2003      	movs	r0, #3
 800159c:	f003 fd95 	bl	80050ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HW_TS_Start+0x104>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	22ca      	movs	r2, #202	; 0xca
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HW_TS_Start+0x104>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2253      	movs	r2, #83	; 0x53
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	492a      	ldr	r1, [pc, #168]	; (8001660 <HW_TS_Start+0x100>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	330c      	adds	r3, #12
 80015c4:	2202      	movs	r2, #2
 80015c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	4925      	ldr	r1, [pc, #148]	; (8001660 <HW_TS_Start+0x100>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	3308      	adds	r3, #8
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	4920      	ldr	r1, [pc, #128]	; (8001660 <HW_TS_Start+0x100>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3304      	adds	r3, #4
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb04 	bl	8000c00 <linkTimer>
 80015f8:	4603      	mov	r3, r0
 80015fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HW_TS_Start+0x108>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HW_TS_Start+0x10c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	7c7a      	ldrb	r2, [r7, #17]
 800160a:	429a      	cmp	r2, r3
 800160c:	d002      	beq.n	8001614 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800160e:	f7ff fcc3 	bl	8000f98 <RescheduleTimerList>
 8001612:	e013      	b.n	800163c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4912      	ldr	r1, [pc, #72]	; (8001660 <HW_TS_Start+0x100>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3308      	adds	r3, #8
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	8a7b      	ldrh	r3, [r7, #18]
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	1ac9      	subs	r1, r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HW_TS_Start+0x100>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4403      	add	r3, r0
 8001638:	3308      	adds	r3, #8
 800163a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HW_TS_Start+0x104>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001646:	2003      	movs	r0, #3
 8001648:	f003 fd31 	bl	80050ae <HAL_NVIC_EnableIRQ>
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f383 8810 	msr	PRIMASK, r3
}
 8001656:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001658:	bf00      	nop
}
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000ac 	.word	0x200000ac
 8001664:	200002f8 	.word	0x200002f8
 8001668:	2000013c 	.word	0x2000013c
 800166c:	2000013d 	.word	0x2000013d

08001670 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	460b      	mov	r3, r1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4798      	blx	r3

  return;
 8001682:	bf00      	nop
}
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	4613      	mov	r3, r2
 800169c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80016ac:	4a17      	ldr	r2, [pc, #92]	; (800170c <HW_UART_Transmit_DMA+0x80>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HW_UART_Transmit_DMA+0x84>)
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HW_UART_Transmit_DMA+0x88>)
 80016b6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	4814      	ldr	r0, [pc, #80]	; (8001710 <HW_UART_Transmit_DMA+0x84>)
 80016c0:	f006 f98e 	bl	80079e0 <HAL_UART_Transmit_DMA>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75fb      	strb	r3, [r7, #23]
            break;
 80016c8:	e000      	b.n	80016cc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80016ca:	bf00      	nop
    }

    switch (hal_status)
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d816      	bhi.n	8001700 <HW_UART_Transmit_DMA+0x74>
 80016d2:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <HW_UART_Transmit_DMA+0x4c>)
 80016d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	080016ef 	.word	0x080016ef
 80016e0:	080016f5 	.word	0x080016f5
 80016e4:	080016fb 	.word	0x080016fb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75bb      	strb	r3, [r7, #22]
            break;
 80016ec:	e009      	b.n	8001702 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75bb      	strb	r3, [r7, #22]
            break;
 80016f2:	e006      	b.n	8001702 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80016f4:	2302      	movs	r3, #2
 80016f6:	75bb      	strb	r3, [r7, #22]
            break;
 80016f8:	e003      	b.n	8001702 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80016fa:	2303      	movs	r3, #3
 80016fc:	75bb      	strb	r3, [r7, #22]
            break;
 80016fe:	e000      	b.n	8001702 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001700:	bf00      	nop
    }

    return hw_status;
 8001702:	7dbb      	ldrb	r3, [r7, #22]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20001454 	.word	0x20001454
 8001710:	20001544 	.word	0x20001544
 8001714:	40013800 	.word	0x40013800

08001718 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_UART_TxCpltCallback+0x34>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_UART_TxCpltCallback+0x38>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_UART_TxCpltCallback+0x38>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4798      	blx	r3
            }
            break;
 800173a:	e001      	b.n	8001740 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001740:	bf00      	nop
    }

    return;
 8001742:	bf00      	nop
}
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013800 	.word	0x40013800
 8001750:	20001454 	.word	0x20001454

08001754 <LL_EXTI_DisableIT_0_31>:
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <LL_EXTI_DisableIT_0_31+0x28>)
 800175e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	43db      	mvns	r3, r3
 8001766:	4905      	ldr	r1, [pc, #20]	; (800177c <LL_EXTI_DisableIT_0_31+0x28>)
 8001768:	4013      	ands	r3, r2
 800176a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	58000800 	.word	0x58000800

08001780 <LL_EXTI_DisableIT_32_63>:
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <LL_EXTI_DisableIT_32_63+0x28>)
 800178a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	43db      	mvns	r3, r3
 8001792:	4905      	ldr	r1, [pc, #20]	; (80017a8 <LL_EXTI_DisableIT_32_63+0x28>)
 8001794:	4013      	ands	r3, r2
 8001796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	58000800 	.word	0x58000800

080017ac <LL_RCC_HSE_SetCapacitorTuning>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80017ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	cafecafe 	.word	0xcafecafe

080017e8 <LL_RCC_LSE_SetDriveCapability>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f023 0218 	bic.w	r2, r3, #24
 80017fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800186c:	d101      	bne.n	8001872 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001892:	d101      	bne.n	8001898 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_AHB1_GRP1_EnableClock>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_AHB2_GRP1_EnableClock>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_AHB3_GRP1_EnableClock>:
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	605a      	str	r2, [r3, #4]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	615a      	str	r2, [r3, #20]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	615a      	str	r2, [r3, #20]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LL_LPM_EnableSleep+0x1c>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <LL_LPM_EnableSleep+0x1c>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6113      	str	r3, [r2, #16]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	22ff      	movs	r2, #255	; 0xff
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	22ca      	movs	r2, #202	; 0xca
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2253      	movs	r2, #83	; 0x53
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 0207 	bic.w	r2, r3, #7
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <main+0x44>)
 8001a86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a8a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f003 f91c 	bl	8004cc8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001a90:	f000 f969 	bl	8001d66 <Reset_Device>
  Config_HSE();
 8001a94:	f000 f953 	bl	8001d3e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f816 	bl	8001ac8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001a9c:	f000 f948 	bl	8001d30 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001aa0:	f000 f9a3 	bl	8001dea <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa4:	f000 f937 	bl	8001d16 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa8:	f000 f918 	bl	8001cdc <MX_DMA_Init>
  MX_RF_Init();
 8001aac:	f000 f8da 	bl	8001c64 <MX_RF_Init>
  MX_RTC_Init();
 8001ab0:	f000 f8e0 	bl	8001c74 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001ab4:	f7fe fed4 	bl	8000860 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f009 ffc8 	bl	800ba50 <UTIL_SEQ_Run>
 8001ac0:	e7fa      	b.n	8001ab8 <main+0x38>
 8001ac2:	bf00      	nop
 8001ac4:	58004000 	.word	0x58004000

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ae      	sub	sp, #184	; 0xb8
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad2:	2248      	movs	r2, #72	; 0x48
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00a fa0e 	bl	800bef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2250      	movs	r2, #80	; 0x50
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f00a f9fe 	bl	800bef8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001afc:	f003 fff4 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fe71 	bl	80017e8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <SystemClock_Config+0xfc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <SystemClock_Config+0xfc>)
 8001b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <SystemClock_Config+0xfc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b22:	2307      	movs	r3, #7
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b34:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fb62 	bl	8006210 <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b52:	f000 f97b 	bl	8001e4c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b56:	236f      	movs	r3, #111	; 0x6f
 8001b58:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b76:	2101      	movs	r1, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fed5 	bl	8006928 <HAL_RCC_ClockConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b84:	f000 f962 	bl	8001e4c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001b88:	f643 0303 	movw	r3, #14339	; 0x3803
 8001b8c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 fafc 	bl	80071aa <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001bb8:	f000 f948 	bl	8001e4c <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8001bbc:	bf00      	nop
 8001bbe:	37b8      	adds	r7, #184	; 0xb8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58000400 	.word	0x58000400

08001bc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <MX_USART1_UART_Init+0x98>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001bfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bfe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c14:	f005 fe94 	bl	8007940 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001c1e:	f000 f915 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c22:	2100      	movs	r1, #0
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c26:	f006 fda1 	bl	800876c <HAL_UARTEx_SetTxFifoThreshold>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001c30:	f000 f90c 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c34:	2100      	movs	r1, #0
 8001c36:	4809      	ldr	r0, [pc, #36]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c38:	f006 fdd6 	bl	80087e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c42:	f000 f903 	bl	8001e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART1_UART_Init+0x94>)
 8001c48:	f006 fd57 	bl	80086fa <HAL_UARTEx_DisableFifoMode>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c52:	f000 f8fb 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20001544 	.word	0x20001544
 8001c60:	40013800 	.word	0x40013800

08001c64 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <MX_RTC_Init+0x64>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c86:	220f      	movs	r2, #15
 8001c88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001caa:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <MX_RTC_Init+0x60>)
 8001cac:	f005 fd04 	bl	80076b8 <HAL_RTC_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001cb6:	f000 f8c9 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_RTC_Init+0x64>)
 8001cbc:	f7ff febd 	bl	8001a3a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_RTC_Init+0x64>)
 8001cc4:	f7ff fec9 	bl	8001a5a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_RTC_Init+0x64>)
 8001cca:	f7ff fea9 	bl	8001a20 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200015d0 	.word	0x200015d0
 8001cd8:	40002800 	.word	0x40002800

08001cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ce0:	2004      	movs	r0, #4
 8001ce2:	f7ff fddf 	bl	80018a4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7ff fddc 	bl	80018a4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fdd9 	bl	80018a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	200e      	movs	r0, #14
 8001cf8:	f003 f9bf 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001cfc:	200e      	movs	r0, #14
 8001cfe:	f003 f9d6 	bl	80050ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	210f      	movs	r1, #15
 8001d06:	203a      	movs	r0, #58	; 0x3a
 8001d08:	f003 f9b7 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001d0c:	203a      	movs	r0, #58	; 0x3a
 8001d0e:	f003 f9ce 	bl	80050ae <HAL_NVIC_EnableIRQ>

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2004      	movs	r0, #4
 8001d1c:	f7ff fddb 	bl	80018d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff fdd8 	bl	80018d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fdd5 	bl	80018d6 <LL_AHB2_GRP1_EnableClock>

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001d34:	bf00      	nop
}
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f008 fb4f 	bl	800a3e8 <OTP_Read>
 8001d4a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	799b      	ldrb	r3, [r3, #6]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fd28 	bl	80017ac <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
}  
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <Reset_Device>:


static void Reset_Device( void )
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001d6a:	f000 f827 	bl	8001dbc <Reset_BackupDomain>

	Reset_IPCC();
 8001d6e:	f000 f803 	bl	8001d78 <Reset_IPCC>
#endif

	return;
 8001d72:	bf00      	nop
}
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001d7c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d80:	f7ff fdc2 	bl	8001908 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001d84:	213f      	movs	r1, #63	; 0x3f
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <Reset_IPCC+0x40>)
 8001d88:	f7ff fe1d 	bl	80019c6 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001d8c:	213f      	movs	r1, #63	; 0x3f
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <Reset_IPCC+0x40>)
 8001d90:	f7ff fe27 	bl	80019e2 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001d94:	213f      	movs	r1, #63	; 0x3f
 8001d96:	4808      	ldr	r0, [pc, #32]	; (8001db8 <Reset_IPCC+0x40>)
 8001d98:	f7ff fdcf 	bl	800193a <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001d9c:	213f      	movs	r1, #63	; 0x3f
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <Reset_IPCC+0x40>)
 8001da0:	f7ff fdee 	bl	8001980 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001da4:	213f      	movs	r1, #63	; 0x3f
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <Reset_IPCC+0x40>)
 8001da8:	f7ff fdd9 	bl	800195e <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001dac:	213f      	movs	r1, #63	; 0x3f
 8001dae:	4802      	ldr	r0, [pc, #8]	; (8001db8 <Reset_IPCC+0x40>)
 8001db0:	f7ff fdf8 	bl	80019a4 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001db4:	bf00      	nop
}
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	58000c00 	.word	0x58000c00

08001dbc <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001dc0:	f7ff fd4a 	bl	8001858 <LL_RCC_IsActiveFlag_PINRST>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <Reset_BackupDomain+0x2a>
 8001dca:	f7ff fd58 	bl	800187e <LL_RCC_IsActiveFlag_SFTRST>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d108      	bne.n	8001de6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001dd4:	f003 fe88 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001dd8:	f003 fe86 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001ddc:	f7ff fd1a 	bl	8001814 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001de0:	f7ff fd29 	bl	8001836 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
}
 8001de8:	bd80      	pop	{r7, pc}

08001dea <Init_Exti>:

static void Init_Exti( void )
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295
 8001df2:	f7ff fcaf 	bl	8001754 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001df6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001dfa:	f7ff fcc1 	bl	8001780 <LL_EXTI_DisableIT_32_63>

  return;
 8001dfe:	bf00      	nop
}
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0a:	f002 ffcb 	bl	8004da4 <HAL_GetTick>
 8001e0e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d00a      	beq.n	8001e32 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001e1c:	f002 ffda 	bl	8004dd4 <HAL_GetTickFreq>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	e002      	b.n	8001e32 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e2c:	f7ff fde8 	bl	8001a00 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001e30:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001e32:	f002 ffb7 	bl	8004da4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d8f4      	bhi.n	8001e2c <HAL_Delay+0x2a>
  }
}
 8001e42:	bf00      	nop
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_SetRTCClockSource>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_EnableRTC>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_AHB2_GRP1_EnableClock>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_AHB3_GRP1_EnableClock>:
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_APB1_GRP1_EnableClock>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <LL_APB1_GRP2_EnableClock>:
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_APB2_GRP1_EnableClock>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001fa6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001faa:	f7ff ff96 	bl	8001eda <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	202e      	movs	r0, #46	; 0x2e
 8001fb4:	f003 f861 	bl	800507a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001fb8:	202e      	movs	r0, #46	; 0x2e
 8001fba:	f003 f878 	bl	80050ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_UART_MspInit+0x1d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d16f      	bne.n	80020c6 <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff ffa9 	bl	8001f3e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff ff5b 	bl	8001ea8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002002:	2308      	movs	r3, #8
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f003 fba6 	bl	8005760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002014:	2340      	movs	r3, #64	; 0x40
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002024:	2308      	movs	r3, #8
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002032:	f003 fb95 	bl	8005760 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002036:	4b58      	ldr	r3, [pc, #352]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_UART_MspInit+0x1d8>)
 800203a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800203c:	4b56      	ldr	r3, [pc, #344]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 800203e:	2211      	movs	r2, #17
 8002040:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002042:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002044:	2210      	movs	r2, #16
 8002046:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002060:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800206c:	484a      	ldr	r0, [pc, #296]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 800206e:	f003 f863 	bl	8005138 <HAL_DMA_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002078:	f7ff fee8 	bl	8001e4c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800207c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002080:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	4619      	mov	r1, r3
 8002098:	483f      	ldr	r0, [pc, #252]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 800209a:	f003 fb21 	bl	80056e0 <HAL_DMAEx_ConfigMuxSync>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80020a4:	f7ff fed2 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 80020ac:	675a      	str	r2, [r3, #116]	; 0x74
 80020ae:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_UART_MspInit+0x1d4>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2025      	movs	r0, #37	; 0x25
 80020ba:	f002 ffde 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80020be:	2025      	movs	r0, #37	; 0x25
 80020c0:	f002 fff5 	bl	80050ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020c4:	e061      	b.n	800218a <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <HAL_UART_MspInit+0x1dc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d15c      	bne.n	800218a <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020d4:	f7ff ff4c 	bl	8001f70 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff fee5 	bl	8001ea8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2002      	movs	r0, #2
 80020e0:	f7ff fee2 	bl	8001ea8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f6:	2307      	movs	r3, #7
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f003 fb2c 	bl	8005760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002118:	2307      	movs	r3, #7
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	4820      	ldr	r0, [pc, #128]	; (80021a4 <HAL_UART_MspInit+0x1e0>)
 8002124:	f003 fb1c 	bl	8005760 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 800212a:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_UART_MspInit+0x1e8>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002130:	220f      	movs	r2, #15
 8002132:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002136:	2210      	movs	r2, #16
 8002138:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800215e:	4812      	ldr	r0, [pc, #72]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002160:	f002 ffea 	bl	8005138 <HAL_DMA_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800216a:	f7ff fe6f 	bl	8001e4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002172:	675a      	str	r2, [r3, #116]	; 0x74
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_UART_MspInit+0x1e4>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2024      	movs	r0, #36	; 0x24
 8002180:	f002 ff7b 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002184:	2024      	movs	r0, #36	; 0x24
 8002186:	f002 ff92 	bl	80050ae <HAL_NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3730      	adds	r7, #48	; 0x30
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40008000 	.word	0x40008000
 8002198:	200015f4 	.word	0x200015f4
 800219c:	40020044 	.word	0x40020044
 80021a0:	40013800 	.word	0x40013800
 80021a4:	48000400 	.word	0x48000400
 80021a8:	200014e4 	.word	0x200014e4
 80021ac:	40020444 	.word	0x40020444

080021b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RTC_MspInit+0x3c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d110      	bne.n	80021e4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021c2:	f003 fc91 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80021c6:	f003 fc8f 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80021ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021ce:	f7ff fe44 	bl	8001e5a <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021d2:	f7ff fe58 	bl	8001e86 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021da:	f7ff fe97 	bl	8001f0c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f005 fb58 	bl	8007894 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40002800 	.word	0x40002800

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f002 fd9a 	bl	8004d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <DMA1_Channel4_IRQHandler+0x10>)
 8002252:	f003 f8f3 	bl	800543c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200015f4 	.word	0x200015f4

08002260 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <USART1_IRQHandler+0x10>)
 8002266:	f005 fc3b 	bl	8007ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20001544 	.word	0x20001544

08002274 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <LPUART1_IRQHandler+0x10>)
 800227a:	f005 fc31 	bl	8007ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20001458 	.word	0x20001458

08002288 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800228c:	f003 fc08 	bl	8005aa0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA2_Channel4_IRQHandler+0x10>)
 800229a:	f003 f8cf 	bl	800543c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200014e4 	.word	0x200014e4

080022a8 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80022ac:	2010      	movs	r0, #16
 80022ae:	f003 fbdf 	bl	8005a70 <HAL_GPIO_EXTI_IRQHandler>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <RTC_WKUP_IRQHandler>:
{

}

void RTC_WKUP_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80022ba:	f7fe ff0b 	bl	80010d4 <HW_TS_RTC_Wakeup_Handler>
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80022c6:	f002 fa73 	bl	80047b0 <HW_IPCC_Tx_Handler>

  return;
 80022ca:	bf00      	nop
}
 80022cc:	bd80      	pop	{r7, pc}

080022ce <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80022d2:	f002 fa35 	bl	8004740 <HW_IPCC_Rx_Handler>
  return;
 80022d6:	bf00      	nop
}
 80022d8:	bd80      	pop	{r7, pc}

080022da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ec:	f3af 8000 	nop.w
 80022f0:	4601      	mov	r1, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf0      	blt.n	80022ec <_read+0x12>
	}

return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233c:	605a      	str	r2, [r3, #4]
	return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_isatty>:

int _isatty(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	return 1;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
	return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x50>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x16>
		heap_end = &end;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <_sbrk+0x50>)
 800238e:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <_sbrk+0x54>)
 8002390:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <_sbrk+0x50>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <_sbrk+0x50>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	466a      	mov	r2, sp
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d907      	bls.n	80023b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023a6:	f009 fd6f 	bl	800be88 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	220c      	movs	r2, #12
 80023ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
 80023b4:	e006      	b.n	80023c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <_sbrk+0x50>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <_sbrk+0x50>)
 80023c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000304 	.word	0x20000304
 80023d0:	200016a8 	.word	0x200016a8

080023d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <LL_FLASH_GetUDN+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	1fff7580 	.word	0x1fff7580

080023ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <LL_FLASH_GetDeviceID+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	1fff7584 	.word	0x1fff7584

08002404 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <LL_FLASH_GetSTCompanyID+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1b      	lsrs	r3, r3, #8
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	1fff7584 	.word	0x1fff7584

0800241c <APP_BLE_Init>:
#endif
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <APP_BLE_Init+0x11c>)
 8002424:	463c      	mov	r4, r7
 8002426:	461d      	mov	r5, r3
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002434:	c407      	stmia	r4!, {r0, r1, r2}
 8002436:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002438:	f000 fee0 	bl	80031fc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800243c:	2101      	movs	r1, #1
 800243e:	2002      	movs	r0, #2
 8002440:	f009 fad6 	bl	800b9f0 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
 UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002444:	4a3d      	ldr	r2, [pc, #244]	; (800253c <APP_BLE_Init+0x120>)
 8002446:	2100      	movs	r1, #0
 8002448:	f44f 7000 	mov.w	r0, #512	; 0x200
 800244c:	f009 fbe4 	bl	800bc18 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8002450:	463b      	mov	r3, r7
 8002452:	4618      	mov	r0, r3
 8002454:	f008 f916 	bl	800a684 <SHCI_C2_BLE_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <APP_BLE_Init+0x46>
  {
    Error_Handler();
 800245e:	f7ff fcf5 	bl	8001e4c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002462:	f000 fee1 	bl	8003228 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002466:	f008 ff91 	bl	800b38c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800246a:	4a35      	ldr	r2, [pc, #212]	; (8002540 <APP_BLE_Init+0x124>)
 800246c:	2100      	movs	r1, #0
 800246e:	2002      	movs	r0, #2
 8002470:	f009 fbd2 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, ConnReq1);
 8002474:	4a33      	ldr	r2, [pc, #204]	; (8002544 <APP_BLE_Init+0x128>)
 8002476:	2100      	movs	r1, #0
 8002478:	2004      	movs	r0, #4
 800247a:	f009 fbcd 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
 800247e:	4a32      	ldr	r2, [pc, #200]	; (8002548 <APP_BLE_Init+0x12c>)
 8002480:	2100      	movs	r1, #0
 8002482:	2001      	movs	r0, #1
 8002484:	f009 fbc8 	bl	800bc18 <UTIL_SEQ_RegTask>
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN SCH_RegTask_Multi */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_2_ID, UTIL_SEQ_RFU, ConnReq2);
 8002488:	4a30      	ldr	r2, [pc, #192]	; (800254c <APP_BLE_Init+0x130>)
 800248a:	2100      	movs	r1, #0
 800248c:	2008      	movs	r0, #8
 800248e:	f009 fbc3 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_3_ID, UTIL_SEQ_RFU, ConnReq3);
 8002492:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <APP_BLE_Init+0x134>)
 8002494:	2100      	movs	r1, #0
 8002496:	2010      	movs	r0, #16
 8002498:	f009 fbbe 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_4_ID, UTIL_SEQ_RFU, ConnReq4);
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <APP_BLE_Init+0x138>)
 800249e:	2100      	movs	r1, #0
 80024a0:	2020      	movs	r0, #32
 80024a2:	f009 fbb9 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_5_ID, UTIL_SEQ_RFU, ConnReq5);
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <APP_BLE_Init+0x13c>)
 80024a8:	2100      	movs	r1, #0
 80024aa:	2040      	movs	r0, #64	; 0x40
 80024ac:	f009 fbb4 	bl	800bc18 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_6_ID, UTIL_SEQ_RFU, ConnReq6);
 80024b0:	4a2a      	ldr	r2, [pc, #168]	; (800255c <APP_BLE_Init+0x140>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	2080      	movs	r0, #128	; 0x80
 80024b6:	f009 fbaf 	bl	800bc18 <UTIL_SEQ_RegTask>
#endif

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_IDLE;
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <APP_BLE_Init+0x144>)
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 80024c2:	4b27      	ldr	r3, [pc, #156]	; (8002560 <APP_BLE_Init+0x144>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  BleApplicationContext.EndDevice1Found = 0x00;
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <APP_BLE_Init+0x144>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN Connection_Status_Multi */
  BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <APP_BLE_Init+0x144>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <APP_BLE_Init+0x144>)
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <APP_BLE_Init+0x144>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <APP_BLE_Init+0x144>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <APP_BLE_Init+0x144>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
/* USER CODE END Connection_Status_Multi */
/* USER CODE BEGIN EndDeviceFound_Multi_Init */
  BleApplicationContext.EndDevice2Found = 0x00;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <APP_BLE_Init+0x144>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  BleApplicationContext.EndDevice3Found = 0x00;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <APP_BLE_Init+0x144>)
 8002504:	2200      	movs	r2, #0
 8002506:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  BleApplicationContext.EndDevice4Found = 0x00;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <APP_BLE_Init+0x144>)
 800250c:	2200      	movs	r2, #0
 800250e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  BleApplicationContext.EndDevice5Found = 0x00;
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <APP_BLE_Init+0x144>)
 8002514:	2200      	movs	r2, #0
 8002516:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  BleApplicationContext.EndDevice6Found = 0x00;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <APP_BLE_Init+0x144>)
 800251c:	2200      	movs	r2, #0
 800251e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
/* USER CODE END EndDeviceFound_Multi_Init */
#endif
/**
 * Initialize P2P Routeur Application
 */
  P2PR_APP_Init();
 8002522:	f001 fc13 	bl	8003d4c <P2PR_APP_Init>

  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 8002526:	2100      	movs	r1, #0
 8002528:	2001      	movs	r0, #1
 800252a:	f009 fb97 	bl	800bc5c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800252e:	bf00      	nop
}
 8002530:	3730      	adds	r7, #48	; 0x30
 8002532:	46bd      	mov	sp, r7
 8002534:	bdb0      	pop	{r4, r5, r7, pc}
 8002536:	bf00      	nop
 8002538:	0800cf90 	.word	0x0800cf90
 800253c:	0800a0b5 	.word	0x0800a0b5
 8002540:	080033bd 	.word	0x080033bd
 8002544:	080034e5 	.word	0x080034e5
 8002548:	08003449 	.word	0x08003449
 800254c:	08003565 	.word	0x08003565
 8002550:	080035e5 	.word	0x080035e5
 8002554:	08003665 	.word	0x08003665
 8002558:	080036e5 	.word	0x080036e5
 800255c:	08003765 	.word	0x08003765
 8002560:	20000148 	.word	0x20000148

08002564 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b09b      	sub	sp, #108	; 0x6c
 8002568:	af06      	add	r7, sp, #24
 800256a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t result;
  uint8_t role, event_type, event_data_size;
  int k = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t *adv_report_data;
  uint8_t adtype, adlength;
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 8002576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002578:	3302      	adds	r3, #2
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38

  switch (event_pckt->evt)
 800257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d00a      	beq.n	800259a <SVCCTL_App_Notification+0x36>
 8002584:	2bff      	cmp	r3, #255	; 0xff
 8002586:	f300 85b2 	bgt.w	80030ee <SVCCTL_App_Notification+0xb8a>
 800258a:	2b05      	cmp	r3, #5
 800258c:	f000 80e6 	beq.w	800275c <SVCCTL_App_Notification+0x1f8>
 8002590:	2b3e      	cmp	r3, #62	; 0x3e
 8002592:	f000 81b9 	beq.w	8002908 <SVCCTL_App_Notification+0x3a4>
 8002596:	f000 bdaa 	b.w	80030ee <SVCCTL_App_Notification+0xb8a>
    /* USER CODE BEGIN evt */

    /* USER CODE END evt */
    case EVT_VENDOR:
    {
      handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <SVCCTL_App_Notification+0x1e4>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80025a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a2:	3302      	adds	r3, #2
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
      /* USER CODE BEGIN EVT_VENDOR */

      /* USER CODE END EVT_VENDOR */
      switch (blue_evt->ecode)
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f240 4207 	movw	r2, #1031	; 0x407
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <SVCCTL_App_Notification+0x5a>
 80025b4:	f640 0202 	movw	r2, #2050	; 0x802
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d06e      	beq.n	800269a <SVCCTL_App_Notification+0x136>

        default:
          /* USER CODE BEGIN ecode_default */

          /* USER CODE END ecode_default */
          break;
 80025bc:	e0c1      	b.n	8002742 <SVCCTL_App_Notification+0x1de>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	3302      	adds	r3, #2
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 80b6 	bne.w	800273a <SVCCTL_App_Notification+0x1d6>
              && gap_evt_proc_complete->Status == 0x00)
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 80b1 	bne.w	800273a <SVCCTL_App_Notification+0x1d6>
            BSP_LED_Off(LED_BLUE);
 80025d8:	2000      	movs	r0, #0
 80025da:	f002 fa73 	bl	8004ac4 <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 80025de:	485b      	ldr	r0, [pc, #364]	; (800274c <SVCCTL_App_Notification+0x1e8>)
 80025e0:	f009 fd2e 	bl	800c040 <puts>
            if (BleApplicationContext.EndDevice1Found == 0x01
 80025e4:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 80025e6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d109      	bne.n	8002602 <SVCCTL_App_Notification+0x9e>
                && BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 80025ee:	4b58      	ldr	r3, [pc, #352]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 80025f0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d004      	beq.n	8002602 <SVCCTL_App_Notification+0x9e>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 80025f8:	2100      	movs	r1, #0
 80025fa:	2004      	movs	r0, #4
 80025fc:	f009 fb2e 	bl	800bc5c <UTIL_SEQ_SetTask>
 8002600:	e04a      	b.n	8002698 <SVCCTL_App_Notification+0x134>
            else if (BleApplicationContext.EndDevice2Found == 0x01
 8002602:	4b53      	ldr	r3, [pc, #332]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 8002604:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d109      	bne.n	8002620 <SVCCTL_App_Notification+0xbc>
                && BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 800260e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002612:	2b05      	cmp	r3, #5
 8002614:	d004      	beq.n	8002620 <SVCCTL_App_Notification+0xbc>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 8002616:	2100      	movs	r1, #0
 8002618:	2008      	movs	r0, #8
 800261a:	f009 fb1f 	bl	800bc5c <UTIL_SEQ_SetTask>
 800261e:	e03b      	b.n	8002698 <SVCCTL_App_Notification+0x134>
            else if (BleApplicationContext.EndDevice3Found == 0x01
 8002620:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 8002622:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002626:	2b01      	cmp	r3, #1
 8002628:	d109      	bne.n	800263e <SVCCTL_App_Notification+0xda>
                && BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 800262c:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002630:	2b05      	cmp	r3, #5
 8002632:	d004      	beq.n	800263e <SVCCTL_App_Notification+0xda>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8002634:	2100      	movs	r1, #0
 8002636:	2010      	movs	r0, #16
 8002638:	f009 fb10 	bl	800bc5c <UTIL_SEQ_SetTask>
 800263c:	e02c      	b.n	8002698 <SVCCTL_App_Notification+0x134>
            else if (BleApplicationContext.EndDevice4Found == 0x01
 800263e:	4b44      	ldr	r3, [pc, #272]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 8002640:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002644:	2b01      	cmp	r3, #1
 8002646:	d109      	bne.n	800265c <SVCCTL_App_Notification+0xf8>
                && BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 8002648:	4b41      	ldr	r3, [pc, #260]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 800264a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800264e:	2b05      	cmp	r3, #5
 8002650:	d004      	beq.n	800265c <SVCCTL_App_Notification+0xf8>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8002652:	2100      	movs	r1, #0
 8002654:	2020      	movs	r0, #32
 8002656:	f009 fb01 	bl	800bc5c <UTIL_SEQ_SetTask>
 800265a:	e01d      	b.n	8002698 <SVCCTL_App_Notification+0x134>
            else if (BleApplicationContext.EndDevice5Found == 0x01
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 800265e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002662:	2b01      	cmp	r3, #1
 8002664:	d109      	bne.n	800267a <SVCCTL_App_Notification+0x116>
                && BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 8002668:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800266c:	2b05      	cmp	r3, #5
 800266e:	d004      	beq.n	800267a <SVCCTL_App_Notification+0x116>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8002670:	2100      	movs	r1, #0
 8002672:	2040      	movs	r0, #64	; 0x40
 8002674:	f009 faf2 	bl	800bc5c <UTIL_SEQ_SetTask>
 8002678:	e00e      	b.n	8002698 <SVCCTL_App_Notification+0x134>
            else if (BleApplicationContext.EndDevice6Found == 0x01
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 800267c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002680:	2b01      	cmp	r3, #1
 8002682:	d15a      	bne.n	800273a <SVCCTL_App_Notification+0x1d6>
                && BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 8002684:	4b32      	ldr	r3, [pc, #200]	; (8002750 <SVCCTL_App_Notification+0x1ec>)
 8002686:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800268a:	2b05      	cmp	r3, #5
 800268c:	d055      	beq.n	800273a <SVCCTL_App_Notification+0x1d6>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 800268e:	2100      	movs	r1, #0
 8002690:	2080      	movs	r0, #128	; 0x80
 8002692:	f009 fae3 	bl	800bc5c <UTIL_SEQ_SetTask>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 8002696:	e050      	b.n	800273a <SVCCTL_App_Notification+0x1d6>
 8002698:	e04f      	b.n	800273a <SVCCTL_App_Notification+0x1d6>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	3302      	adds	r3, #2
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
          APP_BLE_p2p_Conn_Update_req.Connection_Handle = pr->Connection_Handle;
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026a8:	801a      	strh	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	789a      	ldrb	r2, [r3, #2]
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026b0:	709a      	strb	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026bc:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026c8:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026d4:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026e0:	815a      	strh	r2, [r3, #10]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026ec:	819a      	strh	r2, [r3, #12]
          result = aci_l2cap_connection_parameter_update_resp(APP_BLE_p2p_Conn_Update_req.Connection_Handle,
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026f0:	8818      	ldrh	r0, [r3, #0]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026f4:	88d9      	ldrh	r1, [r3, #6]
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026f8:	891c      	ldrh	r4, [r3, #8]
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 80026fc:	895d      	ldrh	r5, [r3, #10]
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 8002700:	899b      	ldrh	r3, [r3, #12]
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <SVCCTL_App_Notification+0x1f0>)
 8002704:	7892      	ldrb	r2, [r2, #2]
 8002706:	2600      	movs	r6, #0
 8002708:	9604      	str	r6, [sp, #16]
 800270a:	9203      	str	r2, [sp, #12]
 800270c:	2210      	movs	r2, #16
 800270e:	9202      	str	r2, [sp, #8]
 8002710:	2210      	movs	r2, #16
 8002712:	9201      	str	r2, [sp, #4]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	462b      	mov	r3, r5
 8002718:	4622      	mov	r2, r4
 800271a:	f007 fa77 	bl	8009c0c <aci_l2cap_connection_parameter_update_resp>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          APP_DBG_MSG("\r\n\r** NO UPDATE \n");
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <SVCCTL_App_Notification+0x1f4>)
 8002726:	f009 fc8b 	bl	800c040 <puts>
          if(result != BLE_STATUS_SUCCESS) {
 800272a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <SVCCTL_App_Notification+0x1dc>
              BSP_LED_On(LED_RED);
 8002732:	2002      	movs	r0, #2
 8002734:	f002 f9ac 	bl	8004a90 <BSP_LED_On>
        break;
 8002738:	e002      	b.n	8002740 <SVCCTL_App_Notification+0x1dc>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 800273a:	bf00      	nop
 800273c:	f000 bcd7 	b.w	80030ee <SVCCTL_App_Notification+0xb8a>
        break;
 8002740:	bf00      	nop
      }
    }
    break; /* EVT_VENDOR */
 8002742:	f000 bcd4 	b.w	80030ee <SVCCTL_App_Notification+0xb8a>
 8002746:	bf00      	nop
 8002748:	2000165c 	.word	0x2000165c
 800274c:	0800cfc0 	.word	0x0800cfc0
 8002750:	20000148 	.word	0x20000148
 8002754:	200001f0 	.word	0x200001f0
 8002758:	0800cff0 	.word	0x0800cff0
    case EVT_DISCONN_COMPLETE:

      /* USER CODE BEGIN EVT_DISCONN_COMPLETE */

      /* USER CODE END EVT_DISCONN_COMPLETE */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice1)
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b80      	ldr	r3, [pc, #512]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002766:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800276a:	429a      	cmp	r2, r3
 800276c:	d115      	bne.n	800279a <SVCCTL_App_Notification+0x236>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 1 \n");
 800276e:	487f      	ldr	r0, [pc, #508]	; (800296c <SVCCTL_App_Notification+0x408>)
 8002770:	f009 fc66 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 8002774:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002776:	2200      	movs	r2, #0
 8002778:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        BleApplicationContext.connectionHandleEndDevice1 = 0xFFFF;
 800277c:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <SVCCTL_App_Notification+0x404>)
 800277e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002782:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 800278c:	4b79      	ldr	r3, [pc, #484]	; (8002974 <SVCCTL_App_Notification+0x410>)
 800278e:	881a      	ldrh	r2, [r3, #0]
 8002790:	4b77      	ldr	r3, [pc, #476]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002792:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002794:	4876      	ldr	r0, [pc, #472]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002796:	f001 f825 	bl	80037e4 <Evt_Notification>
      }

      if (cc->Connection_Handle == BleApplicationContext.connectionHandleCentral)
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	4b71      	ldr	r3, [pc, #452]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80027a4:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d110      	bne.n	80027ce <SVCCTL_App_Notification+0x26a>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF SMART PHONE \n");
 80027ac:	4872      	ldr	r0, [pc, #456]	; (8002978 <SVCCTL_App_Notification+0x414>)
 80027ae:	f009 fc47 	bl	800c040 <puts>
        BleApplicationContext.connectionHandleCentral = APP_BLE_IDLE;
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        handleNotification.P2P_Evt_Opcode = SMART_PHONE1_DISCON_HANDLE_EVT;
 80027ba:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = 0xFFFF;
 80027c0:	4b6b      	ldr	r3, [pc, #428]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80027c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c6:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80027c8:	4869      	ldr	r0, [pc, #420]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80027ca:	f001 f80b 	bl	80037e4 <Evt_Notification>
      }

#if (CFG_P2P_DEMO_MULTI != 0)
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE_Multi */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice2)
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b64      	ldr	r3, [pc, #400]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80027d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80027dc:	429a      	cmp	r2, r3
 80027de:	d115      	bne.n	800280c <SVCCTL_App_Notification+0x2a8>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 2 \n");
 80027e0:	4866      	ldr	r0, [pc, #408]	; (800297c <SVCCTL_App_Notification+0x418>)
 80027e2:	f009 fc2d 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 80027e6:	4b60      	ldr	r3, [pc, #384]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        BleApplicationContext.connectionHandleEndDevice2 = 0xFFFF;
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80027f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        handleNotification.P2P_Evt_Opcode = P2P_SERVER2_DISCON_HANDLE_EVT;
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80027fa:	2209      	movs	r2, #9
 80027fc:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <SVCCTL_App_Notification+0x410>)
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002804:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002806:	485a      	ldr	r0, [pc, #360]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002808:	f000 ffec 	bl	80037e4 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice3)
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002816:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800281a:	429a      	cmp	r2, r3
 800281c:	d115      	bne.n	800284a <SVCCTL_App_Notification+0x2e6>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 3 \n");
 800281e:	4858      	ldr	r0, [pc, #352]	; (8002980 <SVCCTL_App_Notification+0x41c>)
 8002820:	f009 fc0e 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002826:	2200      	movs	r2, #0
 8002828:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        BleApplicationContext.connectionHandleEndDevice3 = 0xFFFF;
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <SVCCTL_App_Notification+0x404>)
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
        handleNotification.P2P_Evt_Opcode = P2P_SERVER3_DISCON_HANDLE_EVT;
 8002836:	4b4e      	ldr	r3, [pc, #312]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002838:	220a      	movs	r2, #10
 800283a:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 800283c:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <SVCCTL_App_Notification+0x410>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002842:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002844:	484a      	ldr	r0, [pc, #296]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002846:	f000 ffcd 	bl	80037e4 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice4)
 800284a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002854:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8002858:	429a      	cmp	r2, r3
 800285a:	d115      	bne.n	8002888 <SVCCTL_App_Notification+0x324>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 4 \n");
 800285c:	4849      	ldr	r0, [pc, #292]	; (8002984 <SVCCTL_App_Notification+0x420>)
 800285e:	f009 fbef 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        BleApplicationContext.connectionHandleEndDevice4 = 0xFFFF;
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <SVCCTL_App_Notification+0x404>)
 800286c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002870:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        handleNotification.P2P_Evt_Opcode = P2P_SERVER4_DISCON_HANDLE_EVT;
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002876:	220b      	movs	r2, #11
 8002878:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <SVCCTL_App_Notification+0x410>)
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002880:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002882:	483b      	ldr	r0, [pc, #236]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002884:	f000 ffae 	bl	80037e4 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice5)
 8002888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <SVCCTL_App_Notification+0x404>)
 8002892:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002896:	429a      	cmp	r2, r3
 8002898:	d115      	bne.n	80028c6 <SVCCTL_App_Notification+0x362>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 5 \n");
 800289a:	483b      	ldr	r0, [pc, #236]	; (8002988 <SVCCTL_App_Notification+0x424>)
 800289c:	f009 fbd0 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        BleApplicationContext.connectionHandleEndDevice5 = 0xFFFF;
 80028a8:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80028aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ae:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        handleNotification.P2P_Evt_Opcode = P2P_SERVER5_DISCON_HANDLE_EVT;
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80028b4:	220c      	movs	r2, #12
 80028b6:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <SVCCTL_App_Notification+0x410>)
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80028be:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80028c0:	482b      	ldr	r0, [pc, #172]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80028c2:	f000 ff8f 	bl	80037e4 <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice6)
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80028d0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8409 	bne.w	80030ec <SVCCTL_App_Notification+0xb88>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 6 \n");
 80028da:	482c      	ldr	r0, [pc, #176]	; (800298c <SVCCTL_App_Notification+0x428>)
 80028dc:	f009 fbb0 	bl	800c040 <puts>
        BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        BleApplicationContext.connectionHandleEndDevice6 = 0xFFFF;
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <SVCCTL_App_Notification+0x404>)
 80028ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ee:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        handleNotification.P2P_Evt_Opcode = P2P_SERVER6_DISCON_HANDLE_EVT;
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80028f4:	220d      	movs	r2, #13
 80028f6:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <SVCCTL_App_Notification+0x410>)
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	4b1c      	ldr	r3, [pc, #112]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 80028fe:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8002900:	481b      	ldr	r0, [pc, #108]	; (8002970 <SVCCTL_App_Notification+0x40c>)
 8002902:	f000 ff6f 	bl	80037e4 <Evt_Notification>

      
      /* USER CODE END EVT_DISCONN_COMPLETE_Multi */
#endif

      break; /* EVT_DISCONN_COMPLETE */
 8002906:	e3f1      	b.n	80030ec <SVCCTL_App_Notification+0xb88>
    case EVT_LE_META_EVENT:

      /* USER CODE BEGIN EVT_LE_META_EVENT */

      /* USER CODE END EVT_LE_META_EVENT */
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	3302      	adds	r3, #2
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

      switch (meta_evt->subevent)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d003      	beq.n	800291e <SVCCTL_App_Notification+0x3ba>
 8002916:	2b02      	cmp	r3, #2
 8002918:	f000 827a 	beq.w	8002e10 <SVCCTL_App_Notification+0x8ac>

          break;

      }

      break; /* HCI_EVT_LE_META_EVENT */
 800291c:	e3e7      	b.n	80030ee <SVCCTL_App_Notification+0xb8a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3301      	adds	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
          connection_handle = connection_complete_event->Connection_Handle;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <SVCCTL_App_Notification+0x410>)
 800292e:	801a      	strh	r2, [r3, #0]
          role = connection_complete_event->Role;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	73fb      	strb	r3, [r7, #15]
          if (role == 0x00)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 8256 	bne.w	8002dea <SVCCTL_App_Notification+0x886>
            uint8_t dev1 = 1
 800293e:	2301      	movs	r3, #1
 8002940:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
           , dev2 = 1,dev3 = 1,dev4 = 1,dev5 = 1,dev6 = 1
 8002944:	2301      	movs	r3, #1
 8002946:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002956:	2301      	movs	r3, #1
 8002958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
 8002966:	e094      	b.n	8002a92 <SVCCTL_App_Notification+0x52e>
 8002968:	20000148 	.word	0x20000148
 800296c:	0800d004 	.word	0x0800d004
 8002970:	2000165c 	.word	0x2000165c
 8002974:	2000166e 	.word	0x2000166e
 8002978:	0800d030 	.word	0x0800d030
 800297c:	0800d05c 	.word	0x0800d05c
 8002980:	0800d088 	.word	0x0800d088
 8002984:	0800d0b4 	.word	0x0800d0b4
 8002988:	0800d0e0 	.word	0x0800d0e0
 800298c:	0800d10c 	.word	0x0800d10c
              dev1 &= (P2P_SERVER1_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002990:	4a9b      	ldr	r2, [pc, #620]	; (8002c00 <SVCCTL_App_Notification+0x69c>)
 8002992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002994:	4413      	add	r3, r2
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	440b      	add	r3, r1
 800299e:	3305      	adds	r3, #5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b25a      	sxtb	r2, r3
 80029ae:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80029b2:	4013      	ands	r3, r2
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
              dev2 &= (P2P_SERVER2_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80029ba:	4a92      	ldr	r2, [pc, #584]	; (8002c04 <SVCCTL_App_Notification+0x6a0>)
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	4413      	add	r3, r2
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	440b      	add	r3, r1
 80029c8:	3305      	adds	r3, #5
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	b25a      	sxtb	r2, r3
 80029d8:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80029dc:	4013      	ands	r3, r2
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              dev3 &= (P2P_SERVER3_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80029e4:	4a88      	ldr	r2, [pc, #544]	; (8002c08 <SVCCTL_App_Notification+0x6a4>)
 80029e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e8:	4413      	add	r3, r2
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f0:	440b      	add	r3, r1
 80029f2:	3305      	adds	r3, #5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	b25a      	sxtb	r2, r3
 8002a02:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 8002a06:	4013      	ands	r3, r2
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
              dev4 &= (P2P_SERVER4_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002a0e:	4a7f      	ldr	r2, [pc, #508]	; (8002c0c <SVCCTL_App_Notification+0x6a8>)
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	4413      	add	r3, r2
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	6939      	ldr	r1, [r7, #16]
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3305      	adds	r3, #5
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	b25a      	sxtb	r2, r3
 8002a2c:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8002a30:	4013      	ands	r3, r2
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
              dev5 &= (P2P_SERVER5_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002a38:	4a75      	ldr	r2, [pc, #468]	; (8002c10 <SVCCTL_App_Notification+0x6ac>)
 8002a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a44:	440b      	add	r3, r1
 8002a46:	3305      	adds	r3, #5
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	b25a      	sxtb	r2, r3
 8002a56:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
              dev6 &= (P2P_SERVER6_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8002a62:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <SVCCTL_App_Notification+0x6b0>)
 8002a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a66:	4413      	add	r3, r2
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	6939      	ldr	r1, [r7, #16]
 8002a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6e:	440b      	add	r3, r1
 8002a70:	3305      	adds	r3, #5
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b25a      	sxtb	r2, r3
 8002a80:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8002a84:	4013      	ands	r3, r2
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	3301      	adds	r3, #1
 8002a90:	643b      	str	r3, [r7, #64]	; 0x40
 8002a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	f77f af7b 	ble.w	8002990 <SVCCTL_App_Notification+0x42c>
            if (dev1 == 1)
 8002a9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d13e      	bne.n	8002b20 <SVCCTL_App_Notification+0x5bc>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 1\n");
 8002aa2:	485d      	ldr	r0, [pc, #372]	; (8002c18 <SVCCTL_App_Notification+0x6b4>)
 8002aa4:	f009 facc 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTED;
 8002aa8:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002aaa:	2205      	movs	r2, #5
 8002aac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
              BleApplicationContext.connectionHandleEndDevice1 = connection_handle;
 8002ab0:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002ab6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[0] = connection_handle;
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002ac0:	82da      	strh	r2, [r3, #22]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER1_CONN_HANDLE_EVT;
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002ac8:	4b55      	ldr	r3, [pc, #340]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002aca:	881a      	ldrh	r2, [r3, #0]
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002ace:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002ad0:	4854      	ldr	r0, [pc, #336]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002ad2:	f000 fe87 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice1);
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002ad8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8002adc:	4618      	mov	r0, r3
 8002ade:	f006 fd86 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <SVCCTL_App_Notification+0x59a>
                APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n");
 8002af0:	484d      	ldr	r0, [pc, #308]	; (8002c28 <SVCCTL_App_Notification+0x6c4>)
 8002af2:	f009 faa5 	bl	800c040 <puts>
                APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 8002af6:	484d      	ldr	r0, [pc, #308]	; (8002c2c <SVCCTL_App_Notification+0x6c8>)
 8002af8:	f009 fa06 	bl	800bf08 <iprintf>
 8002afc:	e002      	b.n	8002b04 <SVCCTL_App_Notification+0x5a0>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002afe:	484c      	ldr	r0, [pc, #304]	; (8002c30 <SVCCTL_App_Notification+0x6cc>)
 8002b00:	f009 fa02 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 8002b04:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b06:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d008      	beq.n	8002b20 <SVCCTL_App_Notification+0x5bc>
                  && (BleApplicationContext.EndDevice2Found == 0x01))
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b10:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d103      	bne.n	8002b20 <SVCCTL_App_Notification+0x5bc>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2008      	movs	r0, #8
 8002b1c:	f009 f89e 	bl	800bc5c <UTIL_SEQ_SetTask>
          if (dev2 == 1)
 8002b20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13b      	bne.n	8002ba0 <SVCCTL_App_Notification+0x63c>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 2\n");
 8002b28:	4842      	ldr	r0, [pc, #264]	; (8002c34 <SVCCTL_App_Notification+0x6d0>)
 8002b2a:	f009 fa89 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTED;
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b30:	2205      	movs	r2, #5
 8002b32:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
              BleApplicationContext.connectionHandleEndDevice2 = connection_handle;
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b3c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[1] = connection_handle;
 8002b40:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002b42:	881a      	ldrh	r2, [r3, #0]
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b46:	831a      	strh	r2, [r3, #24]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER2_CONN_HANDLE_EVT;
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002b50:	881a      	ldrh	r2, [r3, #0]
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002b54:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002b56:	4833      	ldr	r0, [pc, #204]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002b58:	f000 fe44 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice2);
 8002b5c:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b5e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8002b62:	4618      	mov	r0, r3
 8002b64:	f006 fd43 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <SVCCTL_App_Notification+0x61a>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002b76:	4830      	ldr	r0, [pc, #192]	; (8002c38 <SVCCTL_App_Notification+0x6d4>)
 8002b78:	f009 f9c6 	bl	800bf08 <iprintf>
 8002b7c:	e002      	b.n	8002b84 <SVCCTL_App_Notification+0x620>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002b7e:	482c      	ldr	r0, [pc, #176]	; (8002c30 <SVCCTL_App_Notification+0x6cc>)
 8002b80:	f009 f9c2 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b86:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d008      	beq.n	8002ba0 <SVCCTL_App_Notification+0x63c>
                  && (BleApplicationContext.EndDevice1Found == 0x01))
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002b90:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d103      	bne.n	8002ba0 <SVCCTL_App_Notification+0x63c>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2004      	movs	r0, #4
 8002b9c:	f009 f85e 	bl	800bc5c <UTIL_SEQ_SetTask>
            if (dev3 == 1)
 8002ba0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d15c      	bne.n	8002c62 <SVCCTL_App_Notification+0x6fe>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 3\n");
 8002ba8:	4824      	ldr	r0, [pc, #144]	; (8002c3c <SVCCTL_App_Notification+0x6d8>)
 8002baa:	f009 fa49 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTED;
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
              BleApplicationContext.connectionHandleEndDevice3 = connection_handle;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002bb8:	881a      	ldrh	r2, [r3, #0]
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002bbc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[2] = connection_handle;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002bc6:	835a      	strh	r2, [r3, #26]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER3_CONN_HANDLE_EVT;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002bca:	2205      	movs	r2, #5
 8002bcc:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <SVCCTL_App_Notification+0x6bc>)
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002bd4:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002bd6:	4813      	ldr	r0, [pc, #76]	; (8002c24 <SVCCTL_App_Notification+0x6c0>)
 8002bd8:	f000 fe04 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice3);
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <SVCCTL_App_Notification+0x6b8>)
 8002bde:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 fd03 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d124      	bne.n	8002c40 <SVCCTL_App_Notification+0x6dc>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002bf6:	4810      	ldr	r0, [pc, #64]	; (8002c38 <SVCCTL_App_Notification+0x6d4>)
 8002bf8:	f009 f986 	bl	800bf08 <iprintf>
 8002bfc:	e023      	b.n	8002c46 <SVCCTL_App_Notification+0x6e2>
 8002bfe:	bf00      	nop
 8002c00:	20001670 	.word	0x20001670
 8002c04:	20001678 	.word	0x20001678
 8002c08:	20001680 	.word	0x20001680
 8002c0c:	20001668 	.word	0x20001668
 8002c10:	20001688 	.word	0x20001688
 8002c14:	20001654 	.word	0x20001654
 8002c18:	0800d138 	.word	0x0800d138
 8002c1c:	20000148 	.word	0x20000148
 8002c20:	2000166e 	.word	0x2000166e
 8002c24:	2000165c 	.word	0x2000165c
 8002c28:	0800d160 	.word	0x0800d160
 8002c2c:	0800d194 	.word	0x0800d194
 8002c30:	0800d1c4 	.word	0x0800d1c4
 8002c34:	0800d204 	.word	0x0800d204
 8002c38:	0800d22c 	.word	0x0800d22c
 8002c3c:	0800d25c 	.word	0x0800d25c
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002c40:	48b6      	ldr	r0, [pc, #728]	; (8002f1c <SVCCTL_App_Notification+0x9b8>)
 8002c42:	f009 f961 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 8002c46:	4bb6      	ldr	r3, [pc, #728]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002c48:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d008      	beq.n	8002c62 <SVCCTL_App_Notification+0x6fe>
                  && (BleApplicationContext.EndDevice4Found == 0x01))
 8002c50:	4bb3      	ldr	r3, [pc, #716]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002c52:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d103      	bne.n	8002c62 <SVCCTL_App_Notification+0x6fe>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2020      	movs	r0, #32
 8002c5e:	f008 fffd 	bl	800bc5c <UTIL_SEQ_SetTask>
            if (dev4 == 1)
 8002c62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d13b      	bne.n	8002ce2 <SVCCTL_App_Notification+0x77e>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 4\n");
 8002c6a:	48ae      	ldr	r0, [pc, #696]	; (8002f24 <SVCCTL_App_Notification+0x9c0>)
 8002c6c:	f009 f9e8 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTED;
 8002c70:	4bab      	ldr	r3, [pc, #684]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002c72:	2205      	movs	r2, #5
 8002c74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
              BleApplicationContext.connectionHandleEndDevice4 = connection_handle;
 8002c78:	4bab      	ldr	r3, [pc, #684]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	4ba8      	ldr	r3, [pc, #672]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002c7e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[3] = connection_handle;
 8002c82:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	4ba6      	ldr	r3, [pc, #664]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002c88:	839a      	strh	r2, [r3, #28]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER4_CONN_HANDLE_EVT;
 8002c8a:	4ba8      	ldr	r3, [pc, #672]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002c8c:	2206      	movs	r2, #6
 8002c8e:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002c90:	4ba5      	ldr	r3, [pc, #660]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	4ba5      	ldr	r3, [pc, #660]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002c96:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002c98:	48a4      	ldr	r0, [pc, #656]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002c9a:	f000 fda3 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice4);
 8002c9e:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002ca0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f006 fca2 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <SVCCTL_App_Notification+0x75c>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002cb8:	489d      	ldr	r0, [pc, #628]	; (8002f30 <SVCCTL_App_Notification+0x9cc>)
 8002cba:	f009 f925 	bl	800bf08 <iprintf>
 8002cbe:	e002      	b.n	8002cc6 <SVCCTL_App_Notification+0x762>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002cc0:	4896      	ldr	r0, [pc, #600]	; (8002f1c <SVCCTL_App_Notification+0x9b8>)
 8002cc2:	f009 f921 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 8002cc6:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002cc8:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d008      	beq.n	8002ce2 <SVCCTL_App_Notification+0x77e>
                  && (BleApplicationContext.EndDevice3Found == 0x01))
 8002cd0:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002cd2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d103      	bne.n	8002ce2 <SVCCTL_App_Notification+0x77e>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2010      	movs	r0, #16
 8002cde:	f008 ffbd 	bl	800bc5c <UTIL_SEQ_SetTask>
            if (dev5 == 1)
 8002ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d13b      	bne.n	8002d62 <SVCCTL_App_Notification+0x7fe>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 5\n");
 8002cea:	4892      	ldr	r0, [pc, #584]	; (8002f34 <SVCCTL_App_Notification+0x9d0>)
 8002cec:	f009 f9a8 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTED;
 8002cf0:	4b8b      	ldr	r3, [pc, #556]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
              BleApplicationContext.connectionHandleEndDevice5 = connection_handle;
 8002cf8:	4b8b      	ldr	r3, [pc, #556]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002cfe:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[4] = connection_handle;
 8002d02:	4b89      	ldr	r3, [pc, #548]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	4b86      	ldr	r3, [pc, #536]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d08:	83da      	strh	r2, [r3, #30]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER5_CONN_HANDLE_EVT;
 8002d0a:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002d10:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d16:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002d18:	4884      	ldr	r0, [pc, #528]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d1a:	f000 fd63 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice5);
 8002d1e:	4b80      	ldr	r3, [pc, #512]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d20:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8002d24:	4618      	mov	r0, r3
 8002d26:	f006 fc62 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002d30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <SVCCTL_App_Notification+0x7dc>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002d38:	487d      	ldr	r0, [pc, #500]	; (8002f30 <SVCCTL_App_Notification+0x9cc>)
 8002d3a:	f009 f8e5 	bl	800bf08 <iprintf>
 8002d3e:	e002      	b.n	8002d46 <SVCCTL_App_Notification+0x7e2>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002d40:	4876      	ldr	r0, [pc, #472]	; (8002f1c <SVCCTL_App_Notification+0x9b8>)
 8002d42:	f009 f8e1 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d48:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d008      	beq.n	8002d62 <SVCCTL_App_Notification+0x7fe>
                  && (BleApplicationContext.EndDevice6Found == 0x01))
 8002d50:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d52:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d103      	bne.n	8002d62 <SVCCTL_App_Notification+0x7fe>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2080      	movs	r0, #128	; 0x80
 8002d5e:	f008 ff7d 	bl	800bc5c <UTIL_SEQ_SetTask>
            if (dev6 == 1)
 8002d62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	f040 81bc 	bne.w	80030e4 <SVCCTL_App_Notification+0xb80>
              APP_DBG_MSG("-- CONNECTION SUCCESS WITH END DEVICE 6\n");
 8002d6c:	4872      	ldr	r0, [pc, #456]	; (8002f38 <SVCCTL_App_Notification+0x9d4>)
 8002d6e:	f009 f967 	bl	800c040 <puts>
              BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTED;
 8002d72:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
              BleApplicationContext.connectionHandleEndDevice6 = connection_handle;
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d80:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[5] = connection_handle;
 8002d84:	4b68      	ldr	r3, [pc, #416]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002d86:	881a      	ldrh	r2, [r3, #0]
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002d8a:	841a      	strh	r2, [r3, #32]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER6_CONN_HANDLE_EVT;
 8002d8c:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d8e:	2208      	movs	r2, #8
 8002d90:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 8002d92:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d98:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 8002d9a:	4864      	ldr	r0, [pc, #400]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002d9c:	f000 fd22 	bl	80037e4 <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice6);
 8002da0:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002da2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 fc21 	bl	80095ee <aci_gatt_disc_all_primary_services>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
              if (result == BLE_STATUS_SUCCESS)
 8002db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <SVCCTL_App_Notification+0x85e>
                APP_DBG_MSG("* GATT : Start Searching Primary Services \r\n\r");
 8002dba:	485d      	ldr	r0, [pc, #372]	; (8002f30 <SVCCTL_App_Notification+0x9cc>)
 8002dbc:	f009 f8a4 	bl	800bf08 <iprintf>
 8002dc0:	e002      	b.n	8002dc8 <SVCCTL_App_Notification+0x864>
                APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002dc2:	4856      	ldr	r0, [pc, #344]	; (8002f1c <SVCCTL_App_Notification+0x9b8>)
 8002dc4:	f009 f8a0 	bl	800bf08 <iprintf>
              if ((BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002dca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	f000 8188 	beq.w	80030e4 <SVCCTL_App_Notification+0xb80>
                  && (BleApplicationContext.EndDevice5Found == 0x01))
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002dd6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 8182 	bne.w	80030e4 <SVCCTL_App_Notification+0xb80>
                UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8002de0:	2100      	movs	r1, #0
 8002de2:	2040      	movs	r0, #64	; 0x40
 8002de4:	f008 ff3a 	bl	800bc5c <UTIL_SEQ_SetTask>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002de8:	e17c      	b.n	80030e4 <SVCCTL_App_Notification+0xb80>
            APP_DBG_MSG("-- CONNECTION SUCCESS WITH SMART PHONE\n");
 8002dea:	4854      	ldr	r0, [pc, #336]	; (8002f3c <SVCCTL_App_Notification+0x9d8>)
 8002dec:	f009 f928 	bl	800c040 <puts>
            BleApplicationContext.connectionHandleCentral = connection_handle;
 8002df0:	4b4d      	ldr	r3, [pc, #308]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <SVCCTL_App_Notification+0x9bc>)
 8002df6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
            handleNotification.P2P_Evt_Opcode = SMART_PHONE1_CONN_HANDLE_EVT;
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = connection_handle;
 8002e00:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <SVCCTL_App_Notification+0x9c4>)
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002e06:	805a      	strh	r2, [r3, #2]
            Evt_Notification(&handleNotification);
 8002e08:	4848      	ldr	r0, [pc, #288]	; (8002f2c <SVCCTL_App_Notification+0x9c8>)
 8002e0a:	f000 fceb 	bl	80037e4 <Evt_Notification>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002e0e:	e169      	b.n	80030e4 <SVCCTL_App_Notification+0xb80>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	623b      	str	r3, [r7, #32]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	77fb      	strb	r3, [r7, #31]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	7a5b      	ldrb	r3, [r3, #9]
 8002e20:	77bb      	strb	r3, [r7, #30]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	3309      	adds	r3, #9
 8002e26:	3301      	adds	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
          k = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
          if (event_type == ADV_IND)
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8159 	bne.w	80030e8 <SVCCTL_App_Notification+0xb84>
            while(k < event_data_size)
 8002e36:	e14f      	b.n	80030d8 <SVCCTL_App_Notification+0xb74>
              adlength = adv_report_data[k];
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	75fb      	strb	r3, [r7, #23]
              adtype = adv_report_data[k + 1];
 8002e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e44:	3301      	adds	r3, #1
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	75bb      	strb	r3, [r7, #22]
              switch (adtype)
 8002e4e:	7dbb      	ldrb	r3, [r7, #22]
 8002e50:	2b16      	cmp	r3, #22
 8002e52:	dc35      	bgt.n	8002ec0 <SVCCTL_App_Notification+0x95c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f340 8139 	ble.w	80030cc <SVCCTL_App_Notification+0xb68>
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	2b15      	cmp	r3, #21
 8002e5e:	f200 8135 	bhi.w	80030cc <SVCCTL_App_Notification+0xb68>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <SVCCTL_App_Notification+0x904>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	080030cd 	.word	0x080030cd
 8002e6c:	080030cd 	.word	0x080030cd
 8002e70:	080030cd 	.word	0x080030cd
 8002e74:	080030cd 	.word	0x080030cd
 8002e78:	080030cd 	.word	0x080030cd
 8002e7c:	080030cd 	.word	0x080030cd
 8002e80:	080030cd 	.word	0x080030cd
 8002e84:	080030cd 	.word	0x080030cd
 8002e88:	080030cd 	.word	0x080030cd
 8002e8c:	080030cd 	.word	0x080030cd
 8002e90:	080030cd 	.word	0x080030cd
 8002e94:	080030cd 	.word	0x080030cd
 8002e98:	080030cd 	.word	0x080030cd
 8002e9c:	080030cd 	.word	0x080030cd
 8002ea0:	080030cd 	.word	0x080030cd
 8002ea4:	080030cd 	.word	0x080030cd
 8002ea8:	080030cd 	.word	0x080030cd
 8002eac:	080030cd 	.word	0x080030cd
 8002eb0:	080030cd 	.word	0x080030cd
 8002eb4:	080030cd 	.word	0x080030cd
 8002eb8:	080030cd 	.word	0x080030cd
 8002ebc:	080030cd 	.word	0x080030cd
 8002ec0:	2bff      	cmp	r3, #255	; 0xff
 8002ec2:	f040 8103 	bne.w	80030cc <SVCCTL_App_Notification+0xb68>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	f240 80fb 	bls.w	80030c4 <SVCCTL_App_Notification+0xb60>
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 80f3 	bne.w	80030c4 <SVCCTL_App_Notification+0xb60>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 8002ede:	4818      	ldr	r0, [pc, #96]	; (8002f40 <SVCCTL_App_Notification+0x9dc>)
 8002ee0:	f009 f8ae 	bl	800c040 <puts>
                    switch (adv_report_data[k + 3])
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	3303      	adds	r3, #3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3b83      	subs	r3, #131	; 0x83
 8002ef0:	2b07      	cmp	r3, #7
 8002ef2:	f200 80e9 	bhi.w	80030c8 <SVCCTL_App_Notification+0xb64>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <SVCCTL_App_Notification+0x998>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f45 	.word	0x08002f45
 8002f00:	08002f85 	.word	0x08002f85
 8002f04:	080030c9 	.word	0x080030c9
 8002f08:	080030c9 	.word	0x080030c9
 8002f0c:	08002fc5 	.word	0x08002fc5
 8002f10:	08003005 	.word	0x08003005
 8002f14:	08003045 	.word	0x08003045
 8002f18:	08003085 	.word	0x08003085
 8002f1c:	0800d1c4 	.word	0x0800d1c4
 8002f20:	20000148 	.word	0x20000148
 8002f24:	0800d284 	.word	0x0800d284
 8002f28:	2000166e 	.word	0x2000166e
 8002f2c:	2000165c 	.word	0x2000165c
 8002f30:	0800d22c 	.word	0x0800d22c
 8002f34:	0800d2ac 	.word	0x0800d2ac
 8002f38:	0800d2d4 	.word	0x0800d2d4
 8002f3c:	0800d2fc 	.word	0x0800d2fc
 8002f40:	0800d324 	.word	0x0800d324
                        APP_DBG_MSG("-- P2P SERVER 1 DETECTED -- VIA MAN ID\n");
 8002f44:	486c      	ldr	r0, [pc, #432]	; (80030f8 <SVCCTL_App_Notification+0xb94>)
 8002f46:	f009 f87b 	bl	800c040 <puts>
                        BleApplicationContext.EndDevice1Found = 0x01;
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                        P2P_SERVER1_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	78da      	ldrb	r2, [r3, #3]
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f58:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER1_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	791a      	ldrb	r2, [r3, #4]
 8002f5e:	4b68      	ldr	r3, [pc, #416]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f60:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER1_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	795a      	ldrb	r2, [r3, #5]
 8002f66:	4b66      	ldr	r3, [pc, #408]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f68:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER1_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	799a      	ldrb	r2, [r3, #6]
 8002f6e:	4b64      	ldr	r3, [pc, #400]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f70:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER1_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	79da      	ldrb	r2, [r3, #7]
 8002f76:	4b62      	ldr	r3, [pc, #392]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f78:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER1_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	7a1a      	ldrb	r2, [r3, #8]
 8002f7e:	4b60      	ldr	r3, [pc, #384]	; (8003100 <SVCCTL_App_Notification+0xb9c>)
 8002f80:	715a      	strb	r2, [r3, #5]
                        break;
 8002f82:	e0a2      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                        BleApplicationContext.EndDevice2Found = 0x01;
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
                        APP_DBG_MSG("-- P2P SERVER 2 DETECTED -- VIA MAN ID\n");
 8002f8c:	485d      	ldr	r0, [pc, #372]	; (8003104 <SVCCTL_App_Notification+0xba0>)
 8002f8e:	f009 f857 	bl	800c040 <puts>
                        P2P_SERVER2_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	78da      	ldrb	r2, [r3, #3]
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002f98:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER2_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	791a      	ldrb	r2, [r3, #4]
 8002f9e:	4b5a      	ldr	r3, [pc, #360]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002fa0:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER2_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	795a      	ldrb	r2, [r3, #5]
 8002fa6:	4b58      	ldr	r3, [pc, #352]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002fa8:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER2_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	799a      	ldrb	r2, [r3, #6]
 8002fae:	4b56      	ldr	r3, [pc, #344]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002fb0:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER2_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	79da      	ldrb	r2, [r3, #7]
 8002fb6:	4b54      	ldr	r3, [pc, #336]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002fb8:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER2_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	7a1a      	ldrb	r2, [r3, #8]
 8002fbe:	4b52      	ldr	r3, [pc, #328]	; (8003108 <SVCCTL_App_Notification+0xba4>)
 8002fc0:	715a      	strb	r2, [r3, #5]
                        break;
 8002fc2:	e082      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                        APP_DBG_MSG("-- P2P SERVER 3 DETECTED -- VIA MAN ID\n");
 8002fc4:	4851      	ldr	r0, [pc, #324]	; (800310c <SVCCTL_App_Notification+0xba8>)
 8002fc6:	f009 f83b 	bl	800c040 <puts>
                        BleApplicationContext.EndDevice3Found = 0x01;
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                        P2P_SERVER3_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	78da      	ldrb	r2, [r3, #3]
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8002fd8:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER3_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	791a      	ldrb	r2, [r3, #4]
 8002fde:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8002fe0:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER3_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	795a      	ldrb	r2, [r3, #5]
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8002fe8:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER3_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	799a      	ldrb	r2, [r3, #6]
 8002fee:	4b48      	ldr	r3, [pc, #288]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8002ff0:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER3_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	79da      	ldrb	r2, [r3, #7]
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8002ff8:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER3_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	7a1a      	ldrb	r2, [r3, #8]
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <SVCCTL_App_Notification+0xbac>)
 8003000:	715a      	strb	r2, [r3, #5]
                        break;
 8003002:	e062      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                        BleApplicationContext.EndDevice4Found = 0x01;
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 8003006:	2201      	movs	r2, #1
 8003008:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
                        APP_DBG_MSG("-- P2P SERVER 4 DETECTED -- VIA MAN ID\n");
 800300c:	4841      	ldr	r0, [pc, #260]	; (8003114 <SVCCTL_App_Notification+0xbb0>)
 800300e:	f009 f817 	bl	800c040 <puts>
                        P2P_SERVER4_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	78da      	ldrb	r2, [r3, #3]
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003018:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER4_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	791a      	ldrb	r2, [r3, #4]
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003020:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER4_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	795a      	ldrb	r2, [r3, #5]
 8003026:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003028:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER4_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	799a      	ldrb	r2, [r3, #6]
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003030:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER4_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	79da      	ldrb	r2, [r3, #7]
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003038:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER4_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	7a1a      	ldrb	r2, [r3, #8]
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <SVCCTL_App_Notification+0xbb4>)
 8003040:	715a      	strb	r2, [r3, #5]
                        break;
 8003042:	e042      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                        APP_DBG_MSG("-- P2P SERVER 5 DETECTED -- VIA MAN ID\n");
 8003044:	4835      	ldr	r0, [pc, #212]	; (800311c <SVCCTL_App_Notification+0xbb8>)
 8003046:	f008 fffb 	bl	800c040 <puts>
                        BleApplicationContext.EndDevice5Found = 0x01;
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 800304c:	2201      	movs	r2, #1
 800304e:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
                        P2P_SERVER5_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	78da      	ldrb	r2, [r3, #3]
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003058:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER5_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	791a      	ldrb	r2, [r3, #4]
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003060:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER5_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	795a      	ldrb	r2, [r3, #5]
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003068:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER5_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	799a      	ldrb	r2, [r3, #6]
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003070:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER5_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	79da      	ldrb	r2, [r3, #7]
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003078:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER5_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	7a1a      	ldrb	r2, [r3, #8]
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <SVCCTL_App_Notification+0xbbc>)
 8003080:	715a      	strb	r2, [r3, #5]
                        break;
 8003082:	e022      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                        BleApplicationContext.EndDevice6Found = 0x01;
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <SVCCTL_App_Notification+0xb98>)
 8003086:	2201      	movs	r2, #1
 8003088:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
                        APP_DBG_MSG("-- P2P SERVER 6 DETECTED -- VIA MAN ID\n");
 800308c:	4825      	ldr	r0, [pc, #148]	; (8003124 <SVCCTL_App_Notification+0xbc0>)
 800308e:	f008 ffd7 	bl	800c040 <puts>
                        P2P_SERVER6_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	78da      	ldrb	r2, [r3, #3]
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 8003098:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER6_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	791a      	ldrb	r2, [r3, #4]
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 80030a0:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER6_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	795a      	ldrb	r2, [r3, #5]
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 80030a8:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER6_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	799a      	ldrb	r2, [r3, #6]
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 80030b0:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER6_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	79da      	ldrb	r2, [r3, #7]
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 80030b8:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER6_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	7a1a      	ldrb	r2, [r3, #8]
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <SVCCTL_App_Notification+0xbc4>)
 80030c0:	715a      	strb	r2, [r3, #5]
                        break;
 80030c2:	e002      	b.n	80030ca <SVCCTL_App_Notification+0xb66>
                  }
 80030c4:	bf00      	nop
 80030c6:	e002      	b.n	80030ce <SVCCTL_App_Notification+0xb6a>
                    break;
 80030c8:	bf00      	nop
                  break;
 80030ca:	e000      	b.n	80030ce <SVCCTL_App_Notification+0xb6a>
                  break;
 80030cc:	bf00      	nop
              k += adlength + 1;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	3301      	adds	r3, #1
 80030d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d4:	4413      	add	r3, r2
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(k < event_data_size)
 80030d8:	7fbb      	ldrb	r3, [r7, #30]
 80030da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030dc:	429a      	cmp	r2, r3
 80030de:	f6ff aeab 	blt.w	8002e38 <SVCCTL_App_Notification+0x8d4>
          break;
 80030e2:	e001      	b.n	80030e8 <SVCCTL_App_Notification+0xb84>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 80030e4:	bf00      	nop
 80030e6:	e002      	b.n	80030ee <SVCCTL_App_Notification+0xb8a>
          break;
 80030e8:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 80030ea:	e000      	b.n	80030ee <SVCCTL_App_Notification+0xb8a>
      break; /* EVT_DISCONN_COMPLETE */
 80030ec:	bf00      	nop
    }
  return (SVCCTL_UserEvtFlowEnable);
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3754      	adds	r7, #84	; 0x54
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f8:	0800d340 	.word	0x0800d340
 80030fc:	20000148 	.word	0x20000148
 8003100:	20001670 	.word	0x20001670
 8003104:	0800d368 	.word	0x0800d368
 8003108:	20001678 	.word	0x20001678
 800310c:	0800d390 	.word	0x0800d390
 8003110:	20001680 	.word	0x20001680
 8003114:	0800d3b8 	.word	0x0800d3b8
 8003118:	20001668 	.word	0x20001668
 800311c:	0800d3e0 	.word	0x0800d3e0
 8003120:	20001688 	.word	0x20001688
 8003124:	0800d408 	.word	0x0800d408
 8003128:	20001654 	.word	0x20001654

0800312c <APP_BLE_Get_Client_Connection_Status>:
 * PUBLIC FUNCTIONS
 *
 *************************************************************/

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_1 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_1 */
  APP_BLE_ConnStatus_t return_value;

  if (BleApplicationContext.connectionHandleEndDevice1 == Connection_Handle)
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003138:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800313c:	88fa      	ldrh	r2, [r7, #6]
 800313e:	429a      	cmp	r2, r3
 8003140:	d104      	bne.n	800314c <APP_BLE_Get_Client_Connection_Status+0x20>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[0];
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003144:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e038      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_Multi */
  else if (BleApplicationContext.connectionHandleEndDevice2 == Connection_Handle)
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800314e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	429a      	cmp	r2, r3
 8003156:	d104      	bne.n	8003162 <APP_BLE_Get_Client_Connection_Status+0x36>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[1];
 8003158:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800315a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e02d      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice3 == Connection_Handle)
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003164:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	429a      	cmp	r2, r3
 800316c:	d104      	bne.n	8003178 <APP_BLE_Get_Client_Connection_Status+0x4c>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[2];
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003170:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e022      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice4 == Connection_Handle)
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800317a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	429a      	cmp	r2, r3
 8003182:	d104      	bne.n	800318e <APP_BLE_Get_Client_Connection_Status+0x62>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[3];
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003186:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e017      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice5 == Connection_Handle)
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8003190:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	429a      	cmp	r2, r3
 8003198:	d104      	bne.n	80031a4 <APP_BLE_Get_Client_Connection_Status+0x78>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[4];
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 800319c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e00c      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice6 == Connection_Handle)
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80031a6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d104      	bne.n	80031ba <APP_BLE_Get_Client_Connection_Status+0x8e>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[5];
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <APP_BLE_Get_Client_Connection_Status+0xa0>)
 80031b2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e001      	b.n	80031be <APP_BLE_Get_Client_Connection_Status+0x92>
  }
/* USER CODE END APP_BLE_Get_Client_Connection_Status_Multi */
#endif
  else
  {
    return_value = APP_BLE_IDLE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_2 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_2 */
  return (return_value);
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20000148 	.word	0x20000148

080031d0 <APP_BLE_Key_Button1_Action>:

/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 80031d4:	2100      	movs	r1, #0
 80031d6:	2002      	movs	r0, #2
 80031d8:	f008 fd40 	bl	800bc5c <UTIL_SEQ_SetTask>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <Ble_Tl_Init+0x20>)
 8003204:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <Ble_Tl_Init+0x24>)
 8003208:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800320a:	463b      	mov	r3, r7
 800320c:	4619      	mov	r1, r3
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <Ble_Tl_Init+0x28>)
 8003210:	f006 ff34 	bl	800a07c <hci_init>

  return;
 8003214:	bf00      	nop
}
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20030028 	.word	0x20030028
 8003220:	08003a4b 	.word	0x08003a4b
 8003224:	08003a13 	.word	0x08003a13

08003228 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b08f      	sub	sp, #60	; 0x3c
 800322c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_UNKNOWN_APPEARANCE };
 800322e:	2300      	movs	r3, #0
 8003230:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8003232:	f006 fcc7 	bl	8009bc4 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8003236:	f000 fb85 	bl	8003944 <BleGetBdAddress>
 800323a:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	2106      	movs	r1, #6
 8003240:	2000      	movs	r0, #0
 8003242:	f006 fbff 	bl	8009a44 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	795a      	ldrb	r2, [r3, #5]
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800324c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	791a      	ldrb	r2, [r3, #4]
 8003252:	4b54      	ldr	r3, [pc, #336]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8003254:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	78da      	ldrb	r2, [r3, #3]
 800325a:	4b52      	ldr	r3, [pc, #328]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800325c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	789a      	ldrb	r2, [r3, #2]
 8003262:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8003264:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	785a      	ldrb	r2, [r3, #1]
 800326a:	4b4e      	ldr	r3, [pc, #312]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800326c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8003274:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 8003276:	4a4c      	ldr	r2, [pc, #304]	; (80033a8 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8003278:	2110      	movs	r1, #16
 800327a:	2018      	movs	r0, #24
 800327c:	f006 fbe2 	bl	8009a44 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8003280:	4a4a      	ldr	r2, [pc, #296]	; (80033ac <Ble_Hci_Gap_Gatt_Init+0x184>)
 8003282:	2110      	movs	r1, #16
 8003284:	2008      	movs	r0, #8
 8003286:	f006 fbdd 	bl	8009a44 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800328a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800328e:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8003290:	f7ff f8a0 	bl	80023d4 <LL_FLASH_GetUDN>
 8003294:	4603      	mov	r3, r0
 8003296:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	461a      	mov	r2, r3
 800329c:	2106      	movs	r1, #6
 800329e:	202e      	movs	r0, #46	; 0x2e
 80032a0:	f006 fbd0 	bl	8009a44 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80032a4:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <Ble_Hci_Gap_Gatt_Init+0x180>)
 80032a6:	2110      	movs	r1, #16
 80032a8:	2018      	movs	r0, #24
 80032aa:	f006 fbcb 	bl	8009a44 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80032ae:	4a3f      	ldr	r2, [pc, #252]	; (80033ac <Ble_Hci_Gap_Gatt_Init+0x184>)
 80032b0:	2110      	movs	r1, #16
 80032b2:	2008      	movs	r0, #8
 80032b4:	f006 fbc6 	bl	8009a44 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80032b8:	2118      	movs	r1, #24
 80032ba:	2001      	movs	r0, #1
 80032bc:	f006 fc2b 	bl	8009b16 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80032c0:	f005 ff50 	bl	8009164 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	76fb      	strb	r3, [r7, #27]
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 80032d0:	7efb      	ldrb	r3, [r7, #27]
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	76fb      	strb	r3, [r7, #27]
#endif

  if (role > 0)
 80032d8:	7efb      	ldrb	r3, [r7, #27]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01e      	beq.n	800331c <Ble_Hci_Gap_Gatt_Init+0xf4>
  {
    const char *name = "P2PROUT";
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <Ble_Hci_Gap_Gatt_Init+0x188>)
 80032e0:	617b      	str	r3, [r7, #20]

    aci_gap_init(role, 0,
 80032e2:	f107 0212 	add.w	r2, r7, #18
 80032e6:	7ef8      	ldrb	r0, [r7, #27]
 80032e8:	f107 030e 	add.w	r3, r7, #14
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	2207      	movs	r2, #7
 80032f8:	2100      	movs	r1, #0
 80032fa:	f005 fceb 	bl	8008cd4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80032fe:	8a7c      	ldrh	r4, [r7, #18]
 8003300:	8a3d      	ldrh	r5, [r7, #16]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7fc ff3c 	bl	8000180 <strlen>
 8003308:	4603      	mov	r3, r0
 800330a:	b2da      	uxtb	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	2200      	movs	r2, #0
 8003314:	4629      	mov	r1, r5
 8003316:	4620      	mov	r0, r4
 8003318:	f006 f8e2 	bl	80094e0 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800331c:	8a78      	ldrh	r0, [r7, #18]
 800331e:	89f9      	ldrh	r1, [r7, #14]
 8003320:	463b      	mov	r3, r7
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2302      	movs	r3, #2
 8003326:	2200      	movs	r2, #0
 8003328:	f006 f8da 	bl	80094e0 <aci_gatt_update_char_value>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800332c:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fbda 	bl	8008af0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003344:	2208      	movs	r2, #8
 8003346:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800334a:	2210      	movs	r2, #16
 800334c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800334e:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003350:	2201      	movs	r2, #1
 8003352:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <Ble_Hci_Gap_Gatt_Init+0x190>)
 8003358:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800335c:	2201      	movs	r2, #1
 800335e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003362:	789c      	ldrb	r4, [r3, #2]
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003366:	785d      	ldrb	r5, [r3, #1]
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800336a:	791b      	ldrb	r3, [r3, #4]
 800336c:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800336e:	7952      	ldrb	r2, [r2, #5]
 8003370:	4910      	ldr	r1, [pc, #64]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003372:	78c9      	ldrb	r1, [r1, #3]
 8003374:	480f      	ldr	r0, [pc, #60]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003376:	6880      	ldr	r0, [r0, #8]
 8003378:	2600      	movs	r6, #0
 800337a:	9604      	str	r6, [sp, #16]
 800337c:	9003      	str	r0, [sp, #12]
 800337e:	9102      	str	r1, [sp, #8]
 8003380:	9201      	str	r2, [sp, #4]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	2201      	movs	r2, #1
 8003388:	4629      	mov	r1, r5
 800338a:	4620      	mov	r0, r4
 800338c:	f005 fbfa 	bl	8008b84 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8003392:	789b      	ldrb	r3, [r3, #2]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <Ble_Hci_Gap_Gatt_Init+0x174>
   {
     aci_gap_configure_whitelist();
 8003398:	f005 fd83 	bl	8008ea2 <aci_gap_configure_whitelist>
   }

}
 800339c:	bf00      	nop
 800339e:	3724      	adds	r7, #36	; 0x24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	0800dbdc 	.word	0x0800dbdc
 80033ac:	0800dbec 	.word	0x0800dbec
 80033b0:	0800d430 	.word	0x0800d430
 80033b4:	20000148 	.word	0x20000148
 80033b8:	0001b207 	.word	0x0001b207

080033bc <Scan_Request>:
 * @brief  Scan Request
 * @param  None
 * @retval None
 */
static void Scan_Request( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;

  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <Scan_Request+0x80>)
 80033c4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d118      	bne.n	80033fe <Scan_Request+0x42>

#if (CFG_P2P_DEMO_MULTI != 0)
      || BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <Scan_Request+0x80>)
 80033ce:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d113      	bne.n	80033fe <Scan_Request+0x42>
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <Scan_Request+0x80>)
 80033d8:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d10e      	bne.n	80033fe <Scan_Request+0x42>
      || BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED|| BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <Scan_Request+0x80>)
 80033e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d109      	bne.n	80033fe <Scan_Request+0x42>
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <Scan_Request+0x80>)
 80033ec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d104      	bne.n	80033fe <Scan_Request+0x42>
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <Scan_Request+0x80>)
 80033f6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d01a      	beq.n	8003434 <Scan_Request+0x78>
#endif
  )
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED */
    BSP_LED_On(LED_BLUE);
 80033fe:	2000      	movs	r0, #0
 8003400:	f001 fb46 	bl	8004a90 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 8003404:	2301      	movs	r3, #1
 8003406:	2200      	movs	r2, #0
 8003408:	f44f 7148 	mov.w	r1, #800	; 0x320
 800340c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003410:	f005 fd6b 	bl	8008eea <aci_gap_start_general_discovery_proc>
 8003414:	4603      	mov	r3, r0
 8003416:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <Scan_Request+0x6a>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800341e:	4808      	ldr	r0, [pc, #32]	; (8003440 <Scan_Request+0x84>)
 8003420:	f008 fd72 	bl	800bf08 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 8003424:	e006      	b.n	8003434 <Scan_Request+0x78>
      BSP_LED_On(LED_RED);
 8003426:	2002      	movs	r0, #2
 8003428:	f001 fb32 	bl	8004a90 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800342c:	4805      	ldr	r0, [pc, #20]	; (8003444 <Scan_Request+0x88>)
 800342e:	f008 fd6b 	bl	800bf08 <iprintf>
  return;
 8003432:	bf00      	nop
 8003434:	bf00      	nop
}
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000148 	.word	0x20000148
 8003440:	0800d438 	.word	0x0800d438
 8003444:	0800d468 	.word	0x0800d468

08003448 <Adv_Request>:
 * @brief  Advertising Enable
 * @param  None
 * @retval None
 */
static void Adv_Request( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  if (BleApplicationContext.SmartPhone_Connection_Status != APP_BLE_CONNECTED)
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <Adv_Request+0x84>)
 8003450:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003454:	2b05      	cmp	r3, #5
 8003456:	d034      	beq.n	80034c2 <Adv_Request+0x7a>
  {
    tBleStatus result = 0x00;
 8003458:	2300      	movs	r3, #0
 800345a:	71fb      	strb	r3, [r7, #7]
    /*Start Advertising*/
    result = aci_gap_set_discoverable(ADV_IND,
 800345c:	2300      	movs	r3, #0
 800345e:	9306      	str	r3, [sp, #24]
 8003460:	2300      	movs	r3, #0
 8003462:	9305      	str	r3, [sp, #20]
 8003464:	2300      	movs	r3, #0
 8003466:	9304      	str	r3, [sp, #16]
 8003468:	2300      	movs	r3, #0
 800346a:	9303      	str	r3, [sp, #12]
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <Adv_Request+0x88>)
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	2308      	movs	r3, #8
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2300      	movs	r3, #0
 800347a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347e:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8003482:	2000      	movs	r0, #0
 8003484:	f005 fa56 	bl	8008934 <aci_gap_set_discoverable>
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
                                      0,
                                      NULL,
                                      0,
                                      0);
    /* Send Advertising data */
    result = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800348c:	4911      	ldr	r1, [pc, #68]	; (80034d4 <Adv_Request+0x8c>)
 800348e:	200e      	movs	r0, #14
 8003490:	f005 fcab 	bl	8008dea <aci_gap_update_adv_data>
 8003494:	4603      	mov	r3, r0
 8003496:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_FAST_ADV;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <Adv_Request+0x84>)
 800349a:	2201      	movs	r2, #1
 800349c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if (result == BLE_STATUS_SUCCESS)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <Adv_Request+0x6c>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
      APP_DBG_MSG("  \r\n\r");
 80034a6:	480c      	ldr	r0, [pc, #48]	; (80034d8 <Adv_Request+0x90>)
 80034a8:	f008 fd2e 	bl	800bf08 <iprintf>
      APP_DBG_MSG("** START ADVERTISING **  \r\n\r");
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <Adv_Request+0x94>)
 80034ae:	f008 fd2b 	bl	800bf08 <iprintf>
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 80034b2:	e006      	b.n	80034c2 <Adv_Request+0x7a>
      BSP_LED_On(LED_RED);
 80034b4:	2002      	movs	r0, #2
 80034b6:	f001 faeb 	bl	8004a90 <BSP_LED_On>
      APP_DBG_MSG("BLE_APP_Adv_Request(), Failed \r\n\r");
 80034ba:	4809      	ldr	r0, [pc, #36]	; (80034e0 <Adv_Request+0x98>)
 80034bc:	f008 fd24 	bl	800bf08 <iprintf>
  return;
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
}
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000148 	.word	0x20000148
 80034d0:	20000004 	.word	0x20000004
 80034d4:	2000000c 	.word	0x2000000c
 80034d8:	0800d498 	.word	0x0800d498
 80034dc:	0800d4a0 	.word	0x0800d4a0
 80034e0:	0800d4c0 	.word	0x0800d4c0

080034e4 <ConnReq1>:
 * @brief  Connection Establishement on SERVER 1
 * @param  None
 * @retval None
 */
static void ConnReq1( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 1 **  \r\n\r");
 80034ea:	481b      	ldr	r0, [pc, #108]	; (8003558 <ConnReq1+0x74>)
 80034ec:	f008 fd0c 	bl	800bf08 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <ConnReq1+0x78>)
 80034f2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d029      	beq.n	800354e <ConnReq1+0x6a>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */

    /* USER CODE END APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */
        result = aci_gap_create_connection(
 80034fa:	2310      	movs	r3, #16
 80034fc:	9306      	str	r3, [sp, #24]
 80034fe:	2310      	movs	r3, #16
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	2300      	movs	r3, #0
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	23a0      	movs	r3, #160	; 0xa0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2300      	movs	r3, #0
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <ConnReq1+0x7c>)
 800351c:	2200      	movs	r2, #0
 800351e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003522:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003526:	f005 fd58 	bl	8008fda <aci_gap_create_connection>
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <ConnReq1+0x5a>
    {
    /* USER CODE BEGIN BLE_STATUS_END_DEVICE_1_SUCCESS */

    /* USER CODE END BLE_STATUS_END_DEVICE_1_SUCCESS */
    BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTING;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <ConnReq1+0x78>)
 8003536:	2204      	movs	r2, #4
 8003538:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    /* USER CODE END BLE_STATUS_END_DEVICE_1_FAILED */
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
    }
  }

  return;
 800353c:	e007      	b.n	800354e <ConnReq1+0x6a>
      BSP_LED_On(LED_RED);
 800353e:	2002      	movs	r0, #2
 8003540:	f001 faa6 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <ConnReq1+0x78>)
 8003546:	2200      	movs	r2, #0
 8003548:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  return;
 800354c:	bf00      	nop
 800354e:	bf00      	nop
}
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	0800d4e4 	.word	0x0800d4e4
 800355c:	20000148 	.word	0x20000148
 8003560:	20001670 	.word	0x20001670

08003564 <ConnReq2>:
 * @brief  Connection Establishement on SERVER 2
 * @param  None
 * @retval None
 */
static void ConnReq2( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 2 **  \r\n\r");
 800356a:	481b      	ldr	r0, [pc, #108]	; (80035d8 <ConnReq2+0x74>)
 800356c:	f008 fccc 	bl	800bf08 <iprintf>

  if (BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <ConnReq2+0x78>)
 8003572:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003576:	2b05      	cmp	r3, #5
 8003578:	d029      	beq.n	80035ce <ConnReq2+0x6a>
  {
    result = aci_gap_create_connection(
 800357a:	2310      	movs	r3, #16
 800357c:	9306      	str	r3, [sp, #24]
 800357e:	2310      	movs	r3, #16
 8003580:	9305      	str	r3, [sp, #20]
 8003582:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	2300      	movs	r3, #0
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	23a0      	movs	r3, #160	; 0xa0
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <ConnReq2+0x7c>)
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80035a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80035a6:	f005 fd18 	bl	8008fda <aci_gap_create_connection>
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <ConnReq2+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTING;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <ConnReq2+0x78>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;

    }
  }

  return;
 80035bc:	e007      	b.n	80035ce <ConnReq2+0x6a>
      BSP_LED_On(LED_RED);
 80035be:	2002      	movs	r0, #2
 80035c0:	f001 fa66 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <ConnReq2+0x78>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  return;
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
}
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	0800d514 	.word	0x0800d514
 80035dc:	20000148 	.word	0x20000148
 80035e0:	20001678 	.word	0x20001678

080035e4 <ConnReq3>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq3( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 3 **  \r\n\r");
 80035ea:	481b      	ldr	r0, [pc, #108]	; (8003658 <ConnReq3+0x74>)
 80035ec:	f008 fc8c 	bl	800bf08 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <ConnReq3+0x78>)
 80035f2:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d029      	beq.n	800364e <ConnReq3+0x6a>
  {
    result = aci_gap_create_connection(
 80035fa:	2310      	movs	r3, #16
 80035fc:	9306      	str	r3, [sp, #24]
 80035fe:	2310      	movs	r3, #16
 8003600:	9305      	str	r3, [sp, #20]
 8003602:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003606:	9304      	str	r3, [sp, #16]
 8003608:	2300      	movs	r3, #0
 800360a:	9303      	str	r3, [sp, #12]
 800360c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003610:	9302      	str	r3, [sp, #8]
 8003612:	23a0      	movs	r3, #160	; 0xa0
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2300      	movs	r3, #0
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <ConnReq3+0x7c>)
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003622:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003626:	f005 fcd8 	bl	8008fda <aci_gap_create_connection>
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <ConnReq3+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTING;
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <ConnReq3+0x78>)
 8003636:	2204      	movs	r2, #4
 8003638:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;

    }
  }

  return;
 800363c:	e007      	b.n	800364e <ConnReq3+0x6a>
      BSP_LED_On(LED_RED);
 800363e:	2002      	movs	r0, #2
 8003640:	f001 fa26 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <ConnReq3+0x78>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  return;
 800364c:	bf00      	nop
 800364e:	bf00      	nop
}
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	0800d544 	.word	0x0800d544
 800365c:	20000148 	.word	0x20000148
 8003660:	20001680 	.word	0x20001680

08003664 <ConnReq4>:
 * @brief  Connection Establishement on SERVER 4
 * @param  None
 * @retval None
 */
static void ConnReq4( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 4 **  \r\n\r");
 800366a:	481b      	ldr	r0, [pc, #108]	; (80036d8 <ConnReq4+0x74>)
 800366c:	f008 fc4c 	bl	800bf08 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <ConnReq4+0x78>)
 8003672:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003676:	2b05      	cmp	r3, #5
 8003678:	d029      	beq.n	80036ce <ConnReq4+0x6a>
  {
    result = aci_gap_create_connection(
 800367a:	2310      	movs	r3, #16
 800367c:	9306      	str	r3, [sp, #24]
 800367e:	2310      	movs	r3, #16
 8003680:	9305      	str	r3, [sp, #20]
 8003682:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	2300      	movs	r3, #0
 800368a:	9303      	str	r3, [sp, #12]
 800368c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003690:	9302      	str	r3, [sp, #8]
 8003692:	23a0      	movs	r3, #160	; 0xa0
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <ConnReq4+0x7c>)
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80036a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80036a6:	f005 fc98 	bl	8008fda <aci_gap_create_connection>
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <ConnReq4+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTING;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <ConnReq4+0x78>)
 80036b6:	2204      	movs	r2, #4
 80036b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;

    }
  }

  return;
 80036bc:	e007      	b.n	80036ce <ConnReq4+0x6a>
      BSP_LED_On(LED_RED);
 80036be:	2002      	movs	r0, #2
 80036c0:	f001 f9e6 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <ConnReq4+0x78>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
}
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	0800d574 	.word	0x0800d574
 80036dc:	20000148 	.word	0x20000148
 80036e0:	20001668 	.word	0x20001668

080036e4 <ConnReq5>:
 * @brief  Connection Establishement on SERVER 5
 * @param  None
 * @retval None
 */
static void ConnReq5( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 5 **  \r\n\r");
 80036ea:	481b      	ldr	r0, [pc, #108]	; (8003758 <ConnReq5+0x74>)
 80036ec:	f008 fc0c 	bl	800bf08 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <ConnReq5+0x78>)
 80036f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d029      	beq.n	800374e <ConnReq5+0x6a>
  {
    result = aci_gap_create_connection(
 80036fa:	2310      	movs	r3, #16
 80036fc:	9306      	str	r3, [sp, #24]
 80036fe:	2310      	movs	r3, #16
 8003700:	9305      	str	r3, [sp, #20]
 8003702:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003706:	9304      	str	r3, [sp, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	9303      	str	r3, [sp, #12]
 800370c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003710:	9302      	str	r3, [sp, #8]
 8003712:	23a0      	movs	r3, #160	; 0xa0
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	2300      	movs	r3, #0
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <ConnReq5+0x7c>)
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003722:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003726:	f005 fc58 	bl	8008fda <aci_gap_create_connection>
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <ConnReq5+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTING;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <ConnReq5+0x78>)
 8003736:	2204      	movs	r2, #4
 8003738:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;

    }
  }

  return;
 800373c:	e007      	b.n	800374e <ConnReq5+0x6a>
      BSP_LED_On(LED_RED);
 800373e:	2002      	movs	r0, #2
 8003740:	f001 f9a6 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <ConnReq5+0x78>)
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  return;
 800374c:	bf00      	nop
 800374e:	bf00      	nop
}
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	0800d5a4 	.word	0x0800d5a4
 800375c:	20000148 	.word	0x20000148
 8003760:	20001688 	.word	0x20001688

08003764 <ConnReq6>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq6( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 6 **  \r\n\r");
 800376a:	481b      	ldr	r0, [pc, #108]	; (80037d8 <ConnReq6+0x74>)
 800376c:	f008 fbcc 	bl	800bf08 <iprintf>
  if (BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <ConnReq6+0x78>)
 8003772:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003776:	2b05      	cmp	r3, #5
 8003778:	d029      	beq.n	80037ce <ConnReq6+0x6a>
  {
    result = aci_gap_create_connection(
 800377a:	2310      	movs	r3, #16
 800377c:	9306      	str	r3, [sp, #24]
 800377e:	2310      	movs	r3, #16
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	2300      	movs	r3, #0
 800378a:	9303      	str	r3, [sp, #12]
 800378c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	23a0      	movs	r3, #160	; 0xa0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <ConnReq6+0x7c>)
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80037a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80037a6:	f005 fc18 	bl	8008fda <aci_gap_create_connection>
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <ConnReq6+0x5a>
    {
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTING;
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <ConnReq6+0x78>)
 80037b6:	2204      	movs	r2, #4
 80037b8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;

    }
  }

  return;
 80037bc:	e007      	b.n	80037ce <ConnReq6+0x6a>
      BSP_LED_On(LED_RED);
 80037be:	2002      	movs	r0, #2
 80037c0:	f001 f966 	bl	8004a90 <BSP_LED_On>
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <ConnReq6+0x78>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  return;
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
}
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	0800d5d4 	.word	0x0800d5d4
 80037dc:	20000148 	.word	0x20000148
 80037e0:	20001654 	.word	0x20001654

080037e4 <Evt_Notification>:
 * @brief  P2P GAP Notification
 * @param  GAP Notification (Opcode & Data)
 * @retval None
 */
void Evt_Notification( P2P_ConnHandle_Not_evt_t *pNotification )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Evt_Notification_1 */

/* USER CODE END Evt_Notification_1 */
  P2PR_APP_Device_Status_t device_status = { 0 };
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	809a      	strh	r2, [r3, #4]

  switch (pNotification->P2P_Evt_Opcode)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b0d      	cmp	r3, #13
 80037fc:	f200 809d 	bhi.w	800393a <Evt_Notification+0x156>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <Evt_Notification+0x24>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003841 	.word	0x08003841
 800380c:	08003851 	.word	0x08003851
 8003810:	0800393b 	.word	0x0800393b
 8003814:	08003869 	.word	0x08003869
 8003818:	08003873 	.word	0x08003873
 800381c:	08003883 	.word	0x08003883
 8003820:	08003893 	.word	0x08003893
 8003824:	080038a3 	.word	0x080038a3
 8003828:	080038b3 	.word	0x080038b3
 800382c:	080038c3 	.word	0x080038c3
 8003830:	080038db 	.word	0x080038db
 8003834:	080038f3 	.word	0x080038f3
 8003838:	0800390b 	.word	0x0800390b
 800383c:	08003923 	.word	0x08003923
    case SMART_PHONE1_CONN_HANDLE_EVT:

      break;

    case P2P_SERVER1_CONN_HANDLE_EVT:
      device_status.Device1_Status = 0x81; /* Connected */
 8003840:	2381      	movs	r3, #129	; 0x81
 8003842:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f9c5 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800384e:	e075      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER1_DISCON_HANDLE_EVT:
      device_status.Device1_Status = 0x80; /* Not connected */
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f9bd 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800385e:	2100      	movs	r1, #0
 8003860:	2004      	movs	r0, #4
 8003862:	f008 f9fb 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 8003866:	e069      	b.n	800393c <Evt_Notification+0x158>

    case SMART_PHONE1_DISCON_HANDLE_EVT:
      UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 8003868:	2100      	movs	r1, #0
 800386a:	2001      	movs	r0, #1
 800386c:	f008 f9f6 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 8003870:	e064      	b.n	800393c <Evt_Notification+0x158>

#if (CFG_P2P_DEMO_MULTI != 0)
    /* USER CODE BEGIN P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_CONN_HANDLE_EVT:
      device_status.Device2_Status = 0x81; /* Connected */
 8003872:	2381      	movs	r3, #129	; 0x81
 8003874:	727b      	strb	r3, [r7, #9]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003876:	f107 0308 	add.w	r3, r7, #8
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f9ac 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 8003880:	e05c      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER3_CONN_HANDLE_EVT:
      device_status.Device3_Status = 0x81; /* connected */
 8003882:	2381      	movs	r3, #129	; 0x81
 8003884:	72bb      	strb	r3, [r7, #10]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f9a4 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 8003890:	e054      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER4_CONN_HANDLE_EVT:
      device_status.Device4_Status = 0x81; /* Connected */
 8003892:	2381      	movs	r3, #129	; 0x81
 8003894:	72fb      	strb	r3, [r7, #11]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f99c 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 80038a0:	e04c      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER5_CONN_HANDLE_EVT:
      device_status.Device5_Status = 0x81; /* Connected */
 80038a2:	2381      	movs	r3, #129	; 0x81
 80038a4:	733b      	strb	r3, [r7, #12]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f994 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 80038b0:	e044      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER6_CONN_HANDLE_EVT:
      device_status.Device6_Status = 0x81; /* Connected */
 80038b2:	2381      	movs	r3, #129	; 0x81
 80038b4:	737b      	strb	r3, [r7, #13]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f98c 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 80038c0:	e03c      	b.n	800393c <Evt_Notification+0x158>
    /* USER CODE END P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    /* USER CODE BEGIN P2P_SERVER_DISCON_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_DISCON_HANDLE_EVT:
      device_status.Device2_Status = 0x80; /* Not connected */
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	727b      	strb	r3, [r7, #9]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f984 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 80038d0:	2100      	movs	r1, #0
 80038d2:	2008      	movs	r0, #8
 80038d4:	f008 f9c2 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 80038d8:	e030      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER3_DISCON_HANDLE_EVT:
      device_status.Device3_Status = 0x80; /* Not connected */
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	72bb      	strb	r3, [r7, #10]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f978 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* Restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 80038e8:	2100      	movs	r1, #0
 80038ea:	2010      	movs	r0, #16
 80038ec:	f008 f9b6 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 80038f0:	e024      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER4_DISCON_HANDLE_EVT:
      device_status.Device4_Status = 0x80; /* Not connected */
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	72fb      	strb	r3, [r7, #11]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f96c 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8003900:	2100      	movs	r1, #0
 8003902:	2020      	movs	r0, #32
 8003904:	f008 f9aa 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 8003908:	e018      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER5_DISCON_HANDLE_EVT:
      device_status.Device5_Status = 0x80; /* Not connected */
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	733b      	strb	r3, [r7, #12]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800390e:	f107 0308 	add.w	r3, r7, #8
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f960 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* Restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8003918:	2100      	movs	r1, #0
 800391a:	2040      	movs	r0, #64	; 0x40
 800391c:	f008 f99e 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 8003920:	e00c      	b.n	800393c <Evt_Notification+0x158>

    case P2P_SERVER6_DISCON_HANDLE_EVT:
      device_status.Device6_Status = 0x80; /* Not connected */
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	737b      	strb	r3, [r7, #13]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f954 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 8003930:	2100      	movs	r1, #0
 8003932:	2080      	movs	r0, #128	; 0x80
 8003934:	f008 f992 	bl	800bc5c <UTIL_SEQ_SetTask>
      break;
 8003938:	e000      	b.n	800393c <Evt_Notification+0x158>

    default:
    /* USER CODE BEGIN P2P_Evt_Opcode_Default */

    /* USER CODE END P2P_Evt_Opcode_Default */
    break;
 800393a:	bf00      	nop
  }
/* USER CODE BEGIN Evt_Notification_2 */

/* USER CODE END Evt_Notification_2 */
  return;
 800393c:	bf00      	nop
}
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800394a:	f7fe fd43 	bl	80023d4 <LL_FLASH_GetUDN>
 800394e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d023      	beq.n	80039a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003958:	f7fe fd54 	bl	8002404 <LL_FLASH_GetSTCompanyID>
 800395c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800395e:	f7fe fd45 	bl	80023ec <LL_FLASH_GetDeviceID>
 8003962:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <BleGetBdAddress+0x80>)
 800396a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <BleGetBdAddress+0x80>)
 8003974:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b2da      	uxtb	r2, r3
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <BleGetBdAddress+0x80>)
 800397e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <BleGetBdAddress+0x80>)
 8003986:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <BleGetBdAddress+0x80>)
 800398e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <BleGetBdAddress+0x80>)
 8003998:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <BleGetBdAddress+0x80>)
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e00b      	b.n	80039b8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f006 fd21 	bl	800a3e8 <OTP_Read>
 80039a6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e001      	b.n	80039b8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <BleGetBdAddress+0x84>)
 80039b6:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 80039b8:	697b      	ldr	r3, [r7, #20]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000308 	.word	0x20000308
 80039c8:	0800dbd4 	.word	0x0800dbd4

080039cc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80039d4:	2100      	movs	r1, #0
 80039d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039da:	f008 f93f 	bl	800bc5c <UTIL_SEQ_SetTask>
  return;
 80039de:	bf00      	nop
}
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80039ee:	2001      	movs	r0, #1
 80039f0:	f008 f9a0 	bl	800bd34 <UTIL_SEQ_SetEvt>
  return;
 80039f4:	bf00      	nop
}
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f008 f9b5 	bl	800bd74 <UTIL_SEQ_WaitEvt>
  return;
 8003a0a:	bf00      	nop
}
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	3308      	adds	r3, #8
 8003a24:	4618      	mov	r0, r3
 8003a26:	f007 fd19 	bl	800b45c <SVCCTL_UserEvtRx>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8003a3a:	e002      	b.n	8003a42 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	4603      	mov	r3, r0
 8003a52:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <BLE_StatusNot+0x16>
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d007      	beq.n	8003a6e <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8003a5e:	e00d      	b.n	8003a7c <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003a60:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a64:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f008 f924 	bl	800bcb4 <UTIL_SEQ_PauseTask>
      break;
 8003a6c:	e006      	b.n	8003a7c <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003a6e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a72:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f008 f93d 	bl	800bcf4 <UTIL_SEQ_ResumeTask>
      break;
 8003a7a:	bf00      	nop
  }
  return;
 8003a7c:	bf00      	nop
}
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <EDS_STM_App_Notification>:
 * @brief  End Device service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void EDS_STM_App_Notification(EDS_STM_App_Notification_evt_t *pNotification)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN EDS_STM_App_Notification_1 */

/* USER CODE END EDS_STM_App_Notification_1 */
        switch(pNotification->EDS_Evt_Opcode)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <EDS_STM_App_Notification+0x22>
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10d      	bne.n	8003ab4 <EDS_STM_App_Notification+0x30>
        /* USER CODE BEGIN EDS_Evt_Opcode */

        /* USER CODE END EDS_Evt_Opcode */
        case EDS_STM_NOTIFY_ENABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION ENABLED\r\n");
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <EDS_STM_App_Notification+0x3c>)
 8003a9a:	f008 fad1 	bl	800c040 <puts>
#endif
            /* USER CODE BEGIN EDS_STM_NOTIFY_ENABLED_EVT */
            P2P_Router_App_Context.Notification_EndDevice_Status = 1;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <EDS_STM_App_Notification+0x40>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	705a      	strb	r2, [r3, #1]
            /* USER CODE END EDS_STM_NOTIFY_ENABLED_EVT */
            break;
 8003aa4:	e007      	b.n	8003ab6 <EDS_STM_App_Notification+0x32>

        case EDS_STM_NOTIFY_DISABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION DISABLED\r\n");
 8003aa6:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <EDS_STM_App_Notification+0x44>)
 8003aa8:	f008 faca 	bl	800c040 <puts>
#endif
            /* USER CODE BEGIN EDS_STM_NOTIFY_DISABLED_EVT */
            P2P_Router_App_Context.Notification_EndDevice_Status = 0;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <EDS_STM_App_Notification+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	705a      	strb	r2, [r3, #1]
            /* USER CODE END EDS_STM_NOTIFY_DISABLED_EVT */
            break;
 8003ab2:	e000      	b.n	8003ab6 <EDS_STM_App_Notification+0x32>

        default:
            /* USER CODE BEGIN EDS_Evt_Opcode_default */

            /* USER CODE END EDS_Evt_Opcode_default */
            break;
 8003ab4:	bf00      	nop
    }
/* USER CODE BEGIN EDS_STM_App_Notification_2 */

/* USER CODE END EDS_STM_App_Notification_2 */
    return;
 8003ab6:	bf00      	nop
}
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	0800d604 	.word	0x0800d604
 8003ac4:	20000260 	.word	0x20000260
 8003ac8:	0800d640 	.word	0x0800d640

08003acc <P2PS_STM_App_Notification>:
 * @brief  P2P service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
    switch(pNotification->P2P_Evt_Opcode)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d831      	bhi.n	8003b40 <P2PS_STM_App_Notification+0x74>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <P2PS_STM_App_Notification+0x18>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b03 	.word	0x08003b03
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
        /* USER CODE BEGIN P2P_Evt_Opcode */

        /* USER CODE END P2P_Evt_Opcode */
        case P2PS_STM__NOTIFY_ENABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION ENABLED\n\r");
 8003af4:	4815      	ldr	r0, [pc, #84]	; (8003b4c <P2PS_STM_App_Notification+0x80>)
 8003af6:	f008 fa07 	bl	800bf08 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM__NOTIFY_ENABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 1;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <P2PS_STM_App_Notification+0x84>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
            /* USER CODE END P2PS_STM__NOTIFY_ENABLED_EVT */
            break;
 8003b00:	e01f      	b.n	8003b42 <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_NOTIFY_DISABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION DISABLED\n\r");
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <P2PS_STM_App_Notification+0x88>)
 8003b04:	f008 fa00 	bl	800bf08 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_NOTIFY_DISABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 0;
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <P2PS_STM_App_Notification+0x84>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
            /* USER CODE END P2PS_STM_NOTIFY_DISABLED_EVT */
            break;
 8003b0e:	e018      	b.n	8003b42 <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_READ_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : LED READ STATUS\n\r");
 8003b10:	4811      	ldr	r0, [pc, #68]	; (8003b58 <P2PS_STM_App_Notification+0x8c>)
 8003b12:	f008 f9f9 	bl	800bf08 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_READ_EVT */

            /* USER CODE END P2PS_STM_READ_EVT */
            break;
 8003b16:	e014      	b.n	8003b42 <P2PS_STM_App_Notification+0x76>

        case P2PS_STM_WRITE_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : WRITE LED CONFIG TO ALL END DEVICE \n\r");
 8003b18:	4810      	ldr	r0, [pc, #64]	; (8003b5c <P2PS_STM_App_Notification+0x90>)
 8003b1a:	f008 f9f5 	bl	800bf08 <iprintf>
#endif
            /* USER CODE BEGIN P2PS_STM_WRITE_EVT */
            P2P_Router_App_Context.LedControlEndDevice.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <P2PS_STM_App_Notification+0x84>)
 8003b26:	729a      	strb	r2, [r3, #10]
            P2P_Router_App_Context.LedControlEndDevice.Led1Control=pNotification->DataTransfered.pPayload[1];
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	785a      	ldrb	r2, [r3, #1]
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <P2PS_STM_App_Notification+0x84>)
 8003b30:	72da      	strb	r2, [r3, #11]
            Client_Update_Char( LED_CHAR_UUID, 0, (uint8_t *)&P2P_Router_App_Context.LedControlEndDevice);
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <P2PS_STM_App_Notification+0x94>)
 8003b34:	2100      	movs	r1, #0
 8003b36:	f642 3050 	movw	r0, #11088	; 0x2b50
 8003b3a:	f000 f9db 	bl	8003ef4 <Client_Update_Char>
            /* USER CODE END P2PS_STM_WRITE_EVT */
            break;
 8003b3e:	e000      	b.n	8003b42 <P2PS_STM_App_Notification+0x76>

        default:
            /* USER CODE BEGIN P2P_Evt_Opcode_default */

            /* USER CODE END P2P_Evt_Opcode_default */
        break;
 8003b40:	bf00      	nop
    }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
    return;
 8003b42:	bf00      	nop
}
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	0800d67c 	.word	0x0800d67c
 8003b50:	20000260 	.word	0x20000260
 8003b54:	0800d6b4 	.word	0x0800d6b4
 8003b58:	0800d6ec 	.word	0x0800d6ec
 8003b5c:	0800d718 	.word	0x0800d718
 8003b60:	2000026a 	.word	0x2000026a

08003b64 <P2P_Router_APP_Init>:
 * @brief  Router Application initialisation
 * @param  None
 * @retval None
 */
void P2P_Router_APP_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN P2P_Router_APP_Init_1 */
    P2PR_APP_Device_Status_t device_status;
    /* USER CODE END P2P_Router_APP_Init_1 */

    UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Client_Update_Service );
 8003b6a:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <P2P_Router_APP_Init+0x6c>)
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b72:	f008 f851 	bl	800bc18 <UTIL_SEQ_RegTask>

    /* USER CODE BEGIN P2P_Router_APP_Init_2 */
    /**
     * Initialize LedButton Service
     */
    P2P_Router_App_Context.Notification_Button_Status=0;
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
    P2P_Router_App_Context.Notification_EndDevice_Status=0;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	705a      	strb	r2, [r3, #1]

    P2P_Router_App_Context.EndDeviceStatus.Device1_Status=0x00;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	709a      	strb	r2, [r3, #2]
    device_status.Device1_Status = 0x80; /* Not connected */
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	703b      	strb	r3, [r7, #0]
#if (CFG_P2P_DEMO_MULTI != 0 )   
    P2P_Router_App_Context.EndDeviceStatus.Device2_Status=0x00;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	70da      	strb	r2, [r3, #3]
    P2P_Router_App_Context.EndDeviceStatus.Device3_Status=0x00;
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	711a      	strb	r2, [r3, #4]
    P2P_Router_App_Context.EndDeviceStatus.Device4_Status=0x00;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	715a      	strb	r2, [r3, #5]
    P2P_Router_App_Context.EndDeviceStatus.Device5_Status=0x00;
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	719a      	strb	r2, [r3, #6]
    P2P_Router_App_Context.EndDeviceStatus.Device6_Status=0x00;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <P2P_Router_APP_Init+0x70>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	71da      	strb	r2, [r3, #7]
    device_status.Device2_Status = 0x80; /* Not connected */
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	707b      	strb	r3, [r7, #1]
    device_status.Device3_Status = 0x80; /* Not connected */
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	70bb      	strb	r3, [r7, #2]
    device_status.Device4_Status = 0x80; /* Not connected */
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	70fb      	strb	r3, [r7, #3]
    device_status.Device5_Status = 0x80; /* Not connected */
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	713b      	strb	r3, [r7, #4]
    device_status.Device6_Status = 0x80; /* Not connected */
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	717b      	strb	r3, [r7, #5]
#endif
    /* Update EndDevice Management Service */
    
    
    P2PR_APP_End_Device_Mgt_Connection_Update( &device_status );
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f809 	bl	8003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>

    /* USER CODE END P2P_Router_APP_Init_2 */

    return;
 8003bc6:	bf00      	nop
}
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	08003d5d 	.word	0x08003d5d
 8003bd4:	20000260 	.word	0x20000260

08003bd8 <P2PR_APP_End_Device_Mgt_Connection_Update>:
 * @brief  End Device Managment
 * @param  None
 * @retval None
 */
void P2PR_APP_End_Device_Mgt_Connection_Update( P2PR_APP_Device_Status_t *p_device_status )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_1 */

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_1 */
    if( (p_device_status->Device1_Status) & (0x80) )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da06      	bge.n	8003bf8 <P2PR_APP_End_Device_Mgt_Connection_Update+0x20>
    {
    /* USER CODE BEGIN Device1_Status */
      P2P_Router_App_Context.EndDeviceStatus.Device1_Status = (p_device_status->Device1_Status) & (0x7F);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003bf6:	709a      	strb	r2, [r3, #2]
    /* USER CODE END Device1_Status */
    }
#if (CFG_P2P_DEMO_MULTI != 0 )
    /* USER CODE BEGIN CFG_P2P_DEMO_MULTI */
    if( (p_device_status->Device2_Status) & (0x80) )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da06      	bge.n	8003c10 <P2PR_APP_End_Device_Mgt_Connection_Update+0x38>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device2_Status = (p_device_status->Device2_Status) & (0x7F);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c0e:	70da      	strb	r2, [r3, #3]
    }

    if( (p_device_status->Device3_Status) & (0x80) )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	789b      	ldrb	r3, [r3, #2]
 8003c14:	b25b      	sxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da06      	bge.n	8003c28 <P2PR_APP_End_Device_Mgt_Connection_Update+0x50>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device3_Status = (p_device_status->Device3_Status) & (0x7F);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c26:	711a      	strb	r2, [r3, #4]
    }

    if( (p_device_status->Device4_Status) & (0x80) )
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	da06      	bge.n	8003c40 <P2PR_APP_End_Device_Mgt_Connection_Update+0x68>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device4_Status = (p_device_status->Device4_Status) & (0x7F);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	78db      	ldrb	r3, [r3, #3]
 8003c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c3e:	715a      	strb	r2, [r3, #5]
    }
    if( (p_device_status->Device5_Status) & (0x80) )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	791b      	ldrb	r3, [r3, #4]
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da06      	bge.n	8003c58 <P2PR_APP_End_Device_Mgt_Connection_Update+0x80>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device5_Status = (p_device_status->Device5_Status) & (0x7F);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	791b      	ldrb	r3, [r3, #4]
 8003c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c56:	719a      	strb	r2, [r3, #6]
    }

    if( (p_device_status->Device6_Status) & (0x80) )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	795b      	ldrb	r3, [r3, #5]
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da06      	bge.n	8003c70 <P2PR_APP_End_Device_Mgt_Connection_Update+0x98>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device6_Status = (p_device_status->Device6_Status) & (0x7F);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	795b      	ldrb	r3, [r3, #5]
 8003c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 8003c6e:	71da      	strb	r2, [r3, #7]
    }

    /* USER CODE END CFG_P2P_DEMO_MULTI */
#endif
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    EDS_STM_Update_Char(END_DEVICE_STATUS_CHAR_UUID, 
 8003c70:	4905      	ldr	r1, [pc, #20]	; (8003c88 <P2PR_APP_End_Device_Mgt_Connection_Update+0xb0>)
 8003c72:	f642 3060 	movw	r0, #11104	; 0x2b60
 8003c76:	f006 f9df 	bl	800a038 <EDS_STM_Update_Char>
            (uint8_t *)&P2P_Router_App_Context.EndDeviceStatus);

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    return;
 8003c7a:	bf00      	nop
}
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000260 	.word	0x20000260
 8003c88:	20000262 	.word	0x20000262

08003c8c <P2P_Client_App_Notification>:
 * @brief  Notification from the Server
 * @param  Client Notification from Server side
 * @retval None
 */
void P2P_Client_App_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2P_Client_App_Notification_1 */

/* USER CODE END P2P_Client_App_Notification_1 */
    switch(pNotification->P2P_Client_Evt_Opcode)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d124      	bne.n	8003ce6 <P2P_Client_App_Notification+0x5a>
    {
    /* USER CODE BEGIN P2P_Client_Evt_Opcode */
      case P2P_BUTTON_INFO_RECEIVED_EVT:
        {
           
           if(P2P_Router_App_Context.Notification_Button_Status){
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <P2P_Client_App_Notification+0x64>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <P2P_Client_App_Notification+0x4c>
            APP_DBG_MSG("-- APPLICATION : INFORM SMART PHONE DEVICE %x BUTTON PUSHED \n\r ",pNotification->DataTransfered.pPayload[0]);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <P2P_Client_App_Notification+0x68>)
 8003cae:	f008 f92b 	bl	800bf08 <iprintf>
            APP_DBG_MSG("\r\n\r ");
 8003cb2:	4811      	ldr	r0, [pc, #68]	; (8003cf8 <P2P_Client_App_Notification+0x6c>)
 8003cb4:	f008 f928 	bl	800bf08 <iprintf>
            P2P_Router_App_Context.ButtonStatusEndDevice.ButtonStatus=pNotification->DataTransfered.pPayload[1];
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	785a      	ldrb	r2, [r3, #1]
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <P2P_Client_App_Notification+0x64>)
 8003cc0:	725a      	strb	r2, [r3, #9]
            P2P_Router_App_Context.ButtonStatusEndDevice.Device_Button_Selection=pNotification->DataTransfered.pPayload[0];
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <P2P_Client_App_Notification+0x64>)
 8003cca:	721a      	strb	r2, [r3, #8]
            P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Router_App_Context.ButtonStatusEndDevice);
 8003ccc:	490b      	ldr	r1, [pc, #44]	; (8003cfc <P2P_Client_App_Notification+0x70>)
 8003cce:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8003cd2:	f006 fcb5 	bl	800a640 <P2PS_STM_App_Update_Char>
        }

   

        }
        break;
 8003cd6:	e007      	b.n	8003ce8 <P2P_Client_App_Notification+0x5c>
            APP_DBG_MSG("-- APPLICATION : NOT POSSIBLE TO INFORM THE SMART PHONE - NOTIFICATION DISABLED  \n ");
 8003cd8:	4809      	ldr	r0, [pc, #36]	; (8003d00 <P2P_Client_App_Notification+0x74>)
 8003cda:	f008 f915 	bl	800bf08 <iprintf>
            APP_DBG_MSG("\r\n\r ");
 8003cde:	4806      	ldr	r0, [pc, #24]	; (8003cf8 <P2P_Client_App_Notification+0x6c>)
 8003ce0:	f008 f912 	bl	800bf08 <iprintf>
        break;
 8003ce4:	e000      	b.n	8003ce8 <P2P_Client_App_Notification+0x5c>
    /* USER CODE END P2P_Client_Evt_Opcode */
        default:
    /* USER CODE BEGIN P2P_Client_Evt_Opcode_default */

    /* USER CODE END P2P_Client_Evt_Opcode_default */
            break;
 8003ce6:	bf00      	nop

    }
/* USER CODE BEGIN P2P_Client_App_Notification_2 */

/* USER CODE END P2P_Client_App_Notification_2 */
    return;
 8003ce8:	bf00      	nop
}
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000260 	.word	0x20000260
 8003cf4:	0800d758 	.word	0x0800d758
 8003cf8:	0800d798 	.word	0x0800d798
 8003cfc:	20000268 	.word	0x20000268
 8003d00:	0800d7a0 	.word	0x0800d7a0

08003d04 <P2P_Client_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_Client_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
    uint8_t index =0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2P_Client_Init_1 */

/* USER CODE END P2P_Client_Init_1 */

    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	71fb      	strb	r3, [r7, #7]
 8003d12:	e008      	b.n	8003d26 <P2P_Client_Init+0x22>
        aP2PClientContext[index].state= APP_BLE_IDLE;
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <P2P_Client_Init+0x3c>)
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	4413      	add	r3, r2
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	3301      	adds	r3, #1
 8003d24:	71fb      	strb	r3, [r7, #7]
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d9f3      	bls.n	8003d14 <P2P_Client_Init+0x10>
    /**
     *    Register the event handler to the BLE controller
     */
    SVCCTL_RegisterCltHandler(Client_Event_Handler);
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <P2P_Client_Init+0x40>)
 8003d2e:	f007 fb7b 	bl	800b428 <SVCCTL_RegisterCltHandler>
/* USER CODE BEGIN P2P_Client_Init_2 */
    APP_DBG_MSG("-- LED BUTTON CLIENT INITIALIZED \n");
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <P2P_Client_Init+0x44>)
 8003d34:	f008 f984 	bl	800c040 <puts>
/* USER CODE END P2P_Client_Init_2 */
    return;
 8003d38:	bf00      	nop
}
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000200 	.word	0x20000200
 8003d44:	08003f69 	.word	0x08003f69
 8003d48:	0800d7f4 	.word	0x0800d7f4

08003d4c <P2PR_APP_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void P2PR_APP_Init( void )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
    P2P_Router_APP_Init();
 8003d50:	f7ff ff08 	bl	8003b64 <P2P_Router_APP_Init>
    P2P_Client_Init();
 8003d54:	f7ff ffd6 	bl	8003d04 <P2P_Client_Init>
    /* USER CODE BEGIN P2PR_APP_Init */

    /* USER CODE END P2PR_APP_Init */
    return;
 8003d58:	bf00      	nop
}
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <Client_Update_Service>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Client_Update_Service( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Client_Update_Service_1 */

    /* USER CODE END Client_Update_Service_1 */
    uint16_t enable = 0x0001;
 8003d62:	2301      	movs	r3, #1
 8003d64:	80bb      	strh	r3, [r7, #4]

    uint8_t index;

    index = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003d6a:	e0a4      	b.n	8003eb6 <Client_Update_Service+0x15a>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {

        switch(aP2PClientContext[index].state)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	4a5a      	ldr	r2, [pc, #360]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	3b06      	subs	r3, #6
 8003d78:	2b06      	cmp	r3, #6
 8003d7a:	f200 8098 	bhi.w	8003eae <Client_Update_Service+0x152>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <Client_Update_Service+0x28>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003e41 	.word	0x08003e41
 8003d88:	08003e49 	.word	0x08003e49
 8003d8c:	08003da1 	.word	0x08003da1
 8003d90:	08003dd7 	.word	0x08003dd7
 8003d94:	08003eaf 	.word	0x08003eaf
 8003d98:	08003e0d 	.word	0x08003e0d
 8003d9c:	08003e7b 	.word	0x08003e7b
        {
            /* USER CODE BEGIN aP2PClientContext */
            case APP_BLE_DISCOVER_LED_CHAR_DESC: /* Not Used - No decriptor */
                APP_DBG_MSG("* GATT : Discover Descriptor of Led Characteritic\n");
 8003da0:	484e      	ldr	r0, [pc, #312]	; (8003edc <Client_Update_Service+0x180>)
 8003da2:	f008 f94d 	bl	800c040 <puts>
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	4a4b      	ldr	r2, [pc, #300]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4413      	add	r3, r2
 8003dae:	3302      	adds	r3, #2
 8003db0:	8818      	ldrh	r0, [r3, #0]
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	4a48      	ldr	r2, [pc, #288]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	4413      	add	r3, r2
 8003dba:	3308      	adds	r3, #8
 8003dbc:	8819      	ldrh	r1, [r3, #0]
                        aP2PClientContext[index].P2PLedCharHdle,
                        aP2PClientContext[index].P2PLedCharHdle+2);
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4a45      	ldr	r2, [pc, #276]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	881b      	ldrh	r3, [r3, #0]
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003dca:	3302      	adds	r3, #2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f005 fcc6 	bl	8009760 <aci_gatt_disc_all_char_desc>

                break;
 8003dd4:	e06c      	b.n	8003eb0 <Client_Update_Service+0x154>
            case APP_BLE_DISCOVER_BUTTON_CHAR_DESC:
                APP_DBG_MSG("* GATT : Discover Descriptor of Button Characteritic\n");
 8003dd6:	4842      	ldr	r0, [pc, #264]	; (8003ee0 <Client_Update_Service+0x184>)
 8003dd8:	f008 f932 	bl	800c040 <puts>
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	4413      	add	r3, r2
 8003de4:	3302      	adds	r3, #2
 8003de6:	8818      	ldrh	r0, [r3, #0]
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	4413      	add	r3, r2
 8003df0:	330c      	adds	r3, #12
 8003df2:	8819      	ldrh	r1, [r3, #0]
                        aP2PClientContext[index].P2PClientCharHdle,
                        aP2PClientContext[index].P2PClientCharHdle+2);
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	4413      	add	r3, r2
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	881b      	ldrh	r3, [r3, #0]
                aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003e00:	3302      	adds	r3, #2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	f005 fcab 	bl	8009760 <aci_gatt_disc_all_char_desc>

                break;
 8003e0a:	e051      	b.n	8003eb0 <Client_Update_Service+0x154>
            case APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC:
                APP_DBG_MSG("* GATT : Enable Button Notification\n");
 8003e0c:	4835      	ldr	r0, [pc, #212]	; (8003ee4 <Client_Update_Service+0x188>)
 8003e0e:	f008 f917 	bl	800c040 <puts>
                aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a30      	ldr	r2, [pc, #192]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	4413      	add	r3, r2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	8818      	ldrh	r0, [r3, #0]
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	4a2d      	ldr	r2, [pc, #180]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	4413      	add	r3, r2
 8003e26:	330e      	adds	r3, #14
 8003e28:	8819      	ldrh	r1, [r3, #0]
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f005 fd02 	bl	8009836 <aci_gatt_write_char_desc>
                        aP2PClientContext[index].P2PClientDescHandle,
                        2,
                        (uint8_t *)&enable);

                aP2PClientContext[index].state = APP_BLE_CONNECTED;
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4a28      	ldr	r2, [pc, #160]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	4413      	add	r3, r2
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	701a      	strb	r2, [r3, #0]

                break;
 8003e3e:	e037      	b.n	8003eb0 <Client_Update_Service+0x154>
            /* USER CODE END aP2PClientContext */
            case APP_BLE_DISCOVER_SERVICES:
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("APP_BLE_DISCOVER_SERVICES\n");
 8003e40:	4829      	ldr	r0, [pc, #164]	; (8003ee8 <Client_Update_Service+0x18c>)
 8003e42:	f008 f8fd 	bl	800c040 <puts>
#endif
            /* USER CODE BEGIN APP_BLE_DISCOVER_SERVICES */

            /* USER CODE END APP_BLE_DISCOVER_SERVICES */
            break;
 8003e46:	e033      	b.n	8003eb0 <Client_Update_Service+0x154>
            case APP_BLE_DISCOVER_CHARACS:
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Discover Led Button  Characteristics\n");
 8003e48:	4828      	ldr	r0, [pc, #160]	; (8003eec <Client_Update_Service+0x190>)
 8003e4a:	f008 f8f9 	bl	800c040 <puts>
#endif
                aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	4413      	add	r3, r2
 8003e56:	3302      	adds	r3, #2
 8003e58:	8818      	ldrh	r0, [r3, #0]
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3306      	adds	r3, #6
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f005 fc09 	bl	800968a <aci_gatt_disc_all_char_of_service>
                        aP2PClientContext[index].P2PServiceHandle,
                        aP2PClientContext[index].P2PServiceEndHandle);
            /* USER CODE BEGIN APP_BLE_DISCOVER_CHARACS */

            /* USER CODE END APP_BLE_DISCOVER_CHARACS */
                break;
 8003e78:	e01a      	b.n	8003eb0 <Client_Update_Service+0x154>

            case APP_BLE_DISABLE_NOTIFICATION_TX_DESC :
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Disable Button Notification\n");
 8003e7a:	481d      	ldr	r0, [pc, #116]	; (8003ef0 <Client_Update_Service+0x194>)
 8003e7c:	f008 f8e0 	bl	800c040 <puts>
#endif
                aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	4413      	add	r3, r2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	8818      	ldrh	r0, [r3, #0]
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	4413      	add	r3, r2
 8003e94:	330e      	adds	r3, #14
 8003e96:	8819      	ldrh	r1, [r3, #0]
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f005 fccb 	bl	8009836 <aci_gatt_write_char_desc>
                        aP2PClientContext[index].P2PClientDescHandle,
                        2,
                        (uint8_t *)&enable);

                aP2PClientContext[index].state = APP_BLE_CONNECTED;
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	701a      	strb	r2, [r3, #0]
            /* USER CODE BEGIN APP_BLE_DISABLE_NOTIFICATION_TX_DESC */

            /* USER CODE END APP_BLE_DISABLE_NOTIFICATION_TX_DESC */
                break;
 8003eac:	e000      	b.n	8003eb0 <Client_Update_Service+0x154>
            default:
            /* USER CODE BEGIN aP2PClientContext_default */

            /* USER CODE END aP2PClientContext_default */
                break;
 8003eae:	bf00      	nop
        }
        index++;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d808      	bhi.n	8003ece <Client_Update_Service+0x172>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <Client_Update_Service+0x17c>)
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	4413      	add	r3, r2
 8003ec4:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f af50 	bne.w	8003d6c <Client_Update_Service+0x10>
    }
    /* USER CODE BEGIN Client_Update_Service_2 */

    /* USER CODE END Client_Update_Service_2 */
    return;
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
}
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000200 	.word	0x20000200
 8003edc:	0800d818 	.word	0x0800d818
 8003ee0:	0800d84c 	.word	0x0800d84c
 8003ee4:	0800d884 	.word	0x0800d884
 8003ee8:	0800d8a8 	.word	0x0800d8a8
 8003eec:	0800d8c4 	.word	0x0800d8c4
 8003ef0:	0800d8f4 	.word	0x0800d8f4

08003ef4 <Client_Update_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Client_Update_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	603a      	str	r2, [r7, #0]
 8003efe:	80fb      	strh	r3, [r7, #6]
 8003f00:	460b      	mov	r3, r1
 8003f02:	717b      	strb	r3, [r7, #5]
    /* USER CODE BEGIN Client_Update_Char_1 */

    /* USER CODE END Client_Update_Char_1 */
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003f04:	2342      	movs	r3, #66	; 0x42
 8003f06:	73fb      	strb	r3, [r7, #15]
    uint8_t index;

    index = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f0c:	e01b      	b.n	8003f46 <Client_Update_Char+0x52>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {
        /* USER CODE BEGIN Client_Update_Char_2 */
        switch(UUID)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f642 3250 	movw	r2, #11088	; 0x2b50
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d112      	bne.n	8003f3e <Client_Update_Char+0x4a>
        {
            case LED_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
                ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 8003f18:	7bbb      	ldrb	r3, [r7, #14]
 8003f1a:	4a12      	ldr	r2, [pc, #72]	; (8003f64 <Client_Update_Char+0x70>)
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	3302      	adds	r3, #2
 8003f22:	8818      	ldrh	r0, [r3, #0]
 8003f24:	7bbb      	ldrb	r3, [r7, #14]
 8003f26:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <Client_Update_Char+0x70>)
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	8819      	ldrh	r1, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f005 fd04 	bl	8009940 <aci_gatt_write_without_resp>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
                        aP2PClientContext[index].P2PLedCharHdle,
                        2, /* charValueLen */
                        (uint8_t *)  pPayload);

                break;
 8003f3c:	e000      	b.n	8003f40 <Client_Update_Char+0x4c>

            default:
                break;
 8003f3e:	bf00      	nop
        }
        /* USER CODE END Client_Update_Char_2 */
        index++;
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f46:	7bbb      	ldrb	r3, [r7, #14]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d806      	bhi.n	8003f5a <Client_Update_Char+0x66>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <Client_Update_Char+0x70>)
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1d9      	bne.n	8003f0e <Client_Update_Char+0x1a>
    }
    /* USER CODE BEGIN Client_Update_Char_3 */

    /* USER CODE END Client_Update_Char_3 */
    return ret;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}/* end Client_Update_Char() */
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000200 	.word	0x20000200

08003f68 <Client_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Client_Event_Handler(void *Event)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b096      	sub	sp, #88	; 0x58
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    SVCCTL_EvtAckStatus_t return_value;
    hci_event_pckt *event_pckt;
    evt_blue_aci *blue_evt;
    P2P_Client_App_Notification_evt_t Notification;

    return_value = SVCCTL_EvtNotAck;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48

    switch(event_pckt->evt)
 8003f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2bff      	cmp	r3, #255	; 0xff
 8003f82:	f040 82c3 	bne.w	800450c <Client_Event_Handler+0x5a4>
        case EVT_VENDOR:
        {
            /* USER CODE BEGIN EVT_VENDOR */

            /* USER CODE END EVT_VENDOR */
            blue_evt = (evt_blue_aci*)event_pckt->data;
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f88:	3302      	adds	r3, #2
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
            switch(blue_evt->ecode)
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	f200 82ac 	bhi.w	80044f4 <Client_Event_Handler+0x58c>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <Client_Event_Handler+0x3c>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	080042d9 	.word	0x080042d9
 8003fa8:	080044f5 	.word	0x080044f5
 8003fac:	0800418f 	.word	0x0800418f
 8003fb0:	080044f5 	.word	0x080044f5
 8003fb4:	080044f5 	.word	0x080044f5
 8003fb8:	080044f5 	.word	0x080044f5
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	080044f5 	.word	0x080044f5
 8003fc4:	080044f5 	.word	0x080044f5
 8003fc8:	080044f5 	.word	0x080044f5
 8003fcc:	080044f5 	.word	0x080044f5
 8003fd0:	0800440b 	.word	0x0800440b
 8003fd4:	0800449d 	.word	0x0800449d
                case EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP */

                    /* USER CODE END EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP */
                    aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fda:	3302      	adds	r3, #2
 8003fdc:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint8_t numServ, i, idx;
                    uint16_t uuid, handle;

                    uint8_t index;
                    handle = pr->Connection_Handle;
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	86fb      	strh	r3, [r7, #54]	; 0x36
                    index = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ff0:	e02e      	b.n	8004050 <Client_Event_Handler+0xe8>
                            (aP2PClientContext[index].state != APP_BLE_IDLE)/* &&
                        (aP2PClientContext[index].connHandle != handle)*/)
                    {
                        APP_BLE_ConnStatus_t status;

                        status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8003ff2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ff6:	4abc      	ldr	r2, [pc, #752]	; (80042e8 <Client_Event_Handler+0x380>)
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff f893 	bl	800312c <APP_BLE_Get_Client_Connection_Status>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                        if((aP2PClientContext[index].state == APP_BLE_CONNECTED)&&
 800400c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004010:	4ab5      	ldr	r2, [pc, #724]	; (80042e8 <Client_Event_Handler+0x380>)
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d114      	bne.n	8004046 <Client_Event_Handler+0xde>
 800401c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004020:	2b00      	cmp	r3, #0
 8004022:	d110      	bne.n	8004046 <Client_Event_Handler+0xde>
                                (status == APP_BLE_IDLE))
                        {
                            /* Handle deconnected */

                            aP2PClientContext[index].state = APP_BLE_IDLE;
 8004024:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004028:	4aaf      	ldr	r2, [pc, #700]	; (80042e8 <Client_Event_Handler+0x380>)
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4413      	add	r3, r2
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
                            aP2PClientContext[index].connHandle = 0xFFFF;
 8004032:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004036:	4aac      	ldr	r2, [pc, #688]	; (80042e8 <Client_Event_Handler+0x380>)
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	4413      	add	r3, r2
 800403c:	3302      	adds	r3, #2
 800403e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004042:	801a      	strh	r2, [r3, #0]
                            break;
 8004044:	e010      	b.n	8004068 <Client_Event_Handler+0x100>
                        }
                        index++;
 8004046:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800404a:	3301      	adds	r3, #1
 800404c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004050:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004054:	2b05      	cmp	r3, #5
 8004056:	d807      	bhi.n	8004068 <Client_Event_Handler+0x100>
                            (aP2PClientContext[index].state != APP_BLE_IDLE)/* &&
 8004058:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800405c:	4aa2      	ldr	r2, [pc, #648]	; (80042e8 <Client_Event_Handler+0x380>)
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	4413      	add	r3, r2
 8004062:	781b      	ldrb	r3, [r3, #0]
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1c4      	bne.n	8003ff2 <Client_Event_Handler+0x8a>
                    }

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004068:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800406c:	2b05      	cmp	r3, #5
 800406e:	f200 8243 	bhi.w	80044f8 <Client_Event_Handler+0x590>
                    {
                        aP2PClientContext[index].connHandle= handle;
 8004072:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004076:	4a9c      	ldr	r2, [pc, #624]	; (80042e8 <Client_Event_Handler+0x380>)
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	4413      	add	r3, r2
 800407c:	3302      	adds	r3, #2
 800407e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004080:	801a      	strh	r2, [r3, #0]
                        numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	78da      	ldrb	r2, [r3, #3]
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	789b      	ldrb	r3, [r3, #2]
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                         * So check if the data length is 6
                         * we are intersted only if the UUID is 128 bit.
                         * So check if the data length is 20
                         */
#if (UUID_128BIT_FORMAT==1)
                        if (pr->Attribute_Data_Length == 20)
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	789b      	ldrb	r3, [r3, #2]
 8004096:	2b14      	cmp	r3, #20
 8004098:	f040 822e 	bne.w	80044f8 <Client_Event_Handler+0x590>
                        {
                            idx = 16;
 800409c:	2310      	movs	r3, #16
 800409e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#else
                            if (pr->Attribute_Data_Length == 6)
                            {
                                idx = 4;
#endif
                                for (i=0; i<numServ; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80040a8:	e06a      	b.n	8004180 <Client_Event_Handler+0x218>
                                {
                                    uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 80040aa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040b0:	4413      	add	r3, r2
 80040b2:	791b      	ldrb	r3, [r3, #4]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040bc:	440b      	add	r3, r1
 80040be:	3304      	adds	r3, #4
 80040c0:	3301      	adds	r3, #1
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	4313      	orrs	r3, r2
 80040cc:	867b      	strh	r3, [r7, #50]	; 0x32
                                    if(uuid == P2P_SERVICE_UUID)
 80040ce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040d0:	f64f 6240 	movw	r2, #65088	; 0xfe40
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d149      	bne.n	800416c <Client_Event_Handler+0x204>
                                    {
#if(CFG_DEBUG_APP_TRACE != 0)
                                        APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 80040d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040dc:	4a82      	ldr	r2, [pc, #520]	; (80042e8 <Client_Event_Handler+0x380>)
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	3302      	adds	r3, #2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	4880      	ldr	r0, [pc, #512]	; (80042ec <Client_Event_Handler+0x384>)
 80040ea:	f007 ff0d 	bl	800bf08 <iprintf>
#endif
                                        #if (UUID_128BIT_FORMAT==1)
                                        aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 80040ee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040f2:	3b10      	subs	r3, #16
 80040f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f6:	4413      	add	r3, r2
 80040f8:	791b      	ldrb	r3, [r3, #4]
 80040fa:	b299      	uxth	r1, r3
 80040fc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004100:	3b10      	subs	r3, #16
 8004102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	3301      	adds	r3, #1
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	b29a      	uxth	r2, r3
 8004112:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004116:	430a      	orrs	r2, r1
 8004118:	b291      	uxth	r1, r2
 800411a:	4a73      	ldr	r2, [pc, #460]	; (80042e8 <Client_Event_Handler+0x380>)
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	4413      	add	r3, r2
 8004120:	3304      	adds	r3, #4
 8004122:	460a      	mov	r2, r1
 8004124:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8004126:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800412a:	3b0e      	subs	r3, #14
 800412c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800412e:	4413      	add	r3, r2
 8004130:	791b      	ldrb	r3, [r3, #4]
 8004132:	b299      	uxth	r1, r3
 8004134:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004138:	3b0e      	subs	r3, #14
 800413a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	3301      	adds	r3, #1
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	b29a      	uxth	r2, r3
 800414a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800414e:	430a      	orrs	r2, r1
 8004150:	b291      	uxth	r1, r2
 8004152:	4a65      	ldr	r2, [pc, #404]	; (80042e8 <Client_Event_Handler+0x380>)
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	4413      	add	r3, r2
 8004158:	3306      	adds	r3, #6
 800415a:	460a      	mov	r2, r1
 800415c:	801a      	strh	r2, [r3, #0]
#else
                                        aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                                        aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                                        aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800415e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004162:	4a61      	ldr	r2, [pc, #388]	; (80042e8 <Client_Event_Handler+0x380>)
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	2207      	movs	r2, #7
 800416a:	701a      	strb	r2, [r3, #0]
                                    }
                                    idx += 6;
 800416c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8004170:	3306      	adds	r3, #6
 8004172:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                                for (i=0; i<numServ; i++)
 8004176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800417a:	3301      	adds	r3, #1
 800417c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8004180:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004184:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004188:	429a      	cmp	r2, r3
 800418a:	d38e      	bcc.n	80040aa <Client_Event_Handler+0x142>
                                }
                            }
                        }
                    }
                    break;
 800418c:	e1b4      	b.n	80044f8 <Client_Event_Handler+0x590>
                case EVT_BLUE_ATT_READ_BY_TYPE_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_READ_BY_TYPE_RESP */

                    /* USER CODE END EVT_BLUE_ATT_READ_BY_TYPE_RESP */
                    aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800418e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004190:	3302      	adds	r3, #2
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
                     * 2 or 16 bytes data
                     */

                    uint8_t index;

                    index = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800419a:	e004      	b.n	80041a6 <Client_Event_Handler+0x23e>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 800419c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041a0:	3301      	adds	r3, #1
 80041a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d80b      	bhi.n	80041c6 <Client_Event_Handler+0x25e>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80041ae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041b2:	4a4d      	ldr	r2, [pc, #308]	; (80042e8 <Client_Event_Handler+0x380>)
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4413      	add	r3, r2
 80041b8:	3302      	adds	r3, #2
 80041ba:	881a      	ldrh	r2, [r3, #0]
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d1ea      	bne.n	800419c <Client_Event_Handler+0x234>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80041c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	f200 8196 	bhi.w	80044fc <Client_Event_Handler+0x594>
                    {

                        /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
                        idx = 17;
 80041d0:	2311      	movs	r3, #17
 80041d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                        if (pr->Handle_Value_Pair_Length == 21)
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	789b      	ldrb	r3, [r3, #2]
 80041da:	2b15      	cmp	r3, #21
 80041dc:	f040 818e 	bne.w	80044fc <Client_Event_Handler+0x594>
#else
                            idx = 5;
                        if (pr->Handle_Value_Pair_Length == 7)
#endif
                        {
                            pr->Data_Length -= 1;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	78db      	ldrb	r3, [r3, #3]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	70da      	strb	r2, [r3, #3]
                            while(pr->Data_Length > 0)
 80041ec:	e06f      	b.n	80042ce <Client_Event_Handler+0x366>
                            {
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 80041ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	4413      	add	r3, r2
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004200:	440b      	add	r3, r1
 8004202:	3304      	adds	r3, #4
 8004204:	3301      	adds	r3, #1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b29b      	uxth	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	857b      	strh	r3, [r7, #42]	; 0x2a
                                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8004212:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004216:	3b0e      	subs	r3, #14
 8004218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421a:	4413      	add	r3, r2
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	b29a      	uxth	r2, r3
 8004220:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004224:	3b0e      	subs	r3, #14
 8004226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004228:	440b      	add	r3, r1
 800422a:	3304      	adds	r3, #4
 800422c:	3301      	adds	r3, #1
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	853b      	strh	r3, [r7, #40]	; 0x28
#else
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                                if(uuid == P2P_WRITE_CHAR_UUID)
 800423a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800423c:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8004240:	4293      	cmp	r3, r2
 8004242:	d11a      	bne.n	800427a <Client_Event_Handler+0x312>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : LED_CHAR_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004244:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004248:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <Client_Event_Handler+0x380>)
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	3302      	adds	r3, #2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	4826      	ldr	r0, [pc, #152]	; (80042f0 <Client_Event_Handler+0x388>)
 8004256:	f007 fe57 	bl	800bf08 <iprintf>
#endif
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_LED_CHAR_DESC;
 800425a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800425e:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <Client_Event_Handler+0x380>)
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	2208      	movs	r2, #8
 8004266:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PLedCharHdle = handle;
 8004268:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <Client_Event_Handler+0x380>)
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	3308      	adds	r3, #8
 8004274:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	e01e      	b.n	80042b8 <Client_Event_Handler+0x350>
                                }

                                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800427a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800427c:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8004280:	4293      	cmp	r3, r2
 8004282:	d119      	bne.n	80042b8 <Client_Event_Handler+0x350>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : BUTTON_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004284:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <Client_Event_Handler+0x380>)
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	3302      	adds	r3, #2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	4817      	ldr	r0, [pc, #92]	; (80042f4 <Client_Event_Handler+0x38c>)
 8004296:	f007 fe37 	bl	800bf08 <iprintf>
#endif
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_BUTTON_CHAR_DESC;
 800429a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <Client_Event_Handler+0x380>)
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	4413      	add	r3, r2
 80042a4:	2209      	movs	r2, #9
 80042a6:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PClientCharHdle = handle;
 80042a8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <Client_Event_Handler+0x380>)
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	330c      	adds	r3, #12
 80042b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80042b6:	801a      	strh	r2, [r3, #0]
                                }
#if (UUID_128BIT_FORMAT==1)
                                pr->Data_Length -= 21;
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	78db      	ldrb	r3, [r3, #3]
 80042bc:	3b15      	subs	r3, #21
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	70da      	strb	r2, [r3, #3]
                                idx += 21;
 80042c4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80042c8:	3315      	adds	r3, #21
 80042ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                            while(pr->Data_Length > 0)
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d18b      	bne.n	80041ee <Client_Event_Handler+0x286>
#endif
                            }
                        }
                    }
                }
                break;
 80042d6:	e111      	b.n	80044fc <Client_Event_Handler+0x594>
                case EVT_BLUE_ATT_FIND_INFORMATION_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_FIND_INFORMATION_RESP */

                    /* USER CODE END EVT_BLUE_ATT_FIND_INFORMATION_RESP */
                    aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 80042d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042da:	3302      	adds	r3, #2
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
                     * 2 bytes UUID
                     */

                    uint8_t index;

                    index = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042e4:	e00d      	b.n	8004302 <Client_Event_Handler+0x39a>
 80042e6:	bf00      	nop
 80042e8:	20000200 	.word	0x20000200
 80042ec:	0800d91c 	.word	0x0800d91c
 80042f0:	0800d958 	.word	0x0800d958
 80042f4:	0800d990 	.word	0x0800d990
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))

                        index++;
 80042f8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80042fc:	3301      	adds	r3, #1
 80042fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004302:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004306:	2b05      	cmp	r3, #5
 8004308:	d80b      	bhi.n	8004322 <Client_Event_Handler+0x3ba>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800430a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800430e:	4a83      	ldr	r2, [pc, #524]	; (800451c <Client_Event_Handler+0x5b4>)
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4413      	add	r3, r2
 8004314:	3302      	adds	r3, #2
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800431e:	429a      	cmp	r2, r3
 8004320:	d1ea      	bne.n	80042f8 <Client_Event_Handler+0x390>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004322:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004326:	2b05      	cmp	r3, #5
 8004328:	f200 80ea 	bhi.w	8004500 <Client_Event_Handler+0x598>
                    {

                        numDesc = (pr->Event_Data_Length) / 4;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* we are interested only in 16 bit UUIDs */
                        idx = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                        if (pr->Format == UUID_TYPE_16)
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	789b      	ldrb	r3, [r3, #2]
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 80dd 	bne.w	8004500 <Client_Event_Handler+0x598>
                        {
                            for (i=0; i<numDesc; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800434c:	e056      	b.n	80043fc <Client_Event_Handler+0x494>
                            {
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800434e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	4413      	add	r3, r2
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	b29a      	uxth	r2, r3
 800435a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800435e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004360:	440b      	add	r3, r1
 8004362:	3304      	adds	r3, #4
 8004364:	3301      	adds	r3, #1
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	b29b      	uxth	r3, r3
 800436e:	4313      	orrs	r3, r2
 8004370:	843b      	strh	r3, [r7, #32]
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8004372:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004376:	3302      	adds	r3, #2
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	4413      	add	r3, r2
 800437c:	791b      	ldrb	r3, [r3, #4]
 800437e:	b29a      	uxth	r2, r3
 8004380:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004384:	3302      	adds	r3, #2
 8004386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004388:	440b      	add	r3, r1
 800438a:	3304      	adds	r3, #4
 800438c:	3301      	adds	r3, #1
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	b29b      	uxth	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	83fb      	strh	r3, [r7, #30]

                                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800439a:	8bfb      	ldrh	r3, [r7, #30]
 800439c:	f642 1202 	movw	r2, #10498	; 0x2902
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d121      	bne.n	80043e8 <Client_Event_Handler+0x480>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80043a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80043a8:	4a5c      	ldr	r2, [pc, #368]	; (800451c <Client_Event_Handler+0x5b4>)
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	3302      	adds	r3, #2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	485a      	ldr	r0, [pc, #360]	; (8004520 <Client_Event_Handler+0x5b8>)
 80043b6:	f007 fda7 	bl	800bf08 <iprintf>
#endif
                                    if( aP2PClientContext[index].state == APP_BLE_DISCOVER_BUTTON_CHAR_DESC)
 80043ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80043be:	4a57      	ldr	r2, [pc, #348]	; (800451c <Client_Event_Handler+0x5b4>)
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d10e      	bne.n	80043e8 <Client_Event_Handler+0x480>
                                    {

                                        aP2PClientContext[index].P2PClientDescHandle = handle;
 80043ca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80043ce:	4a53      	ldr	r2, [pc, #332]	; (800451c <Client_Event_Handler+0x5b4>)
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	330e      	adds	r3, #14
 80043d6:	8c3a      	ldrh	r2, [r7, #32]
 80043d8:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC;
 80043da:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80043de:	4a4f      	ldr	r2, [pc, #316]	; (800451c <Client_Event_Handler+0x5b4>)
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	220b      	movs	r2, #11
 80043e6:	701a      	strb	r2, [r3, #0]

                                    }
                                }
                                idx += 4;
 80043e8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80043ec:	3304      	adds	r3, #4
 80043ee:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                            for (i=0; i<numDesc; i++)
 80043f2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80043f6:	3301      	adds	r3, #1
 80043f8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80043fc:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8004400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004404:	429a      	cmp	r2, r3
 8004406:	d3a2      	bcc.n	800434e <Client_Event_Handler+0x3e6>
                            }
                        }
                    }
                }
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8004408:	e07a      	b.n	8004500 <Client_Event_Handler+0x598>
                case EVT_BLUE_GATT_NOTIFICATION:
                {
                    /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION */

                    /* USER CODE END EVT_BLUE_GATT_NOTIFICATION */
                    aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800440a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440c:	3302      	adds	r3, #2
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    uint8_t index;

                    index = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004416:	e004      	b.n	8004422 <Client_Event_Handler+0x4ba>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 8004418:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800441c:	3301      	adds	r3, #1
 800441e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004422:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004426:	2b05      	cmp	r3, #5
 8004428:	d80b      	bhi.n	8004442 <Client_Event_Handler+0x4da>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800442a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800442e:	4a3b      	ldr	r2, [pc, #236]	; (800451c <Client_Event_Handler+0x5b4>)
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4413      	add	r3, r2
 8004434:	3302      	adds	r3, #2
 8004436:	881a      	ldrh	r2, [r3, #0]
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800443e:	429a      	cmp	r2, r3
 8004440:	d1ea      	bne.n	8004418 <Client_Event_Handler+0x4b0>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004442:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004446:	2b05      	cmp	r3, #5
 8004448:	d85c      	bhi.n	8004504 <Client_Event_Handler+0x59c>
                    {

                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	885b      	ldrh	r3, [r3, #2]
 800444e:	b29a      	uxth	r2, r3
 8004450:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004454:	4931      	ldr	r1, [pc, #196]	; (800451c <Client_Event_Handler+0x5b4>)
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	440b      	add	r3, r1
 800445a:	330c      	adds	r3, #12
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d150      	bne.n	8004504 <Client_Event_Handler+0x59c>
                                (pr->Attribute_Value_Length == (2)) )
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	791b      	ldrb	r3, [r3, #4]
                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 8004466:	2b02      	cmp	r3, #2
 8004468:	d14c      	bne.n	8004504 <Client_Event_Handler+0x59c>
                        {
#if(CFG_DEBUG_APP_TRACE != 0)
                            APP_DBG_MSG("-- GATT : BUTTON CHARACTERISTICS RECEIVED_EVT - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800446a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800446e:	4a2b      	ldr	r2, [pc, #172]	; (800451c <Client_Event_Handler+0x5b4>)
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4413      	add	r3, r2
 8004474:	3302      	adds	r3, #2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	482a      	ldr	r0, [pc, #168]	; (8004524 <Client_Event_Handler+0x5bc>)
 800447c:	f007 fd44 	bl	800bf08 <iprintf>
#endif
                            Notification.P2P_Client_Evt_Opcode = P2P_BUTTON_INFO_RECEIVED_EVT;
 8004480:	2302      	movs	r3, #2
 8004482:	733b      	strb	r3, [r7, #12]
                            Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	753b      	strb	r3, [r7, #20]
                            Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	3305      	adds	r3, #5
 800448e:	613b      	str	r3, [r7, #16]

                            P2P_Client_App_Notification(&Notification);
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fbf9 	bl	8003c8c <P2P_Client_App_Notification>
                            /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

                        }
                    }
                }
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800449a:	e033      	b.n	8004504 <Client_Event_Handler+0x59c>
                case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
                {
                    /* USER CODE BEGIN EVT_BLUE_GATT_PROCEDURE_COMPLETE */

                    /* USER CODE END EVT_BLUE_GATT_PROCEDURE_COMPLETE */
                    aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	3302      	adds	r3, #2
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
#if(CFG_DEBUG_APP_TRACE != 0)
                    APP_DBG_MSG("-- GATT : EVT_BLUE_GATT_PROCEDURE_COMPLETE \n");
 80044a2:	4821      	ldr	r0, [pc, #132]	; (8004528 <Client_Event_Handler+0x5c0>)
 80044a4:	f007 fdcc 	bl	800c040 <puts>
                    APP_DBG_MSG("\n");
 80044a8:	200a      	movs	r0, #10
 80044aa:	f007 fd45 	bl	800bf38 <putchar>
#endif
                    uint8_t index;
                    index = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80044b4:	e004      	b.n	80044c0 <Client_Event_Handler+0x558>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 80044b6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80044ba:	3301      	adds	r3, #1
 80044bc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80044c0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d80b      	bhi.n	80044e0 <Client_Event_Handler+0x578>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80044c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <Client_Event_Handler+0x5b4>)
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	4413      	add	r3, r2
 80044d2:	3302      	adds	r3, #2
 80044d4:	881a      	ldrh	r2, [r3, #0]
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1ea      	bne.n	80044b6 <Client_Event_Handler+0x54e>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80044e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d80f      	bhi.n	8004508 <Client_Event_Handler+0x5a0>
                    {
                        UTIL_SEQ_SetTask(  1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0 );
 80044e8:	2100      	movs	r1, #0
 80044ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044ee:	f007 fbb5 	bl	800bc5c <UTIL_SEQ_SetTask>
                    }
                }
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 80044f2:	e009      	b.n	8004508 <Client_Event_Handler+0x5a0>
                default:
                    /* USER CODE BEGIN ecode_default */

                    /* USER CODE END ecode_default */
                    break;
 80044f4:	bf00      	nop
 80044f6:	e00a      	b.n	800450e <Client_Event_Handler+0x5a6>
                    break;
 80044f8:	bf00      	nop
 80044fa:	e008      	b.n	800450e <Client_Event_Handler+0x5a6>
                break;
 80044fc:	bf00      	nop
 80044fe:	e006      	b.n	800450e <Client_Event_Handler+0x5a6>
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 8004500:	bf00      	nop
 8004502:	e004      	b.n	800450e <Client_Event_Handler+0x5a6>
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 8004504:	bf00      	nop
 8004506:	e002      	b.n	800450e <Client_Event_Handler+0x5a6>
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 8004508:	bf00      	nop
                }
            }

            break; /* HCI_EVT_VENDOR_SPECIFIC */
 800450a:	e000      	b.n	800450e <Client_Event_Handler+0x5a6>

        default:
            /* USER CODE BEGIN evt_default */

            /* USER CODE END evt_default */
            break;
 800450c:	bf00      	nop
        }
/* USER CODE BEGIN Client_Event_Handler_2 */

/* USER CODE END Client_Event_Handler_2 */
        return(return_value);
 800450e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
    }/* end BLE_CTRL_Event_Acknowledged_Status_t */
 8004512:	4618      	mov	r0, r3
 8004514:	3758      	adds	r7, #88	; 0x58
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000200 	.word	0x20000200
 8004520:	0800d9cc 	.word	0x0800d9cc
 8004524:	0800da14 	.word	0x0800da14
 8004528:	0800da5c 	.word	0x0800da5c

0800452c <LL_PWR_EnableBootC2>:
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <LL_PWR_EnableBootC2+0x1c>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <LL_PWR_EnableBootC2+0x1c>)
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	58000400 	.word	0x58000400

0800454c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8004556:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800455a:	4905      	ldr	r1, [pc, #20]	; (8004570 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	58000800 	.word	0x58000800

08004574 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	4904      	ldr	r1, [pc, #16]	; (8004594 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4313      	orrs	r3, r2
 8004586:	620b      	str	r3, [r1, #32]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	58000800 	.word	0x58000800

08004598 <LL_AHB3_GRP1_EnableClock>:
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80045a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4013      	ands	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80045da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045f4:	68fb      	ldr	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_C1_IPCC_EnableIT_TXF>:
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_C1_IPCC_EnableIT_RXO>:
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	605a      	str	r2, [r3, #4]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	43db      	mvns	r3, r3
 800469e:	401a      	ands	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	605a      	str	r2, [r3, #4]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	609a      	str	r2, [r3, #8]
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_C1_IPCC_SetFlag_CHx>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	041a      	lsls	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	609a      	str	r2, [r3, #8]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4013      	ands	r3, r2
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d101      	bne.n	8004706 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	4013      	ands	r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d101      	bne.n	8004730 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004744:	2102      	movs	r1, #2
 8004746:	4819      	ldr	r0, [pc, #100]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 8004748:	f7ff ffe4 	bl	8004714 <LL_C2_IPCC_IsActiveFlag_CHx>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HW_IPCC_Rx_Handler+0x26>
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	43db      	mvns	r3, r3
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8004760:	f000 f8ea 	bl	8004938 <HW_IPCC_SYS_EvtHandler>
 8004764:	e01f      	b.n	80047a6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004766:	2101      	movs	r1, #1
 8004768:	4810      	ldr	r0, [pc, #64]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 800476a:	f7ff ffd3 	bl	8004714 <LL_C2_IPCC_IsActiveFlag_CHx>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HW_IPCC_Rx_Handler+0x46>
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8004780:	f000 f89e 	bl	80048c0 <HW_IPCC_BLE_EvtHandler>
 8004784:	e00f      	b.n	80047a6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004786:	2108      	movs	r1, #8
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 800478a:	f7ff ffc3 	bl	8004714 <LL_C2_IPCC_IsActiveFlag_CHx>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HW_IPCC_Rx_Handler+0x68>
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HW_IPCC_Rx_Handler+0x6c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	43db      	mvns	r3, r3
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80047a2:	f000 f915 	bl	80049d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
}
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	58000c00 	.word	0x58000c00

080047b0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80047b4:	2102      	movs	r1, #2
 80047b6:	4822      	ldr	r0, [pc, #136]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 80047b8:	f7ff ff97 	bl	80046ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HW_IPCC_Tx_Handler+0x26>
 80047c2:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80047d0:	f000 f8a6 	bl	8004920 <HW_IPCC_SYS_CmdEvtHandler>
 80047d4:	e031      	b.n	800483a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80047d6:	2102      	movs	r1, #2
 80047d8:	4819      	ldr	r0, [pc, #100]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 80047da:	f7ff ff86 	bl	80046ea <LL_C1_IPCC_IsActiveFlag_CHx>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HW_IPCC_Tx_Handler+0x48>
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80047f2:	f000 f895 	bl	8004920 <HW_IPCC_SYS_CmdEvtHandler>
 80047f6:	e020      	b.n	800483a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80047f8:	2108      	movs	r1, #8
 80047fa:	4811      	ldr	r0, [pc, #68]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 80047fc:	f7ff ff75 	bl	80046ea <LL_C1_IPCC_IsActiveFlag_CHx>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HW_IPCC_Tx_Handler+0x6a>
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	43db      	mvns	r3, r3
 800480c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004814:	f000 f8be 	bl	8004994 <HW_IPCC_MM_FreeBufHandler>
 8004818:	e00f      	b.n	800483a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800481a:	2120      	movs	r1, #32
 800481c:	4808      	ldr	r0, [pc, #32]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 800481e:	f7ff ff64 	bl	80046ea <LL_C1_IPCC_IsActiveFlag_CHx>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <HW_IPCC_Tx_Handler+0x8c>
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HW_IPCC_Tx_Handler+0x90>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	43db      	mvns	r3, r3
 800482e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004836:	f000 f84f 	bl	80048d8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800483a:	bf00      	nop
 800483c:	bf00      	nop
}
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58000c00 	.word	0x58000c00

08004844 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004848:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800484c:	f7ff febd 	bl	80045ca <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004854:	f7ff fe7a 	bl	800454c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004858:	f44f 7000 	mov.w	r0, #512	; 0x200
 800485c:	f7ff fe8a 	bl	8004574 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004860:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8004862:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8004864:	f7ff fe62 	bl	800452c <LL_PWR_EnableBootC2>

  return;
 8004868:	bf00      	nop
}
 800486a:	bd80      	pop	{r7, pc}

0800486c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004870:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004874:	f7ff fe90 	bl	8004598 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8004878:	4806      	ldr	r0, [pc, #24]	; (8004894 <HW_IPCC_Init+0x28>)
 800487a:	f7ff fed2 	bl	8004622 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <HW_IPCC_Init+0x28>)
 8004880:	f7ff febf 	bl	8004602 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004884:	202c      	movs	r0, #44	; 0x2c
 8004886:	f000 fc12 	bl	80050ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800488a:	202d      	movs	r0, #45	; 0x2d
 800488c:	f000 fc0f 	bl	80050ae <HAL_NVIC_EnableIRQ>

  return;
 8004890:	bf00      	nop
}
 8004892:	bd80      	pop	{r7, pc}
 8004894:	58000c00 	.word	0x58000c00

08004898 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800489c:	2101      	movs	r1, #1
 800489e:	4802      	ldr	r0, [pc, #8]	; (80048a8 <HW_IPCC_BLE_Init+0x10>)
 80048a0:	f7ff fef4 	bl	800468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80048a4:	bf00      	nop
}
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58000c00 	.word	0x58000c00

080048ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80048b0:	2101      	movs	r1, #1
 80048b2:	4802      	ldr	r0, [pc, #8]	; (80048bc <HW_IPCC_BLE_SendCmd+0x10>)
 80048b4:	f7ff ff0a 	bl	80046cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80048b8:	bf00      	nop
}
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	58000c00 	.word	0x58000c00

080048c0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80048c4:	f006 feca 	bl	800b65c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80048c8:	2101      	movs	r1, #1
 80048ca:	4802      	ldr	r0, [pc, #8]	; (80048d4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80048cc:	f7ff fef0 	bl	80046b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80048d0:	bf00      	nop
}
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	58000c00 	.word	0x58000c00

080048d8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80048dc:	2120      	movs	r1, #32
 80048de:	4803      	ldr	r0, [pc, #12]	; (80048ec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80048e0:	f7ff fec2 	bl	8004668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80048e4:	f006 feea 	bl	800b6bc <HW_IPCC_BLE_AclDataAckNot>

  return;
 80048e8:	bf00      	nop
}
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58000c00 	.word	0x58000c00

080048f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80048f4:	2102      	movs	r1, #2
 80048f6:	4802      	ldr	r0, [pc, #8]	; (8004900 <HW_IPCC_SYS_Init+0x10>)
 80048f8:	f7ff fec8 	bl	800468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80048fc:	bf00      	nop
}
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	58000c00 	.word	0x58000c00

08004904 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004908:	2102      	movs	r1, #2
 800490a:	4804      	ldr	r0, [pc, #16]	; (800491c <HW_IPCC_SYS_SendCmd+0x18>)
 800490c:	f7ff fede 	bl	80046cc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004910:	2102      	movs	r1, #2
 8004912:	4802      	ldr	r0, [pc, #8]	; (800491c <HW_IPCC_SYS_SendCmd+0x18>)
 8004914:	f7ff fe95 	bl	8004642 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004918:	bf00      	nop
}
 800491a:	bd80      	pop	{r7, pc}
 800491c:	58000c00 	.word	0x58000c00

08004920 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004924:	2102      	movs	r1, #2
 8004926:	4803      	ldr	r0, [pc, #12]	; (8004934 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004928:	f7ff fe9e 	bl	8004668 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800492c:	f006 ff16 	bl	800b75c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004930:	bf00      	nop
}
 8004932:	bd80      	pop	{r7, pc}
 8004934:	58000c00 	.word	0x58000c00

08004938 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800493c:	f006 ff24 	bl	800b788 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004940:	2102      	movs	r1, #2
 8004942:	4802      	ldr	r0, [pc, #8]	; (800494c <HW_IPCC_SYS_EvtHandler+0x14>)
 8004944:	f7ff feb4 	bl	80046b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004948:	bf00      	nop
}
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58000c00 	.word	0x58000c00

08004950 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004958:	2108      	movs	r1, #8
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800495c:	f7ff fec5 	bl	80046ea <LL_C1_IPCC_IsActiveFlag_CHx>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800496c:	2108      	movs	r1, #8
 800496e:	4807      	ldr	r0, [pc, #28]	; (800498c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004970:	f7ff fe67 	bl	8004642 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8004974:	e006      	b.n	8004984 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800497a:	2108      	movs	r1, #8
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800497e:	f7ff fea5 	bl	80046cc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8004982:	bf00      	nop
}
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	58000c00 	.word	0x58000c00
 8004990:	20000310 	.word	0x20000310

08004994 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004998:	2108      	movs	r1, #8
 800499a:	4806      	ldr	r0, [pc, #24]	; (80049b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800499c:	f7ff fe64 	bl	8004668 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80049a6:	2108      	movs	r1, #8
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80049aa:	f7ff fe8f 	bl	80046cc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80049ae:	bf00      	nop
}
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	58000c00 	.word	0x58000c00
 80049b8:	20000310 	.word	0x20000310

080049bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80049c0:	2108      	movs	r1, #8
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <HW_IPCC_TRACES_Init+0x10>)
 80049c4:	f7ff fe62 	bl	800468c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80049c8:	bf00      	nop
}
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	58000c00 	.word	0x58000c00

080049d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80049d4:	f006 ff80 	bl	800b8d8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80049d8:	2108      	movs	r1, #8
 80049da:	4802      	ldr	r0, [pc, #8]	; (80049e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80049dc:	f7ff fe68 	bl	80046b0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80049e0:	bf00      	nop
}
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	58000c00 	.word	0x58000c00

080049e8 <LL_AHB2_GRP1_EnableClock>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
	...

08004a1c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004a26:	f107 030c 	add.w	r3, r7, #12
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	60da      	str	r2, [r3, #12]
 8004a34:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a36:	2002      	movs	r0, #2
 8004a38:	f7ff ffd6 	bl	80049e8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <BSP_LED_Init+0x6c>)
 8004a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a44:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a46:	2301      	movs	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <BSP_LED_Init+0x70>)
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	f107 020c 	add.w	r2, r7, #12
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fe7d 	bl	8005760 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <BSP_LED_Init+0x70>)
 8004a6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <BSP_LED_Init+0x6c>)
 8004a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a76:	2200      	movs	r2, #0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f000 ffe1 	bl	8005a40 <HAL_GPIO_WritePin>
}
 8004a7e:	bf00      	nop
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	0800dbfc 	.word	0x0800dbfc
 8004a8c:	2000001c 	.word	0x2000001c

08004a90 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <BSP_LED_On+0x2c>)
 8004a9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4a06      	ldr	r2, [pc, #24]	; (8004ac0 <BSP_LED_On+0x30>)
 8004aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4619      	mov	r1, r3
 8004aae:	f000 ffc7 	bl	8005a40 <HAL_GPIO_WritePin>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	2000001c 	.word	0x2000001c
 8004ac0:	0800dbfc 	.word	0x0800dbfc

08004ac4 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <BSP_LED_Off+0x2c>)
 8004ad2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <BSP_LED_Off+0x30>)
 8004ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f000 ffad 	bl	8005a40 <HAL_GPIO_WritePin>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	2000001c 	.word	0x2000001c
 8004af4:	0800dbfc 	.word	0x0800dbfc

08004af8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	460a      	mov	r2, r1
 8004b02:	71fb      	strb	r3, [r7, #7]
 8004b04:	4613      	mov	r3, r2
 8004b06:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <BSP_PB_Init+0x2e>
 8004b1e:	2004      	movs	r0, #4
 8004b20:	f7ff ff62 	bl	80049e8 <LL_AHB2_GRP1_EnableClock>
 8004b24:	e00c      	b.n	8004b40 <BSP_PB_Init+0x48>
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d103      	bne.n	8004b34 <BSP_PB_Init+0x3c>
 8004b2c:	2008      	movs	r0, #8
 8004b2e:	f7ff ff5b 	bl	80049e8 <LL_AHB2_GRP1_EnableClock>
 8004b32:	e005      	b.n	8004b40 <BSP_PB_Init+0x48>
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d102      	bne.n	8004b40 <BSP_PB_Init+0x48>
 8004b3a:	2008      	movs	r0, #8
 8004b3c:	f7ff ff54 	bl	80049e8 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004b40:	79bb      	ldrb	r3, [r7, #6]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d117      	bne.n	8004b76 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4a20      	ldr	r2, [pc, #128]	; (8004bcc <BSP_PB_Init+0xd4>)
 8004b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b4e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <BSP_PB_Init+0xd8>)
 8004b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b64:	f107 020c 	add.w	r2, r7, #12
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fdf8 	bl	8005760 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004b70:	2001      	movs	r0, #1
 8004b72:	f7fd f946 	bl	8001e02 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004b76:	79bb      	ldrb	r3, [r7, #6]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d122      	bne.n	8004bc2 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <BSP_PB_Init+0xd4>)
 8004b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b84:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b86:	2301      	movs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <BSP_PB_Init+0xdc>)
 8004b8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <BSP_PB_Init+0xd8>)
 8004b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b96:	f107 020c 	add.w	r2, r7, #12
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fddf 	bl	8005760 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <BSP_PB_Init+0xe0>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	b25b      	sxtb	r3, r3
 8004baa:	2200      	movs	r2, #0
 8004bac:	210f      	movs	r1, #15
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fa63 	bl	800507a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <BSP_PB_Init+0xe0>)
 8004bb8:	5cd3      	ldrb	r3, [r2, r3]
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fa76 	bl	80050ae <HAL_NVIC_EnableIRQ>
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	0800dc04 	.word	0x0800dc04
 8004bd0:	20000028 	.word	0x20000028
 8004bd4:	10210000 	.word	0x10210000
 8004bd8:	0800dc0c 	.word	0x0800dc0c

08004bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <SystemInit+0xa0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <SystemInit+0xa0>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <SystemInit+0xa0>)
 8004bee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004c0e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1a:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <SystemInit+0xa4>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2c:	f023 0305 	bic.w	r3, r3, #5
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <SystemInit+0xa8>)
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <SystemInit+0xa8>)
 8004c56:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000ed00 	.word	0xe000ed00
 8004c80:	faf6fefb 	.word	0xfaf6fefb
 8004c84:	22041000 	.word	0x22041000

08004c88 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6053      	str	r3, [r2, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	e0042000 	.word	0xe0042000

08004ca8 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	6053      	str	r3, [r2, #4]
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	e0042000 	.word	0xe0042000

08004cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_Init+0x3c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <HAL_Init+0x3c>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cde:	2003      	movs	r0, #3
 8004ce0:	f000 f9c0 	bl	8005064 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f000 f80f 	bl	8004d08 <HAL_InitTick>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	71fb      	strb	r3, [r7, #7]
 8004cf4:	e001      	b.n	8004cfa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cf6:	f7fd f954 	bl	8001fa2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	58004000 	.word	0x58004000

08004d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_InitTick+0x6c>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d024      	beq.n	8004d66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d1c:	f001 ffb0 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_InitTick+0x6c>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f9d6 	bl	80050e6 <HAL_SYSTICK_Config>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b0f      	cmp	r3, #15
 8004d44:	d809      	bhi.n	8004d5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d46:	2200      	movs	r2, #0
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	f000 f994 	bl	800507a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <HAL_InitTick+0x70>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e007      	b.n	8004d6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e004      	b.n	8004d6a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e001      	b.n	8004d6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000003c 	.word	0x2000003c
 8004d78:	20000038 	.word	0x20000038

08004d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_IncTick+0x20>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_IncTick+0x24>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <HAL_IncTick+0x24>)
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	2000003c 	.word	0x2000003c
 8004da0:	20001690 	.word	0x20001690

08004da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return uwTick;
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <HAL_GetTick+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20001690 	.word	0x20001690

08004dbc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_GetTickPrio+0x14>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000038 	.word	0x20000038

08004dd4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_GetTickFreq+0x14>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000003c 	.word	0x2000003c

08004dec <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004df0:	f7ff ff4a 	bl	8004c88 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004dfc:	f7ff ff54 	bl	8004ca8 <LL_DBGMCU_EnableDBGStopMode>
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e20:	4013      	ands	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e36:	4a04      	ldr	r2, [pc, #16]	; (8004e48 <__NVIC_SetPriorityGrouping+0x44>)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	60d3      	str	r3, [r2, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <__NVIC_GetPriorityGrouping+0x18>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	f003 0307 	and.w	r3, r3, #7
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db0b      	blt.n	8004e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	4907      	ldr	r1, [pc, #28]	; (8004ea0 <__NVIC_EnableIRQ+0x38>)
 8004e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2001      	movs	r0, #1
 8004e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000e100 	.word	0xe000e100

08004ea4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db12      	blt.n	8004edc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	f003 021f 	and.w	r2, r3, #31
 8004ebc:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <__NVIC_DisableIRQ+0x44>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eca:	3320      	adds	r3, #32
 8004ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ed0:	f3bf 8f4f 	dsb	sy
}
 8004ed4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ed6:	f3bf 8f6f 	isb	sy
}
 8004eda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100

08004eec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	db0c      	blt.n	8004f18 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	f003 021f 	and.w	r2, r3, #31
 8004f04:	4907      	ldr	r1, [pc, #28]	; (8004f24 <__NVIC_SetPendingIRQ+0x38>)
 8004f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f12:	3340      	adds	r3, #64	; 0x40
 8004f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000e100 	.word	0xe000e100

08004f28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db0c      	blt.n	8004f54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	f003 021f 	and.w	r2, r3, #31
 8004f40:	4907      	ldr	r1, [pc, #28]	; (8004f60 <__NVIC_ClearPendingIRQ+0x38>)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2001      	movs	r0, #1
 8004f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4e:	3360      	adds	r3, #96	; 0x60
 8004f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100

08004f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	db0a      	blt.n	8004f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <__NVIC_SetPriority+0x4c>)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	0112      	lsls	r2, r2, #4
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	440b      	add	r3, r1
 8004f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f8c:	e00a      	b.n	8004fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <__NVIC_SetPriority+0x50>)
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3b04      	subs	r3, #4
 8004f9c:	0112      	lsls	r2, r2, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	761a      	strb	r2, [r3, #24]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000e100 	.word	0xe000e100
 8004fb4:	e000ed00 	.word	0xe000ed00

08004fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b089      	sub	sp, #36	; 0x24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	bf28      	it	cs
 8004fd6:	2304      	movcs	r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d902      	bls.n	8004fe8 <NVIC_EncodePriority+0x30>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3b03      	subs	r3, #3
 8004fe6:	e000      	b.n	8004fea <NVIC_EncodePriority+0x32>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005000:	f04f 31ff 	mov.w	r1, #4294967295
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	43d9      	mvns	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	4313      	orrs	r3, r2
         );
}
 8005012:	4618      	mov	r0, r3
 8005014:	3724      	adds	r7, #36	; 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3b01      	subs	r3, #1
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005030:	d301      	bcc.n	8005036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005032:	2301      	movs	r3, #1
 8005034:	e00f      	b.n	8005056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <SysTick_Config+0x40>)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800503e:	210f      	movs	r1, #15
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	f7ff ff8e 	bl	8004f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <SysTick_Config+0x40>)
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <SysTick_Config+0x40>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010

08005064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fec9 	bl	8004e04 <__NVIC_SetPriorityGrouping>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af00      	add	r7, sp, #0
 8005080:	4603      	mov	r3, r0
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005088:	f7ff fee0 	bl	8004e4c <__NVIC_GetPriorityGrouping>
 800508c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f7ff ff90 	bl	8004fb8 <NVIC_EncodePriority>
 8005098:	4602      	mov	r2, r0
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff5f 	bl	8004f64 <__NVIC_SetPriority>
}
 80050a6:	bf00      	nop
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fed3 	bl	8004e68 <__NVIC_EnableIRQ>
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	4603      	mov	r3, r0
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fee3 	bl	8004ea4 <__NVIC_DisableIRQ>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff ff96 	bl	8005020 <SysTick_Config>
 80050f4:	4603      	mov	r3, r0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	4603      	mov	r3, r0
 8005106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff feed 	bl	8004eec <__NVIC_SetPendingIRQ>
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fefd 	bl	8004f28 <__NVIC_ClearPendingIRQ>
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e08e      	b.n	8005268 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_DMA_Init+0x138>)
 8005152:	429a      	cmp	r2, r3
 8005154:	d80f      	bhi.n	8005176 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	4b45      	ldr	r3, [pc, #276]	; (8005274 <HAL_DMA_Init+0x13c>)
 800515e:	4413      	add	r3, r2
 8005160:	4a45      	ldr	r2, [pc, #276]	; (8005278 <HAL_DMA_Init+0x140>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	009a      	lsls	r2, r3, #2
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a42      	ldr	r2, [pc, #264]	; (800527c <HAL_DMA_Init+0x144>)
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
 8005174:	e00e      	b.n	8005194 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	4b40      	ldr	r3, [pc, #256]	; (8005280 <HAL_DMA_Init+0x148>)
 800517e:	4413      	add	r3, r2
 8005180:	4a3d      	ldr	r2, [pc, #244]	; (8005278 <HAL_DMA_Init+0x140>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	009a      	lsls	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <HAL_DMA_Init+0x14c>)
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa16 	bl	8005618 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f4:	d102      	bne.n	80051fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005204:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005208:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005212:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d010      	beq.n	800523e <HAL_DMA_Init+0x106>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d80c      	bhi.n	800523e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa35 	bl	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	e008      	b.n	8005250 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40020407 	.word	0x40020407
 8005274:	bffdfff8 	.word	0xbffdfff8
 8005278:	cccccccd 	.word	0xcccccccd
 800527c:	40020000 	.word	0x40020000
 8005280:	bffdfbf8 	.word	0xbffdfbf8
 8005284:	40020400 	.word	0x40020400

08005288 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_DMA_Start_IT+0x20>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e066      	b.n	8005376 <HAL_DMA_Start_IT+0xee>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d155      	bne.n	8005368 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f95a 	bl	800559a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 020e 	orr.w	r2, r2, #14
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e00f      	b.n	8005320 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0204 	bic.w	r2, r2, #4
 800530e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 020a 	orr.w	r2, r2, #10
 800531e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800533c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e005      	b.n	8005374 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005370:	2302      	movs	r3, #2
 8005372:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d005      	beq.n	80053a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2204      	movs	r2, #4
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
 80053a0:	e047      	b.n	8005432 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 020e 	bic.w	r2, r2, #14
 80053b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f003 021c 	and.w	r2, r3, #28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f202 	lsl.w	r2, r1, r2
 80053e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005410:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
    }
  }
  return status;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f003 031c 	and.w	r3, r3, #28
 800545c:	2204      	movs	r2, #4
 800545e:	409a      	lsls	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d026      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x7a>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d021      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0204 	bic.w	r2, r2, #4
 800548e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f003 021c 	and.w	r2, r3, #28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	2104      	movs	r1, #4
 800549e:	fa01 f202 	lsl.w	r2, r1, r2
 80054a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d071      	beq.n	8005590 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054b4:	e06c      	b.n	8005590 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f003 031c 	and.w	r3, r3, #28
 80054be:	2202      	movs	r2, #2
 80054c0:	409a      	lsls	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02e      	beq.n	8005528 <HAL_DMA_IRQHandler+0xec>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d029      	beq.n	8005528 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 020a 	bic.w	r2, r2, #10
 80054f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f003 021c 	and.w	r2, r3, #28
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2102      	movs	r1, #2
 8005508:	fa01 f202 	lsl.w	r2, r1, r2
 800550c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d038      	beq.n	8005590 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005526:	e033      	b.n	8005590 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	f003 031c 	and.w	r3, r3, #28
 8005530:	2208      	movs	r2, #8
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02a      	beq.n	8005592 <HAL_DMA_IRQHandler+0x156>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d025      	beq.n	8005592 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 020e 	bic.w	r2, r2, #14
 8005554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	f003 021c 	and.w	r2, r3, #28
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2101      	movs	r1, #1
 8005564:	fa01 f202 	lsl.w	r2, r1, r2
 8005568:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005590:	bf00      	nop
 8005592:	bf00      	nop
}
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055b0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d004      	beq.n	80055c4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f003 021c 	and.w	r2, r3, #28
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f202 	lsl.w	r2, r1, r2
 80055d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d108      	bne.n	80055fa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055f8:	e007      	b.n	800560a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	60da      	str	r2, [r3, #12]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	4b17      	ldr	r3, [pc, #92]	; (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d80a      	bhi.n	8005642 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	089b      	lsrs	r3, r3, #2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005638:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6493      	str	r3, [r2, #72]	; 0x48
 8005640:	e007      	b.n	8005652 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	009a      	lsls	r2, r3, #2
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800564c:	4413      	add	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	3b08      	subs	r3, #8
 800565a:	4a0c      	ldr	r2, [pc, #48]	; (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005668:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40020407 	.word	0x40020407
 8005688:	4002081c 	.word	0x4002081c
 800568c:	cccccccd 	.word	0xcccccccd
 8005690:	40020880 	.word	0x40020880

08005694 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a09      	ldr	r2, [pc, #36]	; (80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80056b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b01      	subs	r3, #1
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2201      	movs	r2, #1
 80056c4:	409a      	lsls	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	1000823f 	.word	0x1000823f
 80056dc:	40020940 	.word	0x40020940

080056e0 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d12b      	bne.n	800574e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005700:	2302      	movs	r3, #2
 8005702:	e025      	b.n	8005750 <HAL_DMAEx_ConfigMuxSync+0x70>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8005714:	4013      	ands	r3, r2
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	6811      	ldr	r1, [r2, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	3a01      	subs	r2, #1
 8005720:	04d2      	lsls	r2, r2, #19
 8005722:	4311      	orrs	r1, r2
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6852      	ldr	r2, [r2, #4]
 8005728:	4311      	orrs	r1, r2
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	7a12      	ldrb	r2, [r2, #8]
 800572e:	0412      	lsls	r2, r2, #16
 8005730:	4311      	orrs	r1, r2
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	7a52      	ldrb	r2, [r2, #9]
 8005736:	0252      	lsls	r2, r2, #9
 8005738:	4311      	orrs	r1, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800573e:	430b      	orrs	r3, r1
 8005740:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000fdff 	.word	0xe000fdff

08005760 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800576e:	e14c      	b.n	8005a0a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 813e 	beq.w	8005a04 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d00b      	beq.n	80057a8 <HAL_GPIO_Init+0x48>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d007      	beq.n	80057a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800579c:	2b11      	cmp	r3, #17
 800579e:	d003      	beq.n	80057a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b12      	cmp	r3, #18
 80057a6:	d130      	bne.n	800580a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057de:	2201      	movs	r2, #1
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4013      	ands	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0201 	and.w	r2, r3, #1
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	2203      	movs	r2, #3
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0xea>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b12      	cmp	r3, #18
 8005848:	d123      	bne.n	8005892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	08da      	lsrs	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3208      	adds	r2, #8
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	220f      	movs	r2, #15
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	08da      	lsrs	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3208      	adds	r2, #8
 800588c:	6939      	ldr	r1, [r7, #16]
 800588e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	2203      	movs	r2, #3
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8098 	beq.w	8005a04 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80058d4:	4a54      	ldr	r2, [pc, #336]	; (8005a28 <HAL_GPIO_Init+0x2c8>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	3302      	adds	r3, #2
 80058dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	220f      	movs	r2, #15
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058fe:	d019      	beq.n	8005934 <HAL_GPIO_Init+0x1d4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <HAL_GPIO_Init+0x2cc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_GPIO_Init+0x1d0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a49      	ldr	r2, [pc, #292]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00d      	beq.n	800592c <HAL_GPIO_Init+0x1cc>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a48      	ldr	r2, [pc, #288]	; (8005a34 <HAL_GPIO_Init+0x2d4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <HAL_GPIO_Init+0x1c8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a47      	ldr	r2, [pc, #284]	; (8005a38 <HAL_GPIO_Init+0x2d8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <HAL_GPIO_Init+0x1c4>
 8005920:	2304      	movs	r3, #4
 8005922:	e008      	b.n	8005936 <HAL_GPIO_Init+0x1d6>
 8005924:	2307      	movs	r3, #7
 8005926:	e006      	b.n	8005936 <HAL_GPIO_Init+0x1d6>
 8005928:	2303      	movs	r3, #3
 800592a:	e004      	b.n	8005936 <HAL_GPIO_Init+0x1d6>
 800592c:	2302      	movs	r3, #2
 800592e:	e002      	b.n	8005936 <HAL_GPIO_Init+0x1d6>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <HAL_GPIO_Init+0x1d6>
 8005934:	2300      	movs	r3, #0
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	f002 0203 	and.w	r2, r2, #3
 800593c:	0092      	lsls	r2, r2, #2
 800593e:	4093      	lsls	r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005946:	4938      	ldr	r1, [pc, #224]	; (8005a28 <HAL_GPIO_Init+0x2c8>)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	089b      	lsrs	r3, r3, #2
 800594c:	3302      	adds	r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005954:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	43db      	mvns	r3, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4013      	ands	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800597a:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	43db      	mvns	r3, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059b0:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059fe:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <HAL_GPIO_Init+0x2dc>)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3301      	adds	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f47f aeab 	bne.w	8005770 <HAL_GPIO_Init+0x10>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	48000400 	.word	0x48000400
 8005a30:	48000800 	.word	0x48000800
 8005a34:	48000c00 	.word	0x48000c00
 8005a38:	48001000 	.word	0x48001000
 8005a3c:	58000800 	.word	0x58000800

08005a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a50:	787b      	ldrb	r3, [r7, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a5c:	e002      	b.n	8005a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a5e:	887a      	ldrh	r2, [r7, #2]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d006      	beq.n	8005a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a86:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa ffac 	bl	80009ec <HAL_GPIO_EXTI_Callback>
  }
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	58000800 	.word	0x58000800

08005aa0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_HSEM_IRQHandler+0x30>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <HAL_HSEM_IRQHandler+0x30>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <HAL_HSEM_IRQHandler+0x30>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_HSEM_IRQHandler+0x30>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f807 	bl	8005ad4 <HAL_HSEM_FreeCallback>
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58001500 	.word	0x58001500

08005ad4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	58000400 	.word	0x58000400

08005b08 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	58000400 	.word	0x58000400

08005b24 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b36:	d101      	bne.n	8005b3c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_HSE_Enable>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_HSE_Disable>:
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <LL_RCC_HSE_IsReady>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b96:	d101      	bne.n	8005b9c <LL_RCC_HSE_IsReady+0x18>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <LL_RCC_HSE_IsReady+0x1a>
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_RCC_HSI_Enable>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_HSI_Disable>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd8:	6013      	str	r3, [r2, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_HSI_IsReady>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	d101      	bne.n	8005bfc <LL_RCC_HSI_IsReady+0x18>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <LL_RCC_HSI_IsReady+0x1a>
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_HSI48_Enable>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_HSI48_Disable>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_RCC_HSI48_IsReady>:
{
 8005c76:	b480      	push	{r7}
 8005c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d101      	bne.n	8005c8e <LL_RCC_HSI48_IsReady+0x18>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <LL_RCC_HSI48_IsReady+0x1a>
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_LSE_Enable>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005cb2:	bf00      	nop
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <LL_RCC_LSE_Disable>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <LL_RCC_LSE_EnableBypass>:
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_RCC_LSE_DisableBypass>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_LSE_IsReady>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d101      	bne.n	8005d3a <LL_RCC_LSE_IsReady+0x18>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <LL_RCC_LSE_IsReady+0x1a>
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_RCC_LSI1_Enable>:
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_RCC_LSI1_Disable>:
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005d80:	bf00      	nop
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_RCC_LSI1_IsReady>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d101      	bne.n	8005da2 <LL_RCC_LSI1_IsReady+0x18>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <LL_RCC_LSI1_IsReady+0x1a>
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_LSI2_Enable>:
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dbe:	f043 0304 	orr.w	r3, r3, #4
 8005dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005dc6:	bf00      	nop
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <LL_RCC_LSI2_Disable>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005de0:	f023 0304 	bic.w	r3, r3, #4
 8005de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <LL_RCC_LSI2_IsReady>:
{
 8005df2:	b480      	push	{r7}
 8005df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d101      	bne.n	8005e0a <LL_RCC_LSI2_IsReady+0x18>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <LL_RCC_LSI2_IsReady+0x1a>
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_LSI2_SetTrimming>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <LL_RCC_MSI_Enable>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_RCC_MSI_Disable>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	6013      	str	r3, [r2, #0]
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_MSI_IsReady>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d101      	bne.n	8005e96 <LL_RCC_MSI_IsReady+0x16>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <LL_RCC_MSI_IsReady+0x18>
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <LL_RCC_MSI_SetRange>:
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <LL_RCC_MSI_GetRange>:
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eda:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2bb0      	cmp	r3, #176	; 0xb0
 8005ee0:	d901      	bls.n	8005ee6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005ee2:	23b0      	movs	r3, #176	; 0xb0
 8005ee4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005ee6:	687b      	ldr	r3, [r7, #4]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	604b      	str	r3, [r1, #4]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <LL_RCC_SetSysClkSource>:
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f023 0203 	bic.w	r2, r3, #3
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	608b      	str	r3, [r1, #8]
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_RCC_GetSysClkSource>:
{
 8005f46:	b480      	push	{r7}
 8005f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 030c 	and.w	r3, r3, #12
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_SetAHBPrescaler>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetAHB4Prescaler>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fc2:	f023 020f 	bic.w	r2, r3, #15
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_RCC_SetAPB1Prescaler>:
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	608b      	str	r3, [r1, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_RCC_SetAPB2Prescaler>:
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	608b      	str	r3, [r1, #8]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_RCC_GetAHBPrescaler>:
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800603e:	4618      	mov	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <LL_RCC_GetAHB4Prescaler>:
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800604c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006050:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_GetAPB1Prescaler>:
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006072:	4618      	mov	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_RCC_GetAPB2Prescaler>:
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800608a:	4618      	mov	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_RCC_PLL_Enable>:
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_PLL_Disable>:
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060c4:	6013      	str	r3, [r2, #0]
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LL_RCC_PLL_IsReady>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e2:	d101      	bne.n	80060e8 <LL_RCC_PLL_IsReady+0x18>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <LL_RCC_PLL_IsReady+0x1a>
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_RCC_PLL_GetN>:
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	0a1b      	lsrs	r3, r3, #8
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006104:	4618      	mov	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <LL_RCC_PLL_GetR>:
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <LL_RCC_PLL_GetDivider>:
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006134:	4618      	mov	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_RCC_PLL_GetMainSource>:
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0303 	and.w	r3, r3, #3
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006156:	b480      	push	{r7}
 8006158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d101      	bne.n	800616e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800617a:	b480      	push	{r7}
 800617c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800617e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006182:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800618e:	d101      	bne.n	8006194 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b4:	d101      	bne.n	80061ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80061c6:	b480      	push	{r7}
 80061c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061d8:	d101      	bne.n	80061de <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_IsActiveFlag_PPRE2>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061fc:	d101      	bne.n	8006202 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b08d      	sub	sp, #52	; 0x34
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e37e      	b.n	8006920 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 8092 	beq.w	8006354 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006230:	f7ff fe89 	bl	8005f46 <LL_RCC_GetSysClkSource>
 8006234:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006236:	f7ff ff82 	bl	800613e <LL_RCC_PLL_GetMainSource>
 800623a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_RCC_OscConfig+0x3e>
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b0c      	cmp	r3, #12
 8006246:	d14c      	bne.n	80062e2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b01      	cmp	r3, #1
 800624c:	d149      	bne.n	80062e2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800624e:	f7ff fe17 	bl	8005e80 <LL_RCC_MSI_IsReady>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <HAL_RCC_OscConfig+0x54>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e35d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006268:	f7ff fe2f 	bl	8005eca <LL_RCC_MSI_GetRange>
 800626c:	4603      	mov	r3, r0
 800626e:	429c      	cmp	r4, r3
 8006270:	d914      	bls.n	800629c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fd42 	bl	8006d00 <RCC_SetFlashLatencyFromMSIRange>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e34c      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fe09 	bl	8005ea2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fe2d 	bl	8005ef4 <LL_RCC_MSI_SetCalibTrimming>
 800629a:	e013      	b.n	80062c4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fdfe 	bl	8005ea2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fe22 	bl	8005ef4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fd23 	bl	8006d00 <RCC_SetFlashLatencyFromMSIRange>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e32d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062c4:	f000 fcdc 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4ab3      	ldr	r2, [pc, #716]	; (8006598 <HAL_RCC_OscConfig+0x388>)
 80062cc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062ce:	4bb3      	ldr	r3, [pc, #716]	; (800659c <HAL_RCC_OscConfig+0x38c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fd18 	bl	8004d08 <HAL_InitTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d039      	beq.n	8006352 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e31e      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01e      	beq.n	8006328 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062ea:	f7ff fdab 	bl	8005e44 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062ee:	f7fe fd59 	bl	8004da4 <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062f6:	f7fe fd55 	bl	8004da4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e30b      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006308:	f7ff fdba 	bl	8005e80 <LL_RCC_MSI_IsReady>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f1      	beq.n	80062f6 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fdc3 	bl	8005ea2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fde7 	bl	8005ef4 <LL_RCC_MSI_SetCalibTrimming>
 8006326:	e015      	b.n	8006354 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006328:	f7ff fd9b 	bl	8005e62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800632c:	f7fe fd3a 	bl	8004da4 <HAL_GetTick>
 8006330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006334:	f7fe fd36 	bl	8004da4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e2ec      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006346:	f7ff fd9b 	bl	8005e80 <LL_RCC_MSI_IsReady>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f1      	bne.n	8006334 <HAL_RCC_OscConfig+0x124>
 8006350:	e000      	b.n	8006354 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006352:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d04e      	beq.n	80063fe <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006360:	f7ff fdf1 	bl	8005f46 <LL_RCC_GetSysClkSource>
 8006364:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006366:	f7ff feea 	bl	800613e <LL_RCC_PLL_GetMainSource>
 800636a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	2b08      	cmp	r3, #8
 8006370:	d005      	beq.n	800637e <HAL_RCC_OscConfig+0x16e>
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	2b0c      	cmp	r3, #12
 8006376:	d10d      	bne.n	8006394 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b03      	cmp	r3, #3
 800637c:	d10a      	bne.n	8006394 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637e:	f7ff fc01 	bl	8005b84 <LL_RCC_HSE_IsReady>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d039      	beq.n	80063fc <HAL_RCC_OscConfig+0x1ec>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d135      	bne.n	80063fc <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e2c5      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_OscConfig+0x194>
 800639e:	f7ff fbd3 	bl	8005b48 <LL_RCC_HSE_Enable>
 80063a2:	e001      	b.n	80063a8 <HAL_RCC_OscConfig+0x198>
 80063a4:	f7ff fbdf 	bl	8005b66 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d012      	beq.n	80063d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fe fcf8 	bl	8004da4 <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b8:	f7fe fcf4 	bl	8004da4 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e2aa      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80063ca:	f7ff fbdb 	bl	8005b84 <LL_RCC_HSE_IsReady>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f1      	beq.n	80063b8 <HAL_RCC_OscConfig+0x1a8>
 80063d4:	e013      	b.n	80063fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d6:	f7fe fce5 	bl	8004da4 <HAL_GetTick>
 80063da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063de:	f7fe fce1 	bl	8004da4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b64      	cmp	r3, #100	; 0x64
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e297      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80063f0:	f7ff fbc8 	bl	8005b84 <LL_RCC_HSE_IsReady>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f1      	bne.n	80063de <HAL_RCC_OscConfig+0x1ce>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d051      	beq.n	80064ae <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640a:	f7ff fd9c 	bl	8005f46 <LL_RCC_GetSysClkSource>
 800640e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006410:	f7ff fe95 	bl	800613e <LL_RCC_PLL_GetMainSource>
 8006414:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d005      	beq.n	8006428 <HAL_RCC_OscConfig+0x218>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b0c      	cmp	r3, #12
 8006420:	d113      	bne.n	800644a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d110      	bne.n	800644a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006428:	f7ff fbdc 	bl	8005be4 <LL_RCC_HSI_IsReady>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_RCC_OscConfig+0x22e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e270      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fbe0 	bl	8005c08 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006448:	e031      	b.n	80064ae <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006452:	f7ff fba9 	bl	8005ba8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fe fca5 	bl	8004da4 <HAL_GetTick>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800645e:	f7fe fca1 	bl	8004da4 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e257      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006470:	f7ff fbb8 	bl	8005be4 <LL_RCC_HSI_IsReady>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f1      	beq.n	800645e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fbc2 	bl	8005c08 <LL_RCC_HSI_SetCalibTrimming>
 8006484:	e013      	b.n	80064ae <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006486:	f7ff fb9e 	bl	8005bc6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648a:	f7fe fc8b 	bl	8004da4 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006492:	f7fe fc87 	bl	8004da4 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e23d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80064a4:	f7ff fb9e 	bl	8005be4 <LL_RCC_HSI_IsReady>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f1      	bne.n	8006492 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80a3 	beq.w	800660e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d076      	beq.n	80065be <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d046      	beq.n	800656a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80064dc:	f7ff fc55 	bl	8005d8a <LL_RCC_LSI1_IsReady>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d113      	bne.n	800650e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80064e6:	f7ff fc2e 	bl	8005d46 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ea:	f7fe fc5b 	bl	8004da4 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80064f2:	f7fe fc57 	bl	8004da4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e20d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006504:	f7ff fc41 	bl	8005d8a <LL_RCC_LSI1_IsReady>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f1      	beq.n	80064f2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800650e:	f7ff fc4e 	bl	8005dae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fe fc47 	bl	8004da4 <HAL_GetTick>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800651a:	f7fe fc43 	bl	8004da4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e1f9      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800652c:	f7ff fc61 	bl	8005df2 <LL_RCC_LSI2_IsReady>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f1      	beq.n	800651a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff fc6b 	bl	8005e16 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006540:	f7ff fc12 	bl	8005d68 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fe fc2e 	bl	8004da4 <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800654c:	f7fe fc2a 	bl	8004da4 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e1e0      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800655e:	f7ff fc14 	bl	8005d8a <LL_RCC_LSI1_IsReady>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f1      	bne.n	800654c <HAL_RCC_OscConfig+0x33c>
 8006568:	e051      	b.n	800660e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800656a:	f7ff fbec 	bl	8005d46 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656e:	f7fe fc19 	bl	8004da4 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006576:	f7fe fc15 	bl	8004da4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1cb      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006588:	f7ff fbff 	bl	8005d8a <LL_RCC_LSI1_IsReady>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f1      	beq.n	8006576 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006592:	f7ff fc1d 	bl	8005dd0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006596:	e00c      	b.n	80065b2 <HAL_RCC_OscConfig+0x3a2>
 8006598:	20000034 	.word	0x20000034
 800659c:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065a0:	f7fe fc00 	bl	8004da4 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e1b6      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065b2:	f7ff fc1e 	bl	8005df2 <LL_RCC_LSI2_IsReady>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f1      	bne.n	80065a0 <HAL_RCC_OscConfig+0x390>
 80065bc:	e027      	b.n	800660e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80065be:	f7ff fc07 	bl	8005dd0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c2:	f7fe fbef 	bl	8004da4 <HAL_GetTick>
 80065c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065ca:	f7fe fbeb 	bl	8004da4 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e1a1      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80065dc:	f7ff fc09 	bl	8005df2 <LL_RCC_LSI2_IsReady>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f1      	bne.n	80065ca <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80065e6:	f7ff fbbf 	bl	8005d68 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fe fbdb 	bl	8004da4 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065f2:	f7fe fbd7 	bl	8004da4 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e18d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006604:	f7ff fbc1 	bl	8005d8a <LL_RCC_LSI1_IsReady>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f1      	bne.n	80065f2 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	d05b      	beq.n	80066d2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800661a:	4bb5      	ldr	r3, [pc, #724]	; (80068f0 <HAL_RCC_OscConfig+0x6e0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d114      	bne.n	8006650 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006626:	f7ff fa5f 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800662a:	f7fe fbbb 	bl	8004da4 <HAL_GetTick>
 800662e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006632:	f7fe fbb7 	bl	8004da4 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e16d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006644:	4baa      	ldr	r3, [pc, #680]	; (80068f0 <HAL_RCC_OscConfig+0x6e0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d102      	bne.n	800665e <HAL_RCC_OscConfig+0x44e>
 8006658:	f7ff fb1f 	bl	8005c9a <LL_RCC_LSE_Enable>
 800665c:	e00c      	b.n	8006678 <HAL_RCC_OscConfig+0x468>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	d104      	bne.n	8006670 <HAL_RCC_OscConfig+0x460>
 8006666:	f7ff fb3a 	bl	8005cde <LL_RCC_LSE_EnableBypass>
 800666a:	f7ff fb16 	bl	8005c9a <LL_RCC_LSE_Enable>
 800666e:	e003      	b.n	8006678 <HAL_RCC_OscConfig+0x468>
 8006670:	f7ff fb24 	bl	8005cbc <LL_RCC_LSE_Disable>
 8006674:	f7ff fb44 	bl	8005d00 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fe fb90 	bl	8004da4 <HAL_GetTick>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006686:	e00a      	b.n	800669e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006688:	f7fe fb8c 	bl	8004da4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	; 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e140      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800669e:	f7ff fb40 	bl	8005d22 <LL_RCC_LSE_IsReady>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0ef      	beq.n	8006688 <HAL_RCC_OscConfig+0x478>
 80066a8:	e013      	b.n	80066d2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066aa:	f7fe fb7b 	bl	8004da4 <HAL_GetTick>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80066b0:	e00a      	b.n	80066c8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fe fb77 	bl	8004da4 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e12b      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80066c8:	f7ff fb2b 	bl	8005d22 <LL_RCC_LSE_IsReady>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ef      	bne.n	80066b2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d02c      	beq.n	8006738 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d014      	beq.n	8006710 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066e6:	f7ff faa4 	bl	8005c32 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ea:	f7fe fb5b 	bl	8004da4 <HAL_GetTick>
 80066ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f2:	f7fe fb57 	bl	8004da4 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e10d      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006704:	f7ff fab7 	bl	8005c76 <LL_RCC_HSI48_IsReady>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f1      	beq.n	80066f2 <HAL_RCC_OscConfig+0x4e2>
 800670e:	e013      	b.n	8006738 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006710:	f7ff faa0 	bl	8005c54 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006714:	f7fe fb46 	bl	8004da4 <HAL_GetTick>
 8006718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800671c:	f7fe fb42 	bl	8004da4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e0f8      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800672e:	f7ff faa2 	bl	8005c76 <LL_RCC_HSI48_IsReady>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f1      	bne.n	800671c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80ee 	beq.w	800691e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006742:	f7ff fc00 	bl	8005f46 <LL_RCC_GetSysClkSource>
 8006746:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	2b02      	cmp	r3, #2
 8006756:	f040 80af 	bne.w	80068b8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0203 	and.w	r2, r3, #3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	429a      	cmp	r2, r3
 8006766:	d123      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006772:	429a      	cmp	r2, r3
 8006774:	d11c      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006782:	429a      	cmp	r2, r3
 8006784:	d114      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d10d      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d106      	bne.n	80067b0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d05d      	beq.n	800686c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d058      	beq.n	8006868 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0ab      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067c8:	f7ff fc73 	bl	80060b2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067cc:	f7fe faea 	bl	8004da4 <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d4:	f7fe fae6 	bl	8004da4 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e09c      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ef      	bne.n	80067d4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	4b3e      	ldr	r3, [pc, #248]	; (80068f4 <HAL_RCC_OscConfig+0x6e4>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006806:	4311      	orrs	r1, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800680c:	0212      	lsls	r2, r2, #8
 800680e:	4311      	orrs	r1, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006814:	4311      	orrs	r1, r2
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006820:	430a      	orrs	r2, r1
 8006822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006826:	4313      	orrs	r3, r2
 8006828:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800682a:	f7ff fc33 	bl	8006094 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800683e:	f7fe fab1 	bl	8004da4 <HAL_GetTick>
 8006842:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006846:	f7fe faad 	bl	8004da4 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e063      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ef      	beq.n	8006846 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006866:	e05a      	b.n	800691e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e059      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d151      	bne.n	800691e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800687a:	f7ff fc0b 	bl	8006094 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800687e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800688e:	f7fe fa89 	bl	8004da4 <HAL_GetTick>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006896:	f7fe fa85 	bl	8004da4 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e03b      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ef      	beq.n	8006896 <HAL_RCC_OscConfig+0x686>
 80068b6:	e032      	b.n	800691e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b0c      	cmp	r3, #12
 80068bc:	d02d      	beq.n	800691a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068be:	f7ff fbf8 	bl	80060b2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068dc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e6:	f7fe fa5d 	bl	8004da4 <HAL_GetTick>
 80068ea:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068ec:	e00d      	b.n	800690a <HAL_RCC_OscConfig+0x6fa>
 80068ee:	bf00      	nop
 80068f0:	58000400 	.word	0x58000400
 80068f4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f8:	f7fe fa54 	bl	8004da4 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e00a      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ef      	bne.n	80068f8 <HAL_RCC_OscConfig+0x6e8>
 8006918:	e001      	b.n	800691e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3734      	adds	r7, #52	; 0x34
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}

08006928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e12d      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800693c:	4b98      	ldr	r3, [pc, #608]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d91b      	bls.n	8006982 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b95      	ldr	r3, [pc, #596]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 0207 	bic.w	r2, r3, #7
 8006952:	4993      	ldr	r1, [pc, #588]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695a:	f7fe fa23 	bl	8004da4 <HAL_GetTick>
 800695e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006960:	e008      	b.n	8006974 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006962:	f7fe fa1f 	bl	8004da4 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e111      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006974:	4b8a      	ldr	r3, [pc, #552]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d1ef      	bne.n	8006962 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fae3 	bl	8005f5e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006998:	f7fe fa04 	bl	8004da4 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069a0:	f7fe fa00 	bl	8004da4 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0f2      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069b2:	f7ff fbd0 	bl	8006156 <LL_RCC_IsActiveFlag_HPRE>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0f1      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d016      	beq.n	80069f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff fada 	bl	8005f86 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069d2:	f7fe f9e7 	bl	8004da4 <HAL_GetTick>
 80069d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069da:	f7fe f9e3 	bl	8004da4 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e0d5      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80069ec:	f7ff fbc5 	bl	800617a <LL_RCC_IsActiveFlag_C2HPRE>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f1      	beq.n	80069da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fad3 	bl	8005fb2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a0c:	f7fe f9ca 	bl	8004da4 <HAL_GetTick>
 8006a10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a14:	f7fe f9c6 	bl	8004da4 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e0b8      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a26:	f7ff fbbb 	bl	80061a0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f1      	beq.n	8006a14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d016      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff facd 	bl	8005fe0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a46:	f7fe f9ad 	bl	8004da4 <HAL_GetTick>
 8006a4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a4e:	f7fe f9a9 	bl	8004da4 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e09b      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a60:	f7ff fbb1 	bl	80061c6 <LL_RCC_IsActiveFlag_PPRE1>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0f1      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fac3 	bl	8006008 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a82:	f7fe f98f 	bl	8004da4 <HAL_GetTick>
 8006a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a8a:	f7fe f98b 	bl	8004da4 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e07d      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006a9c:	f7ff fba5 	bl	80061ea <LL_RCC_IsActiveFlag_PPRE2>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f1      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d043      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006aba:	f7ff f863 	bl	8005b84 <LL_RCC_HSE_IsReady>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11e      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e067      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d106      	bne.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006ad0:	f7ff fafe 	bl	80060d0 <LL_RCC_PLL_IsReady>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d113      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e05c      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006ae6:	f7ff f9cb 	bl	8005e80 <LL_RCC_MSI_IsReady>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d108      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e051      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006af4:	f7ff f876 	bl	8005be4 <LL_RCC_HSI_IsReady>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e04a      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fa09 	bl	8005f1e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b0c:	f7fe f94a 	bl	8004da4 <HAL_GetTick>
 8006b10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b14:	f7fe f946 	bl	8004da4 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e036      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2a:	f7ff fa0c 	bl	8005f46 <LL_RCC_GetSysClkSource>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d1ec      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b3a:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d21b      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f023 0207 	bic.w	r2, r3, #7
 8006b50:	4913      	ldr	r1, [pc, #76]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b58:	f7fe f924 	bl	8004da4 <HAL_GetTick>
 8006b5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b60:	f7fe f920 	bl	8004da4 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e012      	b.n	8006b98 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_RCC_ClockConfig+0x278>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d1ef      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b80:	f000 f87e 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006b84:	4603      	mov	r3, r0
 8006b86:	4a07      	ldr	r2, [pc, #28]	; (8006ba4 <HAL_RCC_ClockConfig+0x27c>)
 8006b88:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006b8a:	f7fe f917 	bl	8004dbc <HAL_GetTickPrio>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe f8b9 	bl	8004d08 <HAL_InitTick>
 8006b96:	4603      	mov	r3, r0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	58004000 	.word	0x58004000
 8006ba4:	20000034 	.word	0x20000034

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bae:	f7ff f9ca 	bl	8005f46 <LL_RCC_GetSysClkSource>
 8006bb2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006bba:	f7ff f986 	bl	8005eca <LL_RCC_MSI_GetRange>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e04b      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d102      	bne.n	8006bdc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bd6:	4b28      	ldr	r3, [pc, #160]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e045      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d10a      	bne.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006be2:	f7fe ff9f 	bl	8005b24 <LL_RCC_HSE_IsEnabledDiv2>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006bec:	4b22      	ldr	r3, [pc, #136]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e03a      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006bf2:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e037      	b.n	8006c68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006bf8:	f7ff faa1 	bl	800613e <LL_RCC_PLL_GetMainSource>
 8006bfc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d003      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x64>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d003      	beq.n	8006c12 <HAL_RCC_GetSysClockFreq+0x6a>
 8006c0a:	e00d      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c0e:	60bb      	str	r3, [r7, #8]
        break;
 8006c10:	e015      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c12:	f7fe ff87 	bl	8005b24 <LL_RCC_HSE_IsEnabledDiv2>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c1c:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c1e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c20:	e00d      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c24:	60bb      	str	r3, [r7, #8]
        break;
 8006c26:	e00a      	b.n	8006c3e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c28:	f7ff f94f 	bl	8005eca <LL_RCC_MSI_GetRange>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	091b      	lsrs	r3, r3, #4
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	4a0f      	ldr	r2, [pc, #60]	; (8006c74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3a:	60bb      	str	r3, [r7, #8]
        break;
 8006c3c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006c3e:	f7ff fa59 	bl	80060f4 <LL_RCC_PLL_GetN>
 8006c42:	4602      	mov	r2, r0
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	fb03 f402 	mul.w	r4, r3, r2
 8006c4a:	f7ff fa6c 	bl	8006126 <LL_RCC_PLL_GetDivider>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	3301      	adds	r3, #1
 8006c54:	fbb4 f4f3 	udiv	r4, r4, r3
 8006c58:	f7ff fa59 	bl	800610e <LL_RCC_PLL_GetR>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	0f5b      	lsrs	r3, r3, #29
 8006c60:	3301      	adds	r3, #1
 8006c62:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	0800dc70 	.word	0x0800dc70
 8006c78:	00f42400 	.word	0x00f42400
 8006c7c:	01e84800 	.word	0x01e84800

08006c80 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b598      	push	{r3, r4, r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006c84:	f7ff ff90 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	f7ff f9d1 	bl	8006030 <LL_RCC_GetAHBPrescaler>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	4a03      	ldr	r2, [pc, #12]	; (8006ca4 <HAL_RCC_GetHCLKFreq+0x24>)
 8006c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c9c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	bd98      	pop	{r3, r4, r7, pc}
 8006ca4:	0800dc10 	.word	0x0800dc10

08006ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ca8:	b598      	push	{r3, r4, r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006cac:	f7ff ffe8 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	f7ff f9d7 	bl	8006064 <LL_RCC_GetAPB1Prescaler>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd98      	pop	{r3, r4, r7, pc}
 8006cd0:	0800dc50 	.word	0x0800dc50

08006cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cd4:	b598      	push	{r3, r4, r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006cd8:	f7ff ffd2 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cdc:	4604      	mov	r4, r0
 8006cde:	f7ff f9cd 	bl	800607c <LL_RCC_GetAPB2Prescaler>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	0adb      	lsrs	r3, r3, #11
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	bd98      	pop	{r3, r4, r7, pc}
 8006cfc:	0800dc50 	.word	0x0800dc50

08006d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2bb0      	cmp	r3, #176	; 0xb0
 8006d0c:	d903      	bls.n	8006d16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d0e:	4b15      	ldr	r3, [pc, #84]	; (8006d64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e007      	b.n	8006d26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d26:	f7ff f98f 	bl	8006048 <LL_RCC_GetAHB4Prescaler>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	4a0d      	ldr	r2, [pc, #52]	; (8006d68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	0c9c      	lsrs	r4, r3, #18
 8006d4a:	f7fe fedd 	bl	8005b08 <HAL_PWREx_GetVoltageRange>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4619      	mov	r1, r3
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 f80c 	bl	8006d70 <RCC_SetFlashLatency>
 8006d58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd90      	pop	{r4, r7, pc}
 8006d62:	bf00      	nop
 8006d64:	0800dc70 	.word	0x0800dc70
 8006d68:	0800dc10 	.word	0x0800dc10
 8006d6c:	431bde83 	.word	0x431bde83

08006d70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b093      	sub	sp, #76	; 0x4c
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006d7a:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <RCC_SetFlashLatency+0xf0>)
 8006d7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006d86:	4a37      	ldr	r2, [pc, #220]	; (8006e64 <RCC_SetFlashLatency+0xf4>)
 8006d88:	f107 031c 	add.w	r3, r7, #28
 8006d8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006d92:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <RCC_SetFlashLatency+0xf8>)
 8006d94:	f107 040c 	add.w	r4, r7, #12
 8006d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006d9e:	2300      	movs	r3, #0
 8006da0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da8:	d11c      	bne.n	8006de4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	643b      	str	r3, [r7, #64]	; 0x40
 8006dae:	e015      	b.n	8006ddc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006db8:	4413      	add	r3, r2
 8006dba:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d808      	bhi.n	8006dd6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006dcc:	4413      	add	r3, r2
 8006dce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006dd4:	e022      	b.n	8006e1c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd8:	3301      	adds	r3, #1
 8006dda:	643b      	str	r3, [r7, #64]	; 0x40
 8006ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d9e6      	bls.n	8006db0 <RCC_SetFlashLatency+0x40>
 8006de2:	e01b      	b.n	8006e1c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de8:	e015      	b.n	8006e16 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006df2:	4413      	add	r3, r2
 8006df4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d808      	bhi.n	8006e10 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e06:	4413      	add	r3, r2
 8006e08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e0e:	e005      	b.n	8006e1c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	3301      	adds	r3, #1
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d9e6      	bls.n	8006dea <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006e1c:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <RCC_SetFlashLatency+0xfc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f023 0207 	bic.w	r2, r3, #7
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <RCC_SetFlashLatency+0xfc>)
 8006e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e2c:	f7fd ffba 	bl	8004da4 <HAL_GetTick>
 8006e30:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e32:	e008      	b.n	8006e46 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e34:	f7fd ffb6 	bl	8004da4 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e007      	b.n	8006e56 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <RCC_SetFlashLatency+0xfc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1ef      	bne.n	8006e34 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	374c      	adds	r7, #76	; 0x4c
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	0800da88 	.word	0x0800da88
 8006e64:	0800da98 	.word	0x0800da98
 8006e68:	0800daa4 	.word	0x0800daa4
 8006e6c:	58004000 	.word	0x58004000

08006e70 <LL_RCC_LSE_IsEnabled>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <LL_RCC_LSE_IsEnabled+0x18>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <LL_RCC_LSE_IsEnabled+0x1a>
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <LL_RCC_LSE_IsReady>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d101      	bne.n	8006eac <LL_RCC_LSE_IsReady+0x18>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <LL_RCC_LSE_IsReady+0x1a>
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_RCC_SetRFWKPClockSource>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <LL_RCC_SetSMPSClockSource>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	f023 0203 	bic.w	r2, r3, #3
 8006ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <LL_RCC_SetSMPSPrescaler>:
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <LL_RCC_SetUSARTClockSource>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f44:	f023 0203 	bic.w	r2, r3, #3
 8006f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <LL_RCC_SetLPUARTClockSource>:
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <LL_RCC_SetI2CClockSource>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	091b      	lsrs	r3, r3, #4
 8006fa0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <LL_RCC_SetLPTIMClockSource>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <LL_RCC_SetSAIClockSource>:
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800700e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <LL_RCC_SetRNGClockSource>:
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800703a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <LL_RCC_SetCLK48ClockSource>:
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <LL_RCC_SetUSBClockSource>:
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff ffe3 	bl	8007052 <LL_RCC_SetCLK48ClockSource>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <LL_RCC_SetADCClockSource>:
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <LL_RCC_SetRTCClockSource>:
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <LL_RCC_GetRTCClockSource>:
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80070f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <LL_RCC_ForceBackupDomainReset>:
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800710a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800712c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007140:	bf00      	nop
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <LL_RCC_PLLSAI1_Enable>:
{
 800714a:	b480      	push	{r7}
 800714c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800714e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800715c:	6013      	str	r3, [r2, #0]
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LL_RCC_PLLSAI1_Disable>:
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800716c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007176:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800717a:	6013      	str	r3, [r2, #0]
}
 800717c:	bf00      	nop
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <LL_RCC_PLLSAI1_IsReady>:
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800718a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007198:	d101      	bne.n	800719e <LL_RCC_PLLSAI1_IsReady+0x18>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b088      	sub	sp, #32
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80071b2:	2300      	movs	r3, #0
 80071b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80071b6:	2300      	movs	r3, #0
 80071b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d034      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071ce:	d021      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80071d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071d4:	d81b      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071da:	d01d      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80071dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071e0:	d815      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80071e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ea:	d110      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80071ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80071fc:	e00d      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f947 	bl	8007496 <RCCEx_PLLSAI1_ConfigNP>
 8007208:	4603      	mov	r3, r0
 800720a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800720c:	e005      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	77fb      	strb	r3, [r7, #31]
        break;
 8007212:	e002      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff fee8 	bl	8006ffa <LL_RCC_SetSAIClockSource>
 800722a:	e001      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	7ffb      	ldrb	r3, [r7, #31]
 800722e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007238:	2b00      	cmp	r3, #0
 800723a:	d046      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800723c:	f7ff ff56 	bl	80070ec <LL_RCC_GetRTCClockSource>
 8007240:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d03c      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800724c:	f7fe fc4c 	bl	8005ae8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d105      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff ff30 	bl	80070c0 <LL_RCC_SetRTCClockSource>
 8007260:	e02e      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800726c:	f7ff ff4b 	bl	8007106 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007270:	f7ff ff5a 	bl	8007128 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800728c:	f7ff fdf0 	bl	8006e70 <LL_RCC_LSE_IsEnabled>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d114      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007296:	f7fd fd85 	bl	8004da4 <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800729c:	e00b      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fd fd81 	bl	8004da4 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d902      	bls.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	77fb      	strb	r3, [r7, #31]
              break;
 80072b4:	e004      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80072b6:	f7ff fded 	bl	8006e94 <LL_RCC_LSE_IsReady>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d1ee      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80072c0:	7ffb      	ldrb	r3, [r7, #31]
 80072c2:	77bb      	strb	r3, [r7, #30]
 80072c4:	e001      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	7ffb      	ldrb	r3, [r7, #31]
 80072c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff fe2a 	bl	8006f34 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fe35 	bl	8006f60 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0310 	and.w	r3, r3, #16
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fe5d 	bl	8006fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fe52 	bl	8006fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fe2a 	bl	8006f8c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fe1f 	bl	8006f8c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007356:	2b00      	cmp	r3, #0
 8007358:	d022      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fe8d 	bl	800707e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800736c:	d107      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800736e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800737c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007386:	d10b      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f8dd 	bl	800754c <RCCEx_PLLSAI1_ConfigNQ>
 8007392:	4603      	mov	r3, r0
 8007394:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007396:	7ffb      	ldrb	r3, [r7, #31]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800739c:	7ffb      	ldrb	r3, [r7, #31]
 800739e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d02b      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b4:	d008      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073be:	d003      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fe2a 	bl	8007026 <LL_RCC_SetRNGClockSource>
 80073d2:	e00a      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	2000      	movs	r0, #0
 80073e0:	f7ff fe21 	bl	8007026 <LL_RCC_SetRNGClockSource>
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f7ff fe34 	bl	8007052 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80073f2:	d107      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800740c:	2b00      	cmp	r3, #0
 800740e:	d022      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fe3d 	bl	8007094 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007422:	d107      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800742e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007432:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743c:	d10b      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3304      	adds	r3, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f8dd 	bl	8007602 <RCCEx_PLLSAI1_ConfigNR>
 8007448:	4603      	mov	r3, r0
 800744a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800744c:	7ffb      	ldrb	r3, [r7, #31]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8007452:	7ffb      	ldrb	r3, [r7, #31]
 8007454:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fd26 	bl	8006eb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fd45 	bl	8006f0c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fd2c 	bl	8006ee4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800748c:	7fbb      	ldrb	r3, [r7, #30]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80074a2:	f7ff fe61 	bl	8007168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074a6:	f7fd fc7d 	bl	8004da4 <HAL_GetTick>
 80074aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074ac:	e009      	b.n	80074c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ae:	f7fd fc79 	bl	8004da4 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d902      	bls.n	80074c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e004      	b.n	80074cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80074c2:	f7ff fe60 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f0      	bne.n	80074ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d137      	bne.n	8007542 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074e6:	4313      	orrs	r3, r2
 80074e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80074ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074fc:	4313      	orrs	r3, r2
 80074fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007500:	f7ff fe23 	bl	800714a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007504:	f7fd fc4e 	bl	8004da4 <HAL_GetTick>
 8007508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800750a:	e009      	b.n	8007520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800750c:	f7fd fc4a 	bl	8004da4 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d902      	bls.n	8007520 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	73fb      	strb	r3, [r7, #15]
        break;
 800751e:	e004      	b.n	800752a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007520:	f7ff fe31 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d1f0      	bne.n	800750c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d108      	bne.n	8007542 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800753e:	4313      	orrs	r3, r2
 8007540:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007558:	f7ff fe06 	bl	8007168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800755c:	f7fd fc22 	bl	8004da4 <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007562:	e009      	b.n	8007578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007564:	f7fd fc1e 	bl	8004da4 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d902      	bls.n	8007578 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	73fb      	strb	r3, [r7, #15]
      break;
 8007576:	e004      	b.n	8007582 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007578:	f7ff fe05 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d137      	bne.n	80075f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	021b      	lsls	r3, r3, #8
 8007598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800759c:	4313      	orrs	r3, r2
 800759e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80075a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075b2:	4313      	orrs	r3, r2
 80075b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80075b6:	f7ff fdc8 	bl	800714a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ba:	f7fd fbf3 	bl	8004da4 <HAL_GetTick>
 80075be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075c0:	e009      	b.n	80075d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075c2:	f7fd fbef 	bl	8004da4 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d902      	bls.n	80075d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	73fb      	strb	r3, [r7, #15]
        break;
 80075d4:	e004      	b.n	80075e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075d6:	f7ff fdd6 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d1f0      	bne.n	80075c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80075e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075f4:	4313      	orrs	r3, r2
 80075f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800760e:	f7ff fdab 	bl	8007168 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007612:	f7fd fbc7 	bl	8004da4 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007618:	e009      	b.n	800762e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800761a:	f7fd fbc3 	bl	8004da4 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d902      	bls.n	800762e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	73fb      	strb	r3, [r7, #15]
      break;
 800762c:	e004      	b.n	8007638 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800762e:	f7ff fdaa 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f0      	bne.n	800761a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d137      	bne.n	80076ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800763e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007652:	4313      	orrs	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007668:	4313      	orrs	r3, r2
 800766a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800766c:	f7ff fd6d 	bl	800714a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007670:	f7fd fb98 	bl	8004da4 <HAL_GetTick>
 8007674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007676:	e009      	b.n	800768c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007678:	f7fd fb94 	bl	8004da4 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d902      	bls.n	800768c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
        break;
 800768a:	e004      	b.n	8007696 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800768c:	f7ff fd7b 	bl	8007186 <LL_RCC_PLLSAI1_IsReady>
 8007690:	4603      	mov	r3, r0
 8007692:	2b01      	cmp	r3, #1
 8007694:	d1f0      	bne.n	8007678 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d108      	bne.n	80076ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800769c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076aa:	4313      	orrs	r3, r2
 80076ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e090      	b.n	80077ec <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fa fd66 	bl	80021b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	22ca      	movs	r2, #202	; 0xca
 80076f2:	625a      	str	r2, [r3, #36]	; 0x24
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2253      	movs	r2, #83	; 0x53
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f89f 	bl	8007840 <RTC_EnterInitMode>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	22ff      	movs	r2, #255	; 0xff
 800770e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2204      	movs	r2, #4
 8007714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e067      	b.n	80077ec <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800772a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6899      	ldr	r1, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	68d2      	ldr	r2, [r2, #12]
 8007756:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6919      	ldr	r1, [r3, #16]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	041a      	lsls	r2, r3, #16
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800777a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0203 	bic.w	r2, r2, #3
 800778a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69da      	ldr	r2, [r3, #28]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	431a      	orrs	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d113      	bne.n	80077da <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f81e 	bl	80077f4 <HAL_RTC_WaitForSynchro>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00d      	beq.n	80077da <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	22ff      	movs	r2, #255	; 0xff
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2204      	movs	r2, #4
 80077ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e008      	b.n	80077ec <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	22ff      	movs	r2, #255	; 0xff
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80077ea:	2300      	movs	r3, #0
  }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800780a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800780c:	f7fd faca 	bl	8004da4 <HAL_GetTick>
 8007810:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007812:	e009      	b.n	8007828 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007814:	f7fd fac6 	bl	8004da4 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007822:	d901      	bls.n	8007828 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e007      	b.n	8007838 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0ee      	beq.n	8007814 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d119      	bne.n	800788a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007860:	f7fd faa0 	bl	8004da4 <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007866:	e009      	b.n	800787c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007868:	f7fd fa9c 	bl	8004da4 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007876:	d901      	bls.n	800787c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e007      	b.n	800788c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0ee      	beq.n	8007868 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_RTCEx_EnableBypassShadow+0x16>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e024      	b.n	80078f4 <HAL_RTCEx_EnableBypassShadow+0x60>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	22ca      	movs	r2, #202	; 0xca
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2253      	movs	r2, #83	; 0x53
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0220 	orr.w	r2, r2, #32
 80078d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	22ff      	movs	r2, #255	; 0xff
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_RCC_GetUSARTClockSource>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4013      	ands	r3, r2
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <LL_RCC_GetLPUARTClockSource>:
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4013      	ands	r3, r2
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e042      	b.n	80079d8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fa fb2d 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2224      	movs	r2, #36	; 0x24
 800796e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa3e 	bl	8007e04 <UART_SetConfig>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e022      	b.n	80079d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc3c 	bl	8008218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fcc3 	bl	800835c <UART_CheckIdleState>
 80079d6:	4603      	mov	r3, r0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d168      	bne.n	8007aca <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_UART_Transmit_DMA+0x24>
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e061      	b.n	8007acc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Transmit_DMA+0x36>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e05a      	b.n	8007acc <HAL_UART_Transmit_DMA+0xec>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2221      	movs	r2, #33	; 0x21
 8007a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02c      	beq.n	8007aa6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a50:	4a20      	ldr	r2, [pc, #128]	; (8007ad4 <HAL_UART_Transmit_DMA+0xf4>)
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a58:	4a1f      	ldr	r2, [pc, #124]	; (8007ad8 <HAL_UART_Transmit_DMA+0xf8>)
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a60:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <HAL_UART_Transmit_DMA+0xfc>)
 8007a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a68:	2200      	movs	r2, #0
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a74:	4619      	mov	r1, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3328      	adds	r3, #40	; 0x28
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	f7fd fc02 	bl	8005288 <HAL_DMA_Start_IT>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e012      	b.n	8007acc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2240      	movs	r2, #64	; 0x40
 8007aac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ac4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	0800856f 	.word	0x0800856f
 8007ad8:	080085c3 	.word	0x080085c3
 8007adc:	080085df 	.word	0x080085df

08007ae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b088      	sub	sp, #32
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b06:	4013      	ands	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d118      	bne.n	8007b42 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d013      	beq.n	8007b42 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8144 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
      }
      return;
 8007b40:	e13e      	b.n	8007dc0 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80e8 	beq.w	8007d1a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4ba0      	ldr	r3, [pc, #640]	; (8007dd0 <HAL_UART_IRQHandler+0x2f0>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4b9f      	ldr	r3, [pc, #636]	; (8007dd4 <HAL_UART_IRQHandler+0x2f4>)
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80dd 	beq.w	8007d1a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_UART_IRQHandler+0xac>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f043 0201 	orr.w	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d010      	beq.n	8007bb8 <HAL_UART_IRQHandler+0xd8>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	f043 0204 	orr.w	r2, r3, #4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d010      	beq.n	8007be4 <HAL_UART_IRQHandler+0x104>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	f043 0202 	orr.w	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d015      	beq.n	8007c1a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4b75      	ldr	r3, [pc, #468]	; (8007dd0 <HAL_UART_IRQHandler+0x2f0>)
 8007bfc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2208      	movs	r2, #8
 8007c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c10:	f043 0208 	orr.w	r2, r3, #8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d011      	beq.n	8007c48 <HAL_UART_IRQHandler+0x168>
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00c      	beq.n	8007c48 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3e:	f043 0220 	orr.w	r2, r3, #32
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80b8 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	d004      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d031      	beq.n	8007d06 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fc40 	bl	8008528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d123      	bne.n	8007cfe <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d013      	beq.n	8007cf6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd2:	4a41      	ldr	r2, [pc, #260]	; (8007dd8 <HAL_UART_IRQHandler+0x2f8>)
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd fb4f 	bl	800537e <HAL_DMA_Abort_IT>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d017      	beq.n	8007d16 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf4:	e00f      	b.n	8007d16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f87a 	bl	8007df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfc:	e00b      	b.n	8007d16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f876 	bl	8007df0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e007      	b.n	8007d16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f872 	bl	8007df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007d14:	e056      	b.n	8007dc4 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d16:	bf00      	nop
    return;
 8007d18:	e054      	b.n	8007dc4 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <HAL_UART_IRQHandler+0x260>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d008      	beq.n	8007d40 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fcc0 	bl	80086be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3e:	e044      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d012      	beq.n	8007d70 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d008      	beq.n	8007d70 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d030      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
    }
    return;
 8007d6e:	e02b      	b.n	8007dc8 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d008      	beq.n	8007d8c <HAL_UART_IRQHandler+0x2ac>
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc80 	bl	800868a <UART_EndTransmit_IT>
    return;
 8007d8a:	e01e      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d008      	beq.n	8007da8 <HAL_UART_IRQHandler+0x2c8>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fca0 	bl	80086e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da6:	e010      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <HAL_UART_IRQHandler+0x2ea>
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	da08      	bge.n	8007dca <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc8a 	bl	80086d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dbe:	e004      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
      return;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
    return;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <HAL_UART_IRQHandler+0x2ea>
    return;
 8007dc8:	bf00      	nop
  }
}
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	10000001 	.word	0x10000001
 8007dd4:	04000120 	.word	0x04000120
 8007dd8:	0800865f 	.word	0x0800865f

08007ddc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	b5b0      	push	{r4, r5, r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4ba2      	ldr	r3, [pc, #648]	; (80080c4 <UART_SetConfig+0x2c0>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	69f9      	ldr	r1, [r7, #28]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a98      	ldr	r2, [pc, #608]	; (80080c8 <UART_SetConfig+0x2c4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e80:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	f023 010f 	bic.w	r1, r3, #15
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a88      	ldr	r2, [pc, #544]	; (80080cc <UART_SetConfig+0x2c8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d11f      	bne.n	8007eee <UART_SetConfig+0xea>
 8007eae:	2003      	movs	r0, #3
 8007eb0:	f7ff fd26 	bl	8007900 <LL_RCC_GetUSARTClockSource>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d816      	bhi.n	8007ee8 <UART_SetConfig+0xe4>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <UART_SetConfig+0xbc>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007edd 	.word	0x08007edd
 8007ec8:	08007ed7 	.word	0x08007ed7
 8007ecc:	08007ee3 	.word	0x08007ee3
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	76fb      	strb	r3, [r7, #27]
 8007ed4:	e038      	b.n	8007f48 <UART_SetConfig+0x144>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	76fb      	strb	r3, [r7, #27]
 8007eda:	e035      	b.n	8007f48 <UART_SetConfig+0x144>
 8007edc:	2304      	movs	r3, #4
 8007ede:	76fb      	strb	r3, [r7, #27]
 8007ee0:	e032      	b.n	8007f48 <UART_SetConfig+0x144>
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	76fb      	strb	r3, [r7, #27]
 8007ee6:	e02f      	b.n	8007f48 <UART_SetConfig+0x144>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	76fb      	strb	r3, [r7, #27]
 8007eec:	e02c      	b.n	8007f48 <UART_SetConfig+0x144>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a75      	ldr	r2, [pc, #468]	; (80080c8 <UART_SetConfig+0x2c4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d125      	bne.n	8007f44 <UART_SetConfig+0x140>
 8007ef8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007efc:	f7ff fd10 	bl	8007920 <LL_RCC_GetLPUARTClockSource>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f06:	d017      	beq.n	8007f38 <UART_SetConfig+0x134>
 8007f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f0c:	d817      	bhi.n	8007f3e <UART_SetConfig+0x13a>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d00b      	beq.n	8007f2c <UART_SetConfig+0x128>
 8007f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f18:	d811      	bhi.n	8007f3e <UART_SetConfig+0x13a>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <UART_SetConfig+0x122>
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d006      	beq.n	8007f32 <UART_SetConfig+0x12e>
 8007f24:	e00b      	b.n	8007f3e <UART_SetConfig+0x13a>
 8007f26:	2300      	movs	r3, #0
 8007f28:	76fb      	strb	r3, [r7, #27]
 8007f2a:	e00d      	b.n	8007f48 <UART_SetConfig+0x144>
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	76fb      	strb	r3, [r7, #27]
 8007f30:	e00a      	b.n	8007f48 <UART_SetConfig+0x144>
 8007f32:	2304      	movs	r3, #4
 8007f34:	76fb      	strb	r3, [r7, #27]
 8007f36:	e007      	b.n	8007f48 <UART_SetConfig+0x144>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	76fb      	strb	r3, [r7, #27]
 8007f3c:	e004      	b.n	8007f48 <UART_SetConfig+0x144>
 8007f3e:	2310      	movs	r3, #16
 8007f40:	76fb      	strb	r3, [r7, #27]
 8007f42:	e001      	b.n	8007f48 <UART_SetConfig+0x144>
 8007f44:	2310      	movs	r3, #16
 8007f46:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5e      	ldr	r2, [pc, #376]	; (80080c8 <UART_SetConfig+0x2c4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	f040 808b 	bne.w	800806a <UART_SetConfig+0x266>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f54:	7efb      	ldrb	r3, [r7, #27]
 8007f56:	2b08      	cmp	r3, #8
 8007f58:	d823      	bhi.n	8007fa2 <UART_SetConfig+0x19e>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x15c>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f8d 	.word	0x08007f8d
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007f93 	.word	0x08007f93
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007fa3 	.word	0x08007fa3
 8007f7c:	08007fa3 	.word	0x08007fa3
 8007f80:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f84:	f7fe fe90 	bl	8006ca8 <HAL_RCC_GetPCLK1Freq>
 8007f88:	6178      	str	r0, [r7, #20]
        break;
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b50      	ldr	r3, [pc, #320]	; (80080d0 <UART_SetConfig+0x2cc>)
 8007f8e:	617b      	str	r3, [r7, #20]
        break;
 8007f90:	e00c      	b.n	8007fac <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fe fe09 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8007f96:	6178      	str	r0, [r7, #20]
        break;
 8007f98:	e008      	b.n	8007fac <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	617b      	str	r3, [r7, #20]
        break;
 8007fa0:	e004      	b.n	8007fac <UART_SetConfig+0x1a8>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	76bb      	strb	r3, [r7, #26]
        break;
 8007faa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 811a 	beq.w	80081e8 <UART_SetConfig+0x3e4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	4a46      	ldr	r2, [pc, #280]	; (80080d4 <UART_SetConfig+0x2d0>)
 8007fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d305      	bcc.n	8007fe4 <UART_SetConfig+0x1e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d902      	bls.n	8007fea <UART_SetConfig+0x1e6>
      {
        ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	76bb      	strb	r3, [r7, #26]
 8007fe8:	e0fe      	b.n	80081e8 <UART_SetConfig+0x3e4>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f04f 0100 	mov.w	r1, #0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	4a37      	ldr	r2, [pc, #220]	; (80080d4 <UART_SetConfig+0x2d0>)
 8007ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	f7f8 f915 	bl	8000230 <__aeabi_uldivmod>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4610      	mov	r0, r2
 800800c:	4619      	mov	r1, r3
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	020b      	lsls	r3, r1, #8
 8008018:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800801c:	0202      	lsls	r2, r0, #8
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	6849      	ldr	r1, [r1, #4]
 8008022:	0849      	lsrs	r1, r1, #1
 8008024:	4608      	mov	r0, r1
 8008026:	f04f 0100 	mov.w	r1, #0
 800802a:	1814      	adds	r4, r2, r0
 800802c:	eb43 0501 	adc.w	r5, r3, r1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	461a      	mov	r2, r3
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 f8f7 	bl	8000230 <__aeabi_uldivmod>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4613      	mov	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008050:	d308      	bcc.n	8008064 <UART_SetConfig+0x260>
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008058:	d204      	bcs.n	8008064 <UART_SetConfig+0x260>
        {
          huart->Instance->BRR = usartdiv;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	60da      	str	r2, [r3, #12]
 8008062:	e0c1      	b.n	80081e8 <UART_SetConfig+0x3e4>
        }
        else
        {
          ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	76bb      	strb	r3, [r7, #26]
 8008068:	e0be      	b.n	80081e8 <UART_SetConfig+0x3e4>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008072:	d16a      	bne.n	800814a <UART_SetConfig+0x346>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008074:	7efb      	ldrb	r3, [r7, #27]
 8008076:	3b01      	subs	r3, #1
 8008078:	2b07      	cmp	r3, #7
 800807a:	d82d      	bhi.n	80080d8 <UART_SetConfig+0x2d4>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <UART_SetConfig+0x280>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080a5 	.word	0x080080a5
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080d9 	.word	0x080080d9
 8008090:	080080b3 	.word	0x080080b3
 8008094:	080080d9 	.word	0x080080d9
 8008098:	080080d9 	.word	0x080080d9
 800809c:	080080d9 	.word	0x080080d9
 80080a0:	080080bb 	.word	0x080080bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080a4:	f7fe fe16 	bl	8006cd4 <HAL_RCC_GetPCLK2Freq>
 80080a8:	6178      	str	r0, [r7, #20]
        break;
 80080aa:	e01a      	b.n	80080e2 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ac:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <UART_SetConfig+0x2cc>)
 80080ae:	617b      	str	r3, [r7, #20]
        break;
 80080b0:	e017      	b.n	80080e2 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b2:	f7fe fd79 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 80080b6:	6178      	str	r0, [r7, #20]
        break;
 80080b8:	e013      	b.n	80080e2 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080be:	617b      	str	r3, [r7, #20]
        break;
 80080c0:	e00f      	b.n	80080e2 <UART_SetConfig+0x2de>
 80080c2:	bf00      	nop
 80080c4:	cfff69f3 	.word	0xcfff69f3
 80080c8:	40008000 	.word	0x40008000
 80080cc:	40013800 	.word	0x40013800
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	0800dcb0 	.word	0x0800dcb0
      default:
        pclk = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	76bb      	strb	r3, [r7, #26]
        break;
 80080e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d07f      	beq.n	80081e8 <UART_SetConfig+0x3e4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	4a48      	ldr	r2, [pc, #288]	; (8008210 <UART_SetConfig+0x40c>)
 80080ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080f2:	461a      	mov	r2, r3
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080fa:	005a      	lsls	r2, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	085b      	lsrs	r3, r3, #1
 8008102:	441a      	add	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	b29b      	uxth	r3, r3
 800810e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2b0f      	cmp	r3, #15
 8008114:	d916      	bls.n	8008144 <UART_SetConfig+0x340>
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811c:	d212      	bcs.n	8008144 <UART_SetConfig+0x340>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	b29b      	uxth	r3, r3
 8008122:	f023 030f 	bic.w	r3, r3, #15
 8008126:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	b29b      	uxth	r3, r3
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	b29a      	uxth	r2, r3
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	4313      	orrs	r3, r2
 8008138:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	89fa      	ldrh	r2, [r7, #14]
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	e051      	b.n	80081e8 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	76bb      	strb	r3, [r7, #26]
 8008148:	e04e      	b.n	80081e8 <UART_SetConfig+0x3e4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800814a:	7efb      	ldrb	r3, [r7, #27]
 800814c:	3b01      	subs	r3, #1
 800814e:	2b07      	cmp	r3, #7
 8008150:	d821      	bhi.n	8008196 <UART_SetConfig+0x392>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <UART_SetConfig+0x354>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	08008179 	.word	0x08008179
 800815c:	08008181 	.word	0x08008181
 8008160:	08008197 	.word	0x08008197
 8008164:	08008187 	.word	0x08008187
 8008168:	08008197 	.word	0x08008197
 800816c:	08008197 	.word	0x08008197
 8008170:	08008197 	.word	0x08008197
 8008174:	0800818f 	.word	0x0800818f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fe fdac 	bl	8006cd4 <HAL_RCC_GetPCLK2Freq>
 800817c:	6178      	str	r0, [r7, #20]
        break;
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008180:	4b24      	ldr	r3, [pc, #144]	; (8008214 <UART_SetConfig+0x410>)
 8008182:	617b      	str	r3, [r7, #20]
        break;
 8008184:	e00c      	b.n	80081a0 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008186:	f7fe fd0f 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 800818a:	6178      	str	r0, [r7, #20]
        break;
 800818c:	e008      	b.n	80081a0 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008192:	617b      	str	r3, [r7, #20]
        break;
 8008194:	e004      	b.n	80081a0 <UART_SetConfig+0x39c>
      default:
        pclk = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	76bb      	strb	r3, [r7, #26]
        break;
 800819e:	bf00      	nop
    }

    if (pclk != 0U)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d020      	beq.n	80081e8 <UART_SetConfig+0x3e4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	4a19      	ldr	r2, [pc, #100]	; (8008210 <UART_SetConfig+0x40c>)
 80081ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b0:	461a      	mov	r2, r3
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	441a      	add	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d908      	bls.n	80081e4 <UART_SetConfig+0x3e0>
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d204      	bcs.n	80081e4 <UART_SetConfig+0x3e0>
      {
        huart->Instance->BRR = usartdiv;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	e001      	b.n	80081e8 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008204:	7ebb      	ldrb	r3, [r7, #26]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bdb0      	pop	{r4, r5, r7, pc}
 800820e:	bf00      	nop
 8008210:	0800dcb0 	.word	0x0800dcb0
 8008214:	00f42400 	.word	0x00f42400

08008218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	430a      	orrs	r2, r1
 8008262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	f003 0308 	and.w	r3, r3, #8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01a      	beq.n	800832e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008316:	d10a      	bne.n	800832e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af02      	add	r7, sp, #8
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800836c:	f7fc fd1a 	bl	8004da4 <HAL_GetTick>
 8008370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0308 	and.w	r3, r3, #8
 800837c:	2b08      	cmp	r3, #8
 800837e:	d10e      	bne.n	800839e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f82c 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e022      	b.n	80083e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d10e      	bne.n	80083ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f816 	bl	80083ec <UART_WaitOnFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e00c      	b.n	80083e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	4613      	mov	r3, r2
 80083fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083fc:	e062      	b.n	80084c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d05e      	beq.n	80084c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008406:	f7fc fccd 	bl	8004da4 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	429a      	cmp	r2, r3
 8008414:	d302      	bcc.n	800841c <UART_WaitOnFlagUntilTimeout+0x30>
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d11d      	bne.n	8008458 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800842a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0201 	bic.w	r2, r2, #1
 800843a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e045      	b.n	80084e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02e      	beq.n	80084c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008474:	d126      	bne.n	80084c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800847e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800848e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e00f      	b.n	80084e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69da      	ldr	r2, [r3, #28]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4013      	ands	r3, r2
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d08d      	beq.n	80083fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008502:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008512:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800853e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800854e:	f023 0301 	bic.w	r3, r3, #1
 8008552:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008562:	bf00      	nop
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	d114      	bne.n	80085b4 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085a0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085b2:	e002      	b.n	80085ba <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7f9 f8af 	bl	8001718 <HAL_UART_TxCpltCallback>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fc03 	bl	8007ddc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b086      	sub	sp, #24
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	2b80      	cmp	r3, #128	; 0x80
 8008608:	d109      	bne.n	800861e <UART_DMAError+0x40>
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b21      	cmp	r3, #33	; 0x21
 800860e:	d106      	bne.n	800861e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2200      	movs	r2, #0
 8008614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008618:	6978      	ldr	r0, [r7, #20]
 800861a:	f7ff ff67 	bl	80084ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d109      	bne.n	8008640 <UART_DMAError+0x62>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b22      	cmp	r3, #34	; 0x22
 8008630:	d106      	bne.n	8008640 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2200      	movs	r2, #0
 8008636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f7ff ff74 	bl	8008528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008646:	f043 0210 	orr.w	r2, r3, #16
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008650:	6978      	ldr	r0, [r7, #20]
 8008652:	f7ff fbcd 	bl	8007df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008656:	bf00      	nop
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fbb7 	bl	8007df0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7f9 f831 	bl	8001718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_UARTEx_DisableFifoMode+0x16>
 800870c:	2302      	movs	r3, #2
 800870e:	e027      	b.n	8008760 <HAL_UARTEx_DisableFifoMode+0x66>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2224      	movs	r2, #36	; 0x24
 800871c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800873e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008780:	2302      	movs	r3, #2
 8008782:	e02d      	b.n	80087e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2224      	movs	r2, #36	; 0x24
 8008790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 0201 	bic.w	r2, r2, #1
 80087aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f84f 	bl	8008864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e02d      	b.n	800885c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2224      	movs	r2, #36	; 0x24
 800880c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0201 	bic.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f811 	bl	8008864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b089      	sub	sp, #36	; 0x24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800886c:	4a2f      	ldr	r2, [pc, #188]	; (800892c <UARTEx_SetNbDataToProcess+0xc8>)
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008876:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800887a:	4a2d      	ldr	r2, [pc, #180]	; (8008930 <UARTEx_SetNbDataToProcess+0xcc>)
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008884:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800888c:	2b00      	cmp	r3, #0
 800888e:	d108      	bne.n	80088a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088a0:	e03d      	b.n	800891e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088a2:	2308      	movs	r3, #8
 80088a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088a6:	2308      	movs	r3, #8
 80088a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	0e5b      	lsrs	r3, r3, #25
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	0f5b      	lsrs	r3, r3, #29
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80088ca:	7fbb      	ldrb	r3, [r7, #30]
 80088cc:	7f3a      	ldrb	r2, [r7, #28]
 80088ce:	f107 0120 	add.w	r1, r7, #32
 80088d2:	440a      	add	r2, r1
 80088d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	7f3a      	ldrb	r2, [r7, #28]
 80088de:	f107 0120 	add.w	r1, r7, #32
 80088e2:	440a      	add	r2, r1
 80088e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80088e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80088f4:	7ffb      	ldrb	r3, [r7, #31]
 80088f6:	7f7a      	ldrb	r2, [r7, #29]
 80088f8:	f107 0120 	add.w	r1, r7, #32
 80088fc:	440a      	add	r2, r1
 80088fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008902:	fb02 f303 	mul.w	r3, r2, r3
 8008906:	7f7a      	ldrb	r2, [r7, #29]
 8008908:	f107 0120 	add.w	r1, r7, #32
 800890c:	440a      	add	r2, r1
 800890e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008912:	fb93 f3f2 	sdiv	r3, r3, r2
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800891e:	bf00      	nop
 8008920:	3724      	adds	r7, #36	; 0x24
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	0800dab4 	.word	0x0800dab4
 8008930:	0800dabc 	.word	0x0800dabc

08008934 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008934:	b5b0      	push	{r4, r5, r7, lr}
 8008936:	b0ce      	sub	sp, #312	; 0x138
 8008938:	af00      	add	r7, sp, #0
 800893a:	4605      	mov	r5, r0
 800893c:	460c      	mov	r4, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	1dfb      	adds	r3, r7, #7
 8008944:	462a      	mov	r2, r5
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	1d3b      	adds	r3, r7, #4
 800894a:	4622      	mov	r2, r4
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	1cbb      	adds	r3, r7, #2
 8008950:	4602      	mov	r2, r0
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	1dbb      	adds	r3, r7, #6
 8008956:	460a      	mov	r2, r1
 8008958:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800895a:	f107 0310 	add.w	r3, r7, #16
 800895e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008962:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008966:	3308      	adds	r3, #8
 8008968:	f107 0210 	add.w	r2, r7, #16
 800896c:	4413      	add	r3, r2
 800896e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008972:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008976:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800897a:	4413      	add	r3, r2
 800897c:	3309      	adds	r3, #9
 800897e:	f107 0210 	add.w	r2, r7, #16
 8008982:	4413      	add	r3, r2
 8008984:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008988:	f107 030f 	add.w	r3, r7, #15
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008990:	2300      	movs	r3, #0
 8008992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800899a:	1dfa      	adds	r2, r7, #7
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089a4:	3301      	adds	r3, #1
 80089a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80089aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089ae:	1d3a      	adds	r2, r7, #4
 80089b0:	8812      	ldrh	r2, [r2, #0]
 80089b2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80089b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ba:	3302      	adds	r3, #2
 80089bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80089c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089c4:	1cba      	adds	r2, r7, #2
 80089c6:	8812      	ldrh	r2, [r2, #0]
 80089c8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80089cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d0:	3302      	adds	r3, #2
 80089d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80089d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089da:	1dba      	adds	r2, r7, #6
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80089e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089e4:	3301      	adds	r3, #1
 80089e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80089ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089ee:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80089f2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80089f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f8:	3301      	adds	r3, #1
 80089fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80089fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a02:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a06:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a16:	3308      	adds	r3, #8
 8008a18:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a1c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 fcc1 	bl	800a3a8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008a26:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008a2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a2e:	4413      	add	r3, r2
 8008a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008a34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a38:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a3c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a42:	3301      	adds	r3, #1
 8008a44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008a48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a52:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 fca6 	bl	800a3a8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008a5c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008a60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a64:	4413      	add	r3, r2
 8008a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008a72:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a78:	3302      	adds	r3, #2
 8008a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008a86:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a96:	2218      	movs	r2, #24
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fc94 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aa0:	233f      	movs	r3, #63	; 0x3f
 8008aa2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008aa6:	2383      	movs	r3, #131	; 0x83
 8008aa8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008aac:	f107 0310 	add.w	r3, r7, #16
 8008ab0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ab8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008abc:	f107 030f 	add.w	r3, r7, #15
 8008ac0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fb3d 	bl	800a150 <hci_send_req>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da01      	bge.n	8008ae0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008adc:	23ff      	movs	r3, #255	; 0xff
 8008ade:	e002      	b.n	8008ae6 <aci_gap_set_discoverable+0x1b2>
  return status;
 8008ae0:	f107 030f 	add.w	r3, r7, #15
 8008ae4:	781b      	ldrb	r3, [r3, #0]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bdb0      	pop	{r4, r5, r7, pc}

08008af0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b0cc      	sub	sp, #304	; 0x130
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4602      	mov	r2, r0
 8008af8:	1dfb      	adds	r3, r7, #7
 8008afa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008afc:	f107 0310 	add.w	r3, r7, #16
 8008b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b04:	f107 030f 	add.w	r3, r7, #15
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b16:	1dfa      	adds	r2, r7, #7
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b20:	3301      	adds	r3, #1
 8008b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b2a:	2218      	movs	r2, #24
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 fc4a 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b34:	233f      	movs	r3, #63	; 0x3f
 8008b36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008b3a:	2385      	movs	r3, #133	; 0x85
 8008b3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b40:	f107 0310 	add.w	r3, r7, #16
 8008b44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b50:	f107 030f 	add.w	r3, r7, #15
 8008b54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 faf3 	bl	800a150 <hci_send_req>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da01      	bge.n	8008b74 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008b70:	23ff      	movs	r3, #255	; 0xff
 8008b72:	e002      	b.n	8008b7a <aci_gap_set_io_capability+0x8a>
  return status;
 8008b74:	f107 030f 	add.w	r3, r7, #15
 8008b78:	781b      	ldrb	r3, [r3, #0]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008b84:	b5b0      	push	{r4, r5, r7, lr}
 8008b86:	b0cc      	sub	sp, #304	; 0x130
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	4610      	mov	r0, r2
 8008b90:	4619      	mov	r1, r3
 8008b92:	1dfb      	adds	r3, r7, #7
 8008b94:	462a      	mov	r2, r5
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	1dbb      	adds	r3, r7, #6
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	1d7b      	adds	r3, r7, #5
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	1d3b      	adds	r3, r7, #4
 8008ba6:	460a      	mov	r2, r1
 8008ba8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008baa:	f107 0310 	add.w	r3, r7, #16
 8008bae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bb2:	f107 030f 	add.w	r3, r7, #15
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc4:	1dfa      	adds	r2, r7, #7
 8008bc6:	7812      	ldrb	r2, [r2, #0]
 8008bc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd8:	1dba      	adds	r2, r7, #6
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008be2:	3301      	adds	r3, #1
 8008be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bec:	1d7a      	adds	r2, r7, #5
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	1d3a      	adds	r2, r7, #4
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008c18:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c1e:	3301      	adds	r3, #1
 8008c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c28:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008c2c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c32:	3301      	adds	r3, #1
 8008c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008c40:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c46:	3301      	adds	r3, #1
 8008c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c50:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008c54:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c66:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008c6a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c70:	3301      	adds	r3, #1
 8008c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c7a:	2218      	movs	r2, #24
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fba2 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c84:	233f      	movs	r3, #63	; 0x3f
 8008c86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008c8a:	2386      	movs	r3, #134	; 0x86
 8008c8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c90:	f107 0310 	add.w	r3, r7, #16
 8008c94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ca0:	f107 030f 	add.w	r3, r7, #15
 8008ca4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 fa4b 	bl	800a150 <hci_send_req>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	da01      	bge.n	8008cc4 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8008cc0:	23ff      	movs	r3, #255	; 0xff
 8008cc2:	e002      	b.n	8008cca <aci_gap_set_authentication_requirement+0x146>
  return status;
 8008cc4:	f107 030f 	add.w	r3, r7, #15
 8008cc8:	781b      	ldrb	r3, [r3, #0]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bdb0      	pop	{r4, r5, r7, pc}

08008cd4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008cd4:	b590      	push	{r4, r7, lr}
 8008cd6:	b0cd      	sub	sp, #308	; 0x134
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	4611      	mov	r1, r2
 8008ce0:	463a      	mov	r2, r7
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	1dfb      	adds	r3, r7, #7
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	1dbb      	adds	r3, r7, #6
 8008cec:	4602      	mov	r2, r0
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	1d7b      	adds	r3, r7, #5
 8008cf2:	460a      	mov	r2, r1
 8008cf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008cf6:	f107 0310 	add.w	r3, r7, #16
 8008cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	2207      	movs	r2, #7
 8008d04:	2100      	movs	r1, #0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f001 fb5e 	bl	800a3c8 <Osal_MemSet>
  int index_input = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d16:	1dfa      	adds	r2, r7, #7
 8008d18:	7812      	ldrb	r2, [r2, #0]
 8008d1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2a:	1dba      	adds	r2, r7, #6
 8008d2c:	7812      	ldrb	r2, [r2, #0]
 8008d2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d34:	3301      	adds	r3, #1
 8008d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3e:	1d7a      	adds	r2, r7, #5
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d48:	3301      	adds	r3, #1
 8008d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d52:	2218      	movs	r2, #24
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 fb36 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d5c:	233f      	movs	r3, #63	; 0x3f
 8008d5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008d62:	238a      	movs	r3, #138	; 0x8a
 8008d64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d68:	f107 0310 	add.w	r3, r7, #16
 8008d6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008d78:	f107 0308 	add.w	r3, r7, #8
 8008d7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008d80:	2307      	movs	r3, #7
 8008d82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f9df 	bl	800a150 <hci_send_req>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	da01      	bge.n	8008d9c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008d98:	23ff      	movs	r3, #255	; 0xff
 8008d9a:	e021      	b.n	8008de0 <aci_gap_init+0x10c>
  if ( resp.Status )
 8008d9c:	f107 0308 	add.w	r3, r7, #8
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <aci_gap_init+0xda>
    return resp.Status;
 8008da6:	f107 0308 	add.w	r3, r7, #8
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	e018      	b.n	8008de0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	463b      	mov	r3, r7
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008dcc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008ddc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd90      	pop	{r4, r7, pc}

08008dea <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b0cc      	sub	sp, #304	; 0x130
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	4602      	mov	r2, r0
 8008df2:	463b      	mov	r3, r7
 8008df4:	6019      	str	r1, [r3, #0]
 8008df6:	1dfb      	adds	r3, r7, #7
 8008df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e02:	f107 030f 	add.w	r3, r7, #15
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e14:	1dfa      	adds	r2, r7, #7
 8008e16:	7812      	ldrb	r2, [r2, #0]
 8008e18:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e28:	1c58      	adds	r0, r3, #1
 8008e2a:	1dfb      	adds	r3, r7, #7
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	463b      	mov	r3, r7
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	f001 fab9 	bl	800a3a8 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008e36:	1dfb      	adds	r3, r7, #7
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e3e:	4413      	add	r3, r2
 8008e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e48:	2218      	movs	r2, #24
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 fabb 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e52:	233f      	movs	r3, #63	; 0x3f
 8008e54:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008e58:	238e      	movs	r3, #142	; 0x8e
 8008e5a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e6e:	f107 030f 	add.w	r3, r7, #15
 8008e72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 f964 	bl	800a150 <hci_send_req>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da01      	bge.n	8008e92 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008e8e:	23ff      	movs	r3, #255	; 0xff
 8008e90:	e002      	b.n	8008e98 <aci_gap_update_adv_data+0xae>
  return status;
 8008e92:	f107 030f 	add.w	r3, r7, #15
 8008e96:	781b      	ldrb	r3, [r3, #0]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b088      	sub	sp, #32
 8008ea6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eac:	f107 0308 	add.w	r3, r7, #8
 8008eb0:	2218      	movs	r2, #24
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 fa87 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eba:	233f      	movs	r3, #63	; 0x3f
 8008ebc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008ebe:	2392      	movs	r3, #146	; 0x92
 8008ec0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ec2:	1dfb      	adds	r3, r7, #7
 8008ec4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 f93d 	bl	800a150 <hci_send_req>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da01      	bge.n	8008ee0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008edc:	23ff      	movs	r3, #255	; 0xff
 8008ede:	e000      	b.n	8008ee2 <aci_gap_configure_whitelist+0x40>
  return status;
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8008eea:	b5b0      	push	{r4, r5, r7, lr}
 8008eec:	b0cc      	sub	sp, #304	; 0x130
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	1dbb      	adds	r3, r7, #6
 8008efa:	462a      	mov	r2, r5
 8008efc:	801a      	strh	r2, [r3, #0]
 8008efe:	1d3b      	adds	r3, r7, #4
 8008f00:	4622      	mov	r2, r4
 8008f02:	801a      	strh	r2, [r3, #0]
 8008f04:	1cfb      	adds	r3, r7, #3
 8008f06:	4602      	mov	r2, r0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	1cbb      	adds	r3, r7, #2
 8008f0c:	460a      	mov	r2, r1
 8008f0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f18:	f107 030f 	add.w	r3, r7, #15
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2a:	1dba      	adds	r2, r7, #6
 8008f2c:	8812      	ldrh	r2, [r2, #0]
 8008f2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f34:	3302      	adds	r3, #2
 8008f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8008f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3e:	1d3a      	adds	r2, r7, #4
 8008f40:	8812      	ldrh	r2, [r2, #0]
 8008f42:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f48:	3302      	adds	r3, #2
 8008f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f52:	1cfa      	adds	r2, r7, #3
 8008f54:	7812      	ldrb	r2, [r2, #0]
 8008f56:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	1cba      	adds	r2, r7, #2
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f70:	3301      	adds	r3, #1
 8008f72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f7a:	2218      	movs	r2, #24
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fa22 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f84:	233f      	movs	r3, #63	; 0x3f
 8008f86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8008f8a:	2397      	movs	r3, #151	; 0x97
 8008f8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008f90:	230f      	movs	r3, #15
 8008f92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008fa6:	f107 030f 	add.w	r3, r7, #15
 8008faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 f8c8 	bl	800a150 <hci_send_req>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da01      	bge.n	8008fca <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 8008fc6:	23ff      	movs	r3, #255	; 0xff
 8008fc8:	e002      	b.n	8008fd0 <aci_gap_start_general_discovery_proc+0xe6>
  return status;
 8008fca:	f107 030f 	add.w	r3, r7, #15
 8008fce:	781b      	ldrb	r3, [r3, #0]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bdb0      	pop	{r4, r5, r7, pc}

08008fda <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008fda:	b590      	push	{r4, r7, lr}
 8008fdc:	b0cf      	sub	sp, #316	; 0x13c
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	1d3a      	adds	r2, r7, #4
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	f107 030e 	add.w	r3, r7, #14
 8008fee:	4622      	mov	r2, r4
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	f107 030c 	add.w	r3, r7, #12
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	f107 030b 	add.w	r3, r7, #11
 8008ffe:	460a      	mov	r2, r1
 8009000:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800900a:	f107 0317 	add.w	r3, r7, #23
 800900e:	2200      	movs	r2, #0
 8009010:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8009018:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800901c:	f107 020e 	add.w	r2, r7, #14
 8009020:	8812      	ldrh	r2, [r2, #0]
 8009022:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009024:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009028:	3302      	adds	r3, #2
 800902a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800902e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009032:	f107 020c 	add.w	r2, r7, #12
 8009036:	8812      	ldrh	r2, [r2, #0]
 8009038:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800903a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800903e:	3302      	adds	r3, #2
 8009040:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8009044:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009048:	f107 020b 	add.w	r2, r7, #11
 800904c:	7812      	ldrb	r2, [r2, #0]
 800904e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009050:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009054:	3301      	adds	r3, #1
 8009056:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800905a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800905e:	1d58      	adds	r0, r3, #5
 8009060:	1d3b      	adds	r3, r7, #4
 8009062:	2206      	movs	r2, #6
 8009064:	6819      	ldr	r1, [r3, #0]
 8009066:	f001 f99f 	bl	800a3a8 <Osal_MemCpy>
  index_input += 6;
 800906a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800906e:	3306      	adds	r3, #6
 8009070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8009074:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009078:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800907c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800907e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009082:	3301      	adds	r3, #1
 8009084:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009088:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800908c:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8009090:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009092:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009096:	3302      	adds	r3, #2
 8009098:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800909c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090a0:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80090a4:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80090a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090aa:	3302      	adds	r3, #2
 80090ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 80090b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090b4:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80090b8:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80090ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090be:	3302      	adds	r3, #2
 80090c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 80090c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090c8:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80090cc:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80090ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090d2:	3302      	adds	r3, #2
 80090d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 80090d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090dc:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80090e0:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 80090e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090e6:	3302      	adds	r3, #2
 80090e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 80090ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80090f4:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80090f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090fa:	3302      	adds	r3, #2
 80090fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009100:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009104:	2218      	movs	r2, #24
 8009106:	2100      	movs	r1, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f95d 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800910e:	233f      	movs	r3, #63	; 0x3f
 8009110:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8009114:	239c      	movs	r3, #156	; 0x9c
 8009116:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800911a:	230f      	movs	r3, #15
 800911c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009120:	f107 0318 	add.w	r3, r7, #24
 8009124:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800912c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009130:	f107 0317 	add.w	r3, r7, #23
 8009134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009138:	2301      	movs	r3, #1
 800913a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800913e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f001 f803 	bl	800a150 <hci_send_req>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	da01      	bge.n	8009154 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 8009150:	23ff      	movs	r3, #255	; 0xff
 8009152:	e002      	b.n	800915a <aci_gap_create_connection+0x180>
  return status;
 8009154:	f107 0317 	add.w	r3, r7, #23
 8009158:	781b      	ldrb	r3, [r3, #0]
}
 800915a:	4618      	mov	r0, r3
 800915c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009160:	46bd      	mov	sp, r7
 8009162:	bd90      	pop	{r4, r7, pc}

08009164 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800916e:	f107 0308 	add.w	r3, r7, #8
 8009172:	2218      	movs	r2, #24
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f001 f926 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800917c:	233f      	movs	r3, #63	; 0x3f
 800917e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009180:	f240 1301 	movw	r3, #257	; 0x101
 8009184:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009186:	1dfb      	adds	r3, r7, #7
 8009188:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800918a:	2301      	movs	r3, #1
 800918c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f000 ffdb 	bl	800a150 <hci_send_req>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	da01      	bge.n	80091a4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80091a0:	23ff      	movs	r3, #255	; 0xff
 80091a2:	e000      	b.n	80091a6 <aci_gatt_init+0x42>
  return status;
 80091a4:	79fb      	ldrb	r3, [r7, #7]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80091ae:	b590      	push	{r4, r7, lr}
 80091b0:	b0cf      	sub	sp, #316	; 0x13c
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	4604      	mov	r4, r0
 80091b6:	4638      	mov	r0, r7
 80091b8:	6001      	str	r1, [r0, #0]
 80091ba:	4610      	mov	r0, r2
 80091bc:	4619      	mov	r1, r3
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	4622      	mov	r2, r4
 80091c2:	701a      	strb	r2, [r3, #0]
 80091c4:	1dbb      	adds	r3, r7, #6
 80091c6:	4602      	mov	r2, r0
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	1d7b      	adds	r3, r7, #5
 80091cc:	460a      	mov	r2, r1
 80091ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80091d0:	f107 0310 	add.w	r3, r7, #16
 80091d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80091d8:	1dfb      	adds	r3, r7, #7
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d007      	beq.n	80091f0 <aci_gatt_add_service+0x42>
 80091e0:	1dfb      	adds	r3, r7, #7
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d101      	bne.n	80091ec <aci_gatt_add_service+0x3e>
 80091e8:	2311      	movs	r3, #17
 80091ea:	e002      	b.n	80091f2 <aci_gatt_add_service+0x44>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <aci_gatt_add_service+0x44>
 80091f0:	2303      	movs	r3, #3
 80091f2:	f107 0210 	add.w	r2, r7, #16
 80091f6:	4413      	add	r3, r2
 80091f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	2203      	movs	r2, #3
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f8df 	bl	800a3c8 <Osal_MemSet>
  int index_input = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009210:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009214:	1dfa      	adds	r2, r7, #7
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800921a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800921e:	3301      	adds	r3, #1
 8009220:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d002      	beq.n	8009232 <aci_gatt_add_service+0x84>
 800922c:	2b02      	cmp	r3, #2
 800922e:	d004      	beq.n	800923a <aci_gatt_add_service+0x8c>
 8009230:	e007      	b.n	8009242 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8009232:	2302      	movs	r3, #2
 8009234:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009238:	e005      	b.n	8009246 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800923a:	2310      	movs	r3, #16
 800923c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009240:	e001      	b.n	8009246 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8009242:	2347      	movs	r3, #71	; 0x47
 8009244:	e05d      	b.n	8009302 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800924a:	1c58      	adds	r0, r3, #1
 800924c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009250:	463b      	mov	r3, r7
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	f001 f8a8 	bl	800a3a8 <Osal_MemCpy>
    index_input += size;
 8009258:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800925c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009260:	4413      	add	r3, r2
 8009262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926a:	1dba      	adds	r2, r7, #6
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009274:	3301      	adds	r3, #1
 8009276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800927a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927e:	1d7a      	adds	r2, r7, #5
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009288:	3301      	adds	r3, #1
 800928a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800928e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009292:	2218      	movs	r2, #24
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f001 f896 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800929c:	233f      	movs	r3, #63	; 0x3f
 800929e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80092a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80092a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092aa:	f107 0310 	add.w	r3, r7, #16
 80092ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80092ba:	f107 030c 	add.w	r3, r7, #12
 80092be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80092c2:	2303      	movs	r3, #3
 80092c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092cc:	2100      	movs	r1, #0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 ff3e 	bl	800a150 <hci_send_req>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	da01      	bge.n	80092de <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80092da:	23ff      	movs	r3, #255	; 0xff
 80092dc:	e011      	b.n	8009302 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <aci_gatt_add_service+0x142>
    return resp.Status;
 80092e8:	f107 030c 	add.w	r3, r7, #12
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	e008      	b.n	8009302 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80092f0:	f107 030c 	add.w	r3, r7, #12
 80092f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80092fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009308:	46bd      	mov	sp, r7
 800930a:	bd90      	pop	{r4, r7, pc}

0800930c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800930c:	b590      	push	{r4, r7, lr}
 800930e:	b0d1      	sub	sp, #324	; 0x144
 8009310:	af00      	add	r7, sp, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	f107 0108 	add.w	r1, r7, #8
 800931a:	600a      	str	r2, [r1, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	f107 030e 	add.w	r3, r7, #14
 8009322:	4622      	mov	r2, r4
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	f107 030d 	add.w	r3, r7, #13
 800932a:	4602      	mov	r2, r0
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	1dbb      	adds	r3, r7, #6
 8009330:	460a      	mov	r2, r1
 8009332:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009334:	f107 0318 	add.w	r3, r7, #24
 8009338:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800933c:	f107 030d 	add.w	r3, r7, #13
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d008      	beq.n	8009358 <aci_gatt_add_char+0x4c>
 8009346:	f107 030d 	add.w	r3, r7, #13
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d101      	bne.n	8009354 <aci_gatt_add_char+0x48>
 8009350:	2313      	movs	r3, #19
 8009352:	e002      	b.n	800935a <aci_gatt_add_char+0x4e>
 8009354:	2303      	movs	r3, #3
 8009356:	e000      	b.n	800935a <aci_gatt_add_char+0x4e>
 8009358:	2305      	movs	r3, #5
 800935a:	f107 0218 	add.w	r2, r7, #24
 800935e:	4413      	add	r3, r2
 8009360:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	2203      	movs	r2, #3
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f82b 	bl	800a3c8 <Osal_MemSet>
  int index_input = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009378:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800937c:	f107 020e 	add.w	r2, r7, #14
 8009380:	8812      	ldrh	r2, [r2, #0]
 8009382:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009384:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009388:	3302      	adds	r3, #2
 800938a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800938e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009392:	f107 020d 	add.w	r2, r7, #13
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800939a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80093a4:	f107 030d 	add.w	r3, r7, #13
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d002      	beq.n	80093b4 <aci_gatt_add_char+0xa8>
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d004      	beq.n	80093bc <aci_gatt_add_char+0xb0>
 80093b2:	e007      	b.n	80093c4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80093b4:	2302      	movs	r3, #2
 80093b6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80093ba:	e005      	b.n	80093c8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80093bc:	2310      	movs	r3, #16
 80093be:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80093c2:	e001      	b.n	80093c8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80093c4:	2347      	movs	r3, #71	; 0x47
 80093c6:	e086      	b.n	80094d6 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80093c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80093cc:	1cd8      	adds	r0, r3, #3
 80093ce:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80093d2:	f107 0308 	add.w	r3, r7, #8
 80093d6:	6819      	ldr	r1, [r3, #0]
 80093d8:	f000 ffe6 	bl	800a3a8 <Osal_MemCpy>
    index_input += size;
 80093dc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80093e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80093e4:	4413      	add	r3, r2
 80093e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80093ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093ee:	1dba      	adds	r2, r7, #6
 80093f0:	8812      	ldrh	r2, [r2, #0]
 80093f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80093f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093f8:	3302      	adds	r3, #2
 80093fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80093fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009402:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009406:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009408:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800940c:	3301      	adds	r3, #1
 800940e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009416:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800941a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800941c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009420:	3301      	adds	r3, #1
 8009422:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800942a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800942e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800943a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800943e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009442:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009444:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009448:	3301      	adds	r3, #1
 800944a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800944e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009452:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009456:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009458:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800945c:	3301      	adds	r3, #1
 800945e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009466:	2218      	movs	r2, #24
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f000 ffac 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009470:	233f      	movs	r3, #63	; 0x3f
 8009472:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009476:	f44f 7382 	mov.w	r3, #260	; 0x104
 800947a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800947e:	f107 0318 	add.w	r3, r7, #24
 8009482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009486:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800948a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800948e:	f107 0314 	add.w	r3, r7, #20
 8009492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009496:	2303      	movs	r3, #3
 8009498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800949c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fe54 	bl	800a150 <hci_send_req>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da01      	bge.n	80094b2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80094ae:	23ff      	movs	r3, #255	; 0xff
 80094b0:	e011      	b.n	80094d6 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80094b2:	f107 0314 	add.w	r3, r7, #20
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	e008      	b.n	80094d6 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80094c4:	f107 0314 	add.w	r3, r7, #20
 80094c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80094d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd90      	pop	{r4, r7, pc}

080094e0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80094e0:	b5b0      	push	{r4, r5, r7, lr}
 80094e2:	b0cc      	sub	sp, #304	; 0x130
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4605      	mov	r5, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	4610      	mov	r0, r2
 80094ec:	4619      	mov	r1, r3
 80094ee:	1dbb      	adds	r3, r7, #6
 80094f0:	462a      	mov	r2, r5
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	1d3b      	adds	r3, r7, #4
 80094f6:	4622      	mov	r2, r4
 80094f8:	801a      	strh	r2, [r3, #0]
 80094fa:	1cfb      	adds	r3, r7, #3
 80094fc:	4602      	mov	r2, r0
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	1cbb      	adds	r3, r7, #2
 8009502:	460a      	mov	r2, r1
 8009504:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009506:	f107 0310 	add.w	r3, r7, #16
 800950a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800950e:	f107 030f 	add.w	r3, r7, #15
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800951c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009520:	1dba      	adds	r2, r7, #6
 8009522:	8812      	ldrh	r2, [r2, #0]
 8009524:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800952a:	3302      	adds	r3, #2
 800952c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009534:	1d3a      	adds	r2, r7, #4
 8009536:	8812      	ldrh	r2, [r2, #0]
 8009538:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800953a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800953e:	3302      	adds	r3, #2
 8009540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009548:	1cfa      	adds	r2, r7, #3
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800954e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955c:	1cba      	adds	r2, r7, #2
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009566:	3301      	adds	r3, #1
 8009568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800956c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009570:	1d98      	adds	r0, r3, #6
 8009572:	1cbb      	adds	r3, r7, #2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800957c:	f000 ff14 	bl	800a3a8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009580:	1cbb      	adds	r3, r7, #2
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009588:	4413      	add	r3, r2
 800958a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800958e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009592:	2218      	movs	r2, #24
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f000 ff16 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800959c:	233f      	movs	r3, #63	; 0x3f
 800959e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80095a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80095a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095ba:	f107 030f 	add.w	r3, r7, #15
 80095be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095cc:	2100      	movs	r1, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fdbe 	bl	800a150 <hci_send_req>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	da01      	bge.n	80095de <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80095da:	23ff      	movs	r3, #255	; 0xff
 80095dc:	e002      	b.n	80095e4 <aci_gatt_update_char_value+0x104>
  return status;
 80095de:	f107 030f 	add.w	r3, r7, #15
 80095e2:	781b      	ldrb	r3, [r3, #0]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bdb0      	pop	{r4, r5, r7, pc}

080095ee <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b0cc      	sub	sp, #304	; 0x130
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	4602      	mov	r2, r0
 80095f6:	1dbb      	adds	r3, r7, #6
 80095f8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80095fa:	f107 0310 	add.w	r3, r7, #16
 80095fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009602:	f107 030f 	add.w	r3, r7, #15
 8009606:	2200      	movs	r2, #0
 8009608:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009614:	1dba      	adds	r2, r7, #6
 8009616:	8812      	ldrh	r2, [r2, #0]
 8009618:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800961a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800961e:	3302      	adds	r3, #2
 8009620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009628:	2218      	movs	r2, #24
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fecb 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009632:	233f      	movs	r3, #63	; 0x3f
 8009634:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8009638:	f44f 7389 	mov.w	r3, #274	; 0x112
 800963c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009640:	230f      	movs	r3, #15
 8009642:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800964e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009652:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009656:	f107 030f 	add.w	r3, r7, #15
 800965a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800965e:	2301      	movs	r3, #1
 8009660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009668:	2100      	movs	r1, #0
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fd70 	bl	800a150 <hci_send_req>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	da01      	bge.n	800967a <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8009676:	23ff      	movs	r3, #255	; 0xff
 8009678:	e002      	b.n	8009680 <aci_gatt_disc_all_primary_services+0x92>
  return status;
 800967a:	f107 030f 	add.w	r3, r7, #15
 800967e:	781b      	ldrb	r3, [r3, #0]
}
 8009680:	4618      	mov	r0, r3
 8009682:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800968a:	b590      	push	{r4, r7, lr}
 800968c:	b0cd      	sub	sp, #308	; 0x134
 800968e:	af00      	add	r7, sp, #0
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	1dbb      	adds	r3, r7, #6
 8009698:	4622      	mov	r2, r4
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	1d3b      	adds	r3, r7, #4
 800969e:	4602      	mov	r2, r0
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	1cbb      	adds	r3, r7, #2
 80096a4:	460a      	mov	r2, r1
 80096a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096b0:	f107 030f 	add.w	r3, r7, #15
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80096be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c2:	1dba      	adds	r2, r7, #6
 80096c4:	8812      	ldrh	r2, [r2, #0]
 80096c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80096c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096cc:	3302      	adds	r3, #2
 80096ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80096d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d6:	1d3a      	adds	r2, r7, #4
 80096d8:	8812      	ldrh	r2, [r2, #0]
 80096da:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80096dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096e0:	3302      	adds	r3, #2
 80096e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80096e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ea:	1cba      	adds	r2, r7, #2
 80096ec:	8812      	ldrh	r2, [r2, #0]
 80096ee:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80096f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096f4:	3302      	adds	r3, #2
 80096f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096fe:	2218      	movs	r2, #24
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fe60 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009708:	233f      	movs	r3, #63	; 0x3f
 800970a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800970e:	f240 1315 	movw	r3, #277	; 0x115
 8009712:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009716:	230f      	movs	r3, #15
 8009718:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800971c:	f107 0310 	add.w	r3, r7, #16
 8009720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009728:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800972c:	f107 030f 	add.w	r3, r7, #15
 8009730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800973a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800973e:	2100      	movs	r1, #0
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fd05 	bl	800a150 <hci_send_req>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	da01      	bge.n	8009750 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800974c:	23ff      	movs	r3, #255	; 0xff
 800974e:	e002      	b.n	8009756 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 8009750:	f107 030f 	add.w	r3, r7, #15
 8009754:	781b      	ldrb	r3, [r3, #0]
}
 8009756:	4618      	mov	r0, r3
 8009758:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800975c:	46bd      	mov	sp, r7
 800975e:	bd90      	pop	{r4, r7, pc}

08009760 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b0cd      	sub	sp, #308	; 0x134
 8009764:	af00      	add	r7, sp, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	1dbb      	adds	r3, r7, #6
 800976e:	4622      	mov	r2, r4
 8009770:	801a      	strh	r2, [r3, #0]
 8009772:	1d3b      	adds	r3, r7, #4
 8009774:	4602      	mov	r2, r0
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	1cbb      	adds	r3, r7, #2
 800977a:	460a      	mov	r2, r1
 800977c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800977e:	f107 0310 	add.w	r3, r7, #16
 8009782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009786:	f107 030f 	add.w	r3, r7, #15
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	1dba      	adds	r2, r7, #6
 800979a:	8812      	ldrh	r2, [r2, #0]
 800979c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800979e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097a2:	3302      	adds	r3, #2
 80097a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80097a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ac:	1d3a      	adds	r2, r7, #4
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80097b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b6:	3302      	adds	r3, #2
 80097b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80097bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c0:	1cba      	adds	r2, r7, #2
 80097c2:	8812      	ldrh	r2, [r2, #0]
 80097c4:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80097c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ca:	3302      	adds	r3, #2
 80097cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097d4:	2218      	movs	r2, #24
 80097d6:	2100      	movs	r1, #0
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fdf5 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097de:	233f      	movs	r3, #63	; 0x3f
 80097e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80097e4:	f240 1317 	movw	r3, #279	; 0x117
 80097e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80097ec:	230f      	movs	r3, #15
 80097ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80097f2:	f107 0310 	add.w	r3, r7, #16
 80097f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009802:	f107 030f 	add.w	r3, r7, #15
 8009806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800980a:	2301      	movs	r3, #1
 800980c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009814:	2100      	movs	r1, #0
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fc9a 	bl	800a150 <hci_send_req>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	da01      	bge.n	8009826 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8009822:	23ff      	movs	r3, #255	; 0xff
 8009824:	e002      	b.n	800982c <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 8009826:	f107 030f 	add.w	r3, r7, #15
 800982a:	781b      	ldrb	r3, [r3, #0]
}
 800982c:	4618      	mov	r0, r3
 800982e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}

08009836 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8009836:	b590      	push	{r4, r7, lr}
 8009838:	b0cf      	sub	sp, #316	; 0x13c
 800983a:	af00      	add	r7, sp, #0
 800983c:	4604      	mov	r4, r0
 800983e:	4608      	mov	r0, r1
 8009840:	4611      	mov	r1, r2
 8009842:	1d3a      	adds	r2, r7, #4
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	f107 030e 	add.w	r3, r7, #14
 800984a:	4622      	mov	r2, r4
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	f107 030c 	add.w	r3, r7, #12
 8009852:	4602      	mov	r2, r0
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	f107 030b 	add.w	r3, r7, #11
 800985a:	460a      	mov	r2, r1
 800985c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800985e:	f107 0318 	add.w	r3, r7, #24
 8009862:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8009866:	f107 0317 	add.w	r3, r7, #23
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009874:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009878:	f107 020e 	add.w	r2, r7, #14
 800987c:	8812      	ldrh	r2, [r2, #0]
 800987e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009884:	3302      	adds	r3, #2
 8009886:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800988a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800988e:	f107 020c 	add.w	r2, r7, #12
 8009892:	8812      	ldrh	r2, [r2, #0]
 8009894:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009896:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800989a:	3302      	adds	r3, #2
 800989c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80098a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098a4:	f107 020b 	add.w	r2, r7, #11
 80098a8:	7812      	ldrb	r2, [r2, #0]
 80098aa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80098ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098b0:	3301      	adds	r3, #1
 80098b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80098b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098ba:	1d58      	adds	r0, r3, #5
 80098bc:	f107 030b 	add.w	r3, r7, #11
 80098c0:	781a      	ldrb	r2, [r3, #0]
 80098c2:	1d3b      	adds	r3, r7, #4
 80098c4:	6819      	ldr	r1, [r3, #0]
 80098c6:	f000 fd6f 	bl	800a3a8 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80098ca:	f107 030b 	add.w	r3, r7, #11
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80098d4:	4413      	add	r3, r2
 80098d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80098de:	2218      	movs	r2, #24
 80098e0:	2100      	movs	r1, #0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fd70 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098e8:	233f      	movs	r3, #63	; 0x3f
 80098ea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80098ee:	f240 1321 	movw	r3, #289	; 0x121
 80098f2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80098f6:	230f      	movs	r3, #15
 80098f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80098fc:	f107 0318 	add.w	r3, r7, #24
 8009900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009904:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009908:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800990c:	f107 0317 	add.w	r3, r7, #23
 8009910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009914:	2301      	movs	r3, #1
 8009916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800991a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fc15 	bl	800a150 <hci_send_req>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	da01      	bge.n	8009930 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800992c:	23ff      	movs	r3, #255	; 0xff
 800992e:	e002      	b.n	8009936 <aci_gatt_write_char_desc+0x100>
  return status;
 8009930:	f107 0317 	add.w	r3, r7, #23
 8009934:	781b      	ldrb	r3, [r3, #0]
}
 8009936:	4618      	mov	r0, r3
 8009938:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800993c:	46bd      	mov	sp, r7
 800993e:	bd90      	pop	{r4, r7, pc}

08009940 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b0cf      	sub	sp, #316	; 0x13c
 8009944:	af00      	add	r7, sp, #0
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	4611      	mov	r1, r2
 800994c:	1d3a      	adds	r2, r7, #4
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	f107 030e 	add.w	r3, r7, #14
 8009954:	4622      	mov	r2, r4
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4602      	mov	r2, r0
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	f107 030b 	add.w	r3, r7, #11
 8009964:	460a      	mov	r2, r1
 8009966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8009968:	f107 0318 	add.w	r3, r7, #24
 800996c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8009970:	f107 0317 	add.w	r3, r7, #23
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800997e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009982:	f107 020e 	add.w	r2, r7, #14
 8009986:	8812      	ldrh	r2, [r2, #0]
 8009988:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800998a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800998e:	3302      	adds	r3, #2
 8009990:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8009994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009998:	f107 020c 	add.w	r2, r7, #12
 800999c:	8812      	ldrh	r2, [r2, #0]
 800999e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80099a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099a4:	3302      	adds	r3, #2
 80099a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80099aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099ae:	f107 020b 	add.w	r2, r7, #11
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80099b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099ba:	3301      	adds	r3, #1
 80099bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80099c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099c4:	1d58      	adds	r0, r3, #5
 80099c6:	f107 030b 	add.w	r3, r7, #11
 80099ca:	781a      	ldrb	r2, [r3, #0]
 80099cc:	1d3b      	adds	r3, r7, #4
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	f000 fcea 	bl	800a3a8 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80099d4:	f107 030b 	add.w	r3, r7, #11
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80099de:	4413      	add	r3, r2
 80099e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099e8:	2218      	movs	r2, #24
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 fceb 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099f2:	233f      	movs	r3, #63	; 0x3f
 80099f4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 80099f8:	f240 1323 	movw	r3, #291	; 0x123
 80099fc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009a00:	f107 0318 	add.w	r3, r7, #24
 8009a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009a10:	f107 0317 	add.w	r3, r7, #23
 8009a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a22:	2100      	movs	r1, #0
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fb93 	bl	800a150 <hci_send_req>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	da01      	bge.n	8009a34 <aci_gatt_write_without_resp+0xf4>
    return BLE_STATUS_TIMEOUT;
 8009a30:	23ff      	movs	r3, #255	; 0xff
 8009a32:	e002      	b.n	8009a3a <aci_gatt_write_without_resp+0xfa>
  return status;
 8009a34:	f107 0317 	add.w	r3, r7, #23
 8009a38:	781b      	ldrb	r3, [r3, #0]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd90      	pop	{r4, r7, pc}

08009a44 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b0cc      	sub	sp, #304	; 0x130
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	1dfb      	adds	r3, r7, #7
 8009a50:	4602      	mov	r2, r0
 8009a52:	701a      	strb	r2, [r3, #0]
 8009a54:	1dbb      	adds	r3, r7, #6
 8009a56:	460a      	mov	r2, r1
 8009a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009a5a:	f107 0310 	add.w	r3, r7, #16
 8009a5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009a62:	f107 030f 	add.w	r3, r7, #15
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a74:	1dfa      	adds	r2, r7, #7
 8009a76:	7812      	ldrb	r2, [r2, #0]
 8009a78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a7e:	3301      	adds	r3, #1
 8009a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a88:	1dba      	adds	r2, r7, #6
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a92:	3301      	adds	r3, #1
 8009a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9c:	1c98      	adds	r0, r3, #2
 8009a9e:	1dbb      	adds	r3, r7, #6
 8009aa0:	781a      	ldrb	r2, [r3, #0]
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	f000 fc7f 	bl	800a3a8 <Osal_MemCpy>
  index_input += Length;
 8009aaa:	1dbb      	adds	r3, r7, #6
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009abc:	2218      	movs	r2, #24
 8009abe:	2100      	movs	r1, #0
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fc81 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ac6:	233f      	movs	r3, #63	; 0x3f
 8009ac8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009acc:	230c      	movs	r3, #12
 8009ace:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ad2:	f107 0310 	add.w	r3, r7, #16
 8009ad6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ade:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ae2:	f107 030f 	add.w	r3, r7, #15
 8009ae6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fb2a 	bl	800a150 <hci_send_req>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	da01      	bge.n	8009b06 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009b02:	23ff      	movs	r3, #255	; 0xff
 8009b04:	e002      	b.n	8009b0c <aci_hal_write_config_data+0xc8>
  return status;
 8009b06:	f107 030f 	add.w	r3, r7, #15
 8009b0a:	781b      	ldrb	r3, [r3, #0]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b0cc      	sub	sp, #304	; 0x130
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	1dfb      	adds	r3, r7, #7
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	1dbb      	adds	r3, r7, #6
 8009b24:	460a      	mov	r2, r1
 8009b26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b30:	f107 030f 	add.w	r3, r7, #15
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b42:	1dfa      	adds	r2, r7, #7
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b56:	1dba      	adds	r2, r7, #6
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b6a:	2218      	movs	r2, #24
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fc2a 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b74:	233f      	movs	r3, #63	; 0x3f
 8009b76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009b7a:	230f      	movs	r3, #15
 8009b7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b80:	f107 0310 	add.w	r3, r7, #16
 8009b84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b90:	f107 030f 	add.w	r3, r7, #15
 8009b94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 fad3 	bl	800a150 <hci_send_req>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da01      	bge.n	8009bb4 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009bb0:	23ff      	movs	r3, #255	; 0xff
 8009bb2:	e002      	b.n	8009bba <aci_hal_set_tx_power_level+0xa4>
  return status;
 8009bb4:	f107 030f 	add.w	r3, r7, #15
 8009bb8:	781b      	ldrb	r3, [r3, #0]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bce:	f107 0308 	add.w	r3, r7, #8
 8009bd2:	2218      	movs	r2, #24
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fbf6 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x03;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009be0:	2303      	movs	r3, #3
 8009be2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009be4:	1dfb      	adds	r3, r7, #7
 8009be6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009be8:	2301      	movs	r3, #1
 8009bea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bec:	f107 0308 	add.w	r3, r7, #8
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 faac 	bl	800a150 <hci_send_req>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da01      	bge.n	8009c02 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009bfe:	23ff      	movs	r3, #255	; 0xff
 8009c00:	e000      	b.n	8009c04 <hci_reset+0x40>
  return status;
 8009c02:	79fb      	ldrb	r3, [r7, #7]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8009c0c:	b5b0      	push	{r4, r5, r7, lr}
 8009c0e:	b0cc      	sub	sp, #304	; 0x130
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4605      	mov	r5, r0
 8009c14:	460c      	mov	r4, r1
 8009c16:	4610      	mov	r0, r2
 8009c18:	4619      	mov	r1, r3
 8009c1a:	1dbb      	adds	r3, r7, #6
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	1d3b      	adds	r3, r7, #4
 8009c22:	4622      	mov	r2, r4
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	1cbb      	adds	r3, r7, #2
 8009c28:	4602      	mov	r2, r0
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	460a      	mov	r2, r1
 8009c30:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c3a:	f107 030f 	add.w	r3, r7, #15
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4c:	1dba      	adds	r2, r7, #6
 8009c4e:	8812      	ldrh	r2, [r2, #0]
 8009c50:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c56:	3302      	adds	r3, #2
 8009c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c60:	1d3a      	adds	r2, r7, #4
 8009c62:	8812      	ldrh	r2, [r2, #0]
 8009c64:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c74:	1cba      	adds	r2, r7, #2
 8009c76:	8812      	ldrh	r2, [r2, #0]
 8009c78:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c7e:	3302      	adds	r3, #2
 8009c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8009c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c88:	463a      	mov	r2, r7
 8009c8a:	8812      	ldrh	r2, [r2, #0]
 8009c8c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8009c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c92:	3302      	adds	r3, #2
 8009c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8009c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009ca0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ca6:	3302      	adds	r3, #2
 8009ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8009cb4:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8009cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cba:	3302      	adds	r3, #2
 8009cbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8009cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc4:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8009cc8:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cce:	3302      	adds	r3, #2
 8009cd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8009cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009cdc:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8009cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8009ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cec:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009cf0:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8009cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d00:	2218      	movs	r2, #24
 8009d02:	2100      	movs	r1, #0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fb5f 	bl	800a3c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d0a:	233f      	movs	r3, #63	; 0x3f
 8009d0c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8009d10:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8009d14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d18:	f107 0310 	add.w	r3, r7, #16
 8009d1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d28:	f107 030f 	add.w	r3, r7, #15
 8009d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fa07 	bl	800a150 <hci_send_req>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da01      	bge.n	8009d4c <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 8009d48:	23ff      	movs	r3, #255	; 0xff
 8009d4a:	e002      	b.n	8009d52 <aci_l2cap_connection_parameter_update_resp+0x146>
  return status;
 8009d4c:	f107 030f 	add.w	r3, r7, #15
 8009d50:	781b      	ldrb	r3, [r3, #0]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bdb0      	pop	{r4, r5, r7, pc}

08009d5c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d62:	f3ef 8310 	mrs	r3, PRIMASK
 8009d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d68:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009d6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d6c:	b672      	cpsid	i
}
 8009d6e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009d70:	1cbb      	adds	r3, r7, #2
 8009d72:	4619      	mov	r1, r3
 8009d74:	4812      	ldr	r0, [pc, #72]	; (8009dc0 <DbgTrace_TxCpltCallback+0x64>)
 8009d76:	f001 f8fe 	bl	800af76 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009d7a:	1cbb      	adds	r3, r7, #2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4810      	ldr	r0, [pc, #64]	; (8009dc0 <DbgTrace_TxCpltCallback+0x64>)
 8009d80:	f001 f9ed 	bl	800b15e <CircularQueue_Sense>
 8009d84:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00c      	beq.n	8009da6 <DbgTrace_TxCpltCallback+0x4a>
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f383 8810 	msr	PRIMASK, r3
}
 8009d96:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009d98:	887b      	ldrh	r3, [r7, #2]
 8009d9a:	4a0a      	ldr	r2, [pc, #40]	; (8009dc4 <DbgTrace_TxCpltCallback+0x68>)
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6938      	ldr	r0, [r7, #16]
 8009da0:	f7f6 fd23 	bl	80007ea <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009da4:	e008      	b.n	8009db8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009da6:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <DbgTrace_TxCpltCallback+0x6c>)
 8009da8:	2201      	movs	r2, #1
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f383 8810 	msr	PRIMASK, r3
}
 8009db6:	bf00      	nop
}
 8009db8:	bf00      	nop
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000314 	.word	0x20000314
 8009dc4:	08009d5d 	.word	0x08009d5d
 8009dc8:	2000003d 	.word	0x2000003d

08009dcc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009dd2:	f7f6 fd04 	bl	80007de <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009de0:	4903      	ldr	r1, [pc, #12]	; (8009df0 <DbgTraceInit+0x24>)
 8009de2:	4804      	ldr	r0, [pc, #16]	; (8009df4 <DbgTraceInit+0x28>)
 8009de4:	f000 fe6e 	bl	800aac4 <CircularQueue_Init>
#endif 
#endif
  return;
 8009de8:	bf00      	nop
}
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000334 	.word	0x20000334
 8009df4:	20000314 	.word	0x20000314

08009df8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f805 	bl	8009e18 <DbgTraceWrite>
 8009e0e:	4603      	mov	r3, r0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e28:	f3ef 8310 	mrs	r3, PRIMASK
 8009e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e2e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009e30:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e38:	d102      	bne.n	8009e40 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3e:	e037      	b.n	8009eb0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d006      	beq.n	8009e54 <DbgTraceWrite+0x3c>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d003      	beq.n	8009e54 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
 8009e52:	e02d      	b.n	8009eb0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d02a      	beq.n	8009eb0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009e5e:	b672      	cpsid	i
}
 8009e60:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	2301      	movs	r3, #1
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	4814      	ldr	r0, [pc, #80]	; (8009ebc <DbgTraceWrite+0xa4>)
 8009e6c:	f000 fe5c 	bl	800ab28 <CircularQueue_Add>
 8009e70:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d015      	beq.n	8009ea4 <DbgTraceWrite+0x8c>
 8009e78:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <DbgTraceWrite+0xa8>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d010      	beq.n	8009ea4 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <DbgTraceWrite+0xa8>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f383 8810 	msr	PRIMASK, r3
}
 8009e92:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <DbgTraceWrite+0xac>)
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	69f8      	ldr	r0, [r7, #28]
 8009e9e:	f7f6 fca4 	bl	80007ea <DbgOutputTraces>
 8009ea2:	e005      	b.n	8009eb0 <DbgTraceWrite+0x98>
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f383 8810 	msr	PRIMASK, r3
}
 8009eae:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3728      	adds	r7, #40	; 0x28
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000314 	.word	0x20000314
 8009ec0:	2000003d 	.word	0x2000003d
 8009ec4:	08009d5d 	.word	0x08009d5d

08009ec8 <EndDeviceManagement_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t EndDeviceManagement_Event_Handler(void *Event)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  EDS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2bff      	cmp	r3, #255	; 0xff
 8009ee2:	d133      	bne.n	8009f4c <EndDeviceManagement_Event_Handler+0x84>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	3302      	adds	r3, #2
 8009ee8:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f640 4301 	movw	r3, #3073	; 0xc01
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d124      	bne.n	8009f44 <EndDeviceManagement_Event_Handler+0x7c>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	3302      	adds	r3, #2
 8009efe:	61bb      	str	r3, [r7, #24]
          
            if(attribute_modified->Attr_Handle == (aEndDeviceManagementContext.EndDeviceStatusCharHdle + 2))
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	885b      	ldrh	r3, [r3, #2]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <EndDeviceManagement_Event_Handler+0x94>)
 8009f0a:	885b      	ldrh	r3, [r3, #2]
 8009f0c:	3302      	adds	r3, #2
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d11a      	bne.n	8009f48 <EndDeviceManagement_Event_Handler+0x80>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8009f12:	2301      	movs	r3, #1
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	7a1b      	ldrb	r3, [r3, #8]
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d007      	beq.n	8009f34 <EndDeviceManagement_Event_Handler+0x6c>
              {
               
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_ENABLED_EVT;
 8009f24:	2301      	movs	r3, #1
 8009f26:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 8009f28:	f107 0308 	add.w	r3, r7, #8
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7f9 fda9 	bl	8003a84 <EDS_STM_App_Notification>
            }
            
            
          
        }
        break;
 8009f32:	e009      	b.n	8009f48 <EndDeviceManagement_Event_Handler+0x80>
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_DISABLED_EVT;
 8009f34:	2300      	movs	r3, #0
 8009f36:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f9 fda1 	bl	8003a84 <EDS_STM_App_Notification>
        break;
 8009f42:	e001      	b.n	8009f48 <EndDeviceManagement_Event_Handler+0x80>

        default:
          break;
 8009f44:	bf00      	nop
 8009f46:	e002      	b.n	8009f4e <EndDeviceManagement_Event_Handler+0x86>
        break;
 8009f48:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009f4a:	e000      	b.n	8009f4e <EndDeviceManagement_Event_Handler+0x86>

    default:
      break;
 8009f4c:	bf00      	nop
  }

  return(return_value);
 8009f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009f52:	4618      	mov	r0, r3
 8009f54:	3728      	adds	r7, #40	; 0x28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	2000026c 	.word	0x2000026c

08009f60 <EDS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void EDS_STM_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(EndDeviceManagement_Event_Handler);
 8009f66:	4831      	ldr	r0, [pc, #196]	; (800a02c <EDS_STM_Init+0xcc>)
 8009f68:	f001 fa44 	bl	800b3f4 <SVCCTL_RegisterSvcHandler>
     * service_max_attribute_record = 1 for End Device Mgt service +
     *                                2 for End Device Staus characteristic +
     *                                1 for client char configuration descriptor 
     *                                
     */
    COPY_EDM_SERVICE_UUID(uuid16.Char_UUID_128);
 8009f6c:	238f      	movs	r3, #143	; 0x8f
 8009f6e:	703b      	strb	r3, [r7, #0]
 8009f70:	23e5      	movs	r3, #229	; 0xe5
 8009f72:	707b      	strb	r3, [r7, #1]
 8009f74:	23b3      	movs	r3, #179	; 0xb3
 8009f76:	70bb      	strb	r3, [r7, #2]
 8009f78:	23d5      	movs	r3, #213	; 0xd5
 8009f7a:	70fb      	strb	r3, [r7, #3]
 8009f7c:	232e      	movs	r3, #46	; 0x2e
 8009f7e:	713b      	strb	r3, [r7, #4]
 8009f80:	237f      	movs	r3, #127	; 0x7f
 8009f82:	717b      	strb	r3, [r7, #5]
 8009f84:	234a      	movs	r3, #74	; 0x4a
 8009f86:	71bb      	strb	r3, [r7, #6]
 8009f88:	2398      	movs	r3, #152	; 0x98
 8009f8a:	71fb      	strb	r3, [r7, #7]
 8009f8c:	232a      	movs	r3, #42	; 0x2a
 8009f8e:	723b      	strb	r3, [r7, #8]
 8009f90:	2348      	movs	r3, #72	; 0x48
 8009f92:	727b      	strb	r3, [r7, #9]
 8009f94:	237a      	movs	r3, #122	; 0x7a
 8009f96:	72bb      	strb	r3, [r7, #10]
 8009f98:	23cc      	movs	r3, #204	; 0xcc
 8009f9a:	72fb      	strb	r3, [r7, #11]
 8009f9c:	2350      	movs	r3, #80	; 0x50
 8009f9e:	733b      	strb	r3, [r7, #12]
 8009fa0:	23fe      	movs	r3, #254	; 0xfe
 8009fa2:	737b      	strb	r3, [r7, #13]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009fac:	4639      	mov	r1, r7
 8009fae:	4b20      	ldr	r3, [pc, #128]	; (800a030 <EDS_STM_Init+0xd0>)
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	2305      	movs	r3, #5
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	2002      	movs	r0, #2
 8009fb8:	f7ff f8f9 	bl	80091ae <aci_gatt_add_service>
                      &(aEndDeviceManagementContext.EndDeviceManagementSvcHdle));

    /**
     *  Add End Device Status Characteristic
     */
    COPY_EDM_STATUS_CHAR_UUID(uuid16.Char_UUID_128);
 8009fbc:	2319      	movs	r3, #25
 8009fbe:	703b      	strb	r3, [r7, #0]
 8009fc0:	23ed      	movs	r3, #237	; 0xed
 8009fc2:	707b      	strb	r3, [r7, #1]
 8009fc4:	2382      	movs	r3, #130	; 0x82
 8009fc6:	70bb      	strb	r3, [r7, #2]
 8009fc8:	23ae      	movs	r3, #174	; 0xae
 8009fca:	70fb      	strb	r3, [r7, #3]
 8009fcc:	23ed      	movs	r3, #237	; 0xed
 8009fce:	713b      	strb	r3, [r7, #4]
 8009fd0:	2321      	movs	r3, #33	; 0x21
 8009fd2:	717b      	strb	r3, [r7, #5]
 8009fd4:	234c      	movs	r3, #76	; 0x4c
 8009fd6:	71bb      	strb	r3, [r7, #6]
 8009fd8:	239d      	movs	r3, #157	; 0x9d
 8009fda:	71fb      	strb	r3, [r7, #7]
 8009fdc:	2341      	movs	r3, #65	; 0x41
 8009fde:	723b      	strb	r3, [r7, #8]
 8009fe0:	2345      	movs	r3, #69	; 0x45
 8009fe2:	727b      	strb	r3, [r7, #9]
 8009fe4:	2322      	movs	r3, #34	; 0x22
 8009fe6:	72bb      	strb	r3, [r7, #10]
 8009fe8:	238e      	movs	r3, #142	; 0x8e
 8009fea:	72fb      	strb	r3, [r7, #11]
 8009fec:	2351      	movs	r3, #81	; 0x51
 8009fee:	733b      	strb	r3, [r7, #12]
 8009ff0:	23fe      	movs	r3, #254	; 0xfe
 8009ff2:	737b      	strb	r3, [r7, #13]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	73bb      	strb	r3, [r7, #14]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <EDS_STM_Init+0xd0>)
 8009ffe:	8818      	ldrh	r0, [r3, #0]
 800a000:	463a      	mov	r2, r7
 800a002:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <EDS_STM_Init+0xd4>)
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	2301      	movs	r3, #1
 800a008:	9304      	str	r3, [sp, #16]
 800a00a:	230a      	movs	r3, #10
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	2300      	movs	r3, #0
 800a010:	9302      	str	r3, [sp, #8]
 800a012:	2300      	movs	r3, #0
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	2312      	movs	r3, #18
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	2306      	movs	r3, #6
 800a01c:	2102      	movs	r1, #2
 800a01e:	f7ff f975 	bl	800930c <aci_gatt_add_char>
                      &(aEndDeviceManagementContext.EndDeviceStatusCharHdle));
    
     BLE_DBG_EDS_STM_MSG("-- End Device Managment Service (EDMS) is added Successfully %04X\n",
                 aEndDeviceManagementContext.EndDeviceManagementSvcHdle);

    return;
 800a022:	bf00      	nop
}
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	08009ec9 	.word	0x08009ec9
 800a030:	2000026c 	.word	0x2000026c
 800a034:	2000026e 	.word	0x2000026e

0800a038 <EDS_STM_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus EDS_STM_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af02      	add	r7, sp, #8
 800a03e:	4603      	mov	r3, r0
 800a040:	6039      	str	r1, [r7, #0]
 800a042:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a044:	2342      	movs	r3, #66	; 0x42
 800a046:	73fb      	strb	r3, [r7, #15]
  
 
  switch(UUID)
 800a048:	88fb      	ldrh	r3, [r7, #6]
 800a04a:	f642 3260 	movw	r2, #11104	; 0x2b60
 800a04e:	4293      	cmp	r3, r2
 800a050:	d10c      	bne.n	800a06c <EDS_STM_Update_Char+0x34>
  {
    case END_DEVICE_STATUS_CHAR_UUID:
    
      result = aci_gatt_update_char_value(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <EDS_STM_Update_Char+0x40>)
 800a054:	8818      	ldrh	r0, [r3, #0]
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <EDS_STM_Update_Char+0x40>)
 800a058:	8859      	ldrh	r1, [r3, #2]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	2306      	movs	r3, #6
 800a060:	2200      	movs	r2, #0
 800a062:	f7ff fa3d 	bl	80094e0 <aci_gatt_update_char_value>
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]
                             aEndDeviceManagementContext.EndDeviceStatusCharHdle,
                             0, /* charValOffset */
                             6, /* charValueLen */
                             (uint8_t *)  pPayload);
     
      break;
 800a06a:	e000      	b.n	800a06e <EDS_STM_Update_Char+0x36>

    default:
      break;
 800a06c:	bf00      	nop
  }

  return result;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
}/* end BLE_SVC_LedButton_Update_Char() */
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	2000026c 	.word	0x2000026c

0800a07c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4a08      	ldr	r2, [pc, #32]	; (800a0ac <hci_init+0x30>)
 800a08c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a08e:	4a08      	ldr	r2, [pc, #32]	; (800a0b0 <hci_init+0x34>)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a094:	4806      	ldr	r0, [pc, #24]	; (800a0b0 <hci_init+0x34>)
 800a096:	f000 f973 	bl	800a380 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f8d4 	bl	800a24c <TlInit>

  return;
 800a0a4:	bf00      	nop
}
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	2000135c 	.word	0x2000135c
 800a0b0:	20001334 	.word	0x20001334

0800a0b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a0ba:	4822      	ldr	r0, [pc, #136]	; (800a144 <hci_user_evt_proc+0x90>)
 800a0bc:	f000 fc54 	bl	800a968 <LST_is_empty>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d12b      	bne.n	800a11e <hci_user_evt_proc+0x6a>
 800a0c6:	4b20      	ldr	r3, [pc, #128]	; (800a148 <hci_user_evt_proc+0x94>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d027      	beq.n	800a11e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a0ce:	f107 030c 	add.w	r3, r7, #12
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	481b      	ldr	r0, [pc, #108]	; (800a144 <hci_user_evt_proc+0x90>)
 800a0d6:	f000 fcd6 	bl	800aa86 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a0da:	4b1c      	ldr	r3, [pc, #112]	; (800a14c <hci_user_evt_proc+0x98>)
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00c      	beq.n	800a0fc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a0ea:	4b18      	ldr	r3, [pc, #96]	; (800a14c <hci_user_evt_proc+0x98>)
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	1d3a      	adds	r2, r7, #4
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a0f4:	793a      	ldrb	r2, [r7, #4]
 800a0f6:	4b14      	ldr	r3, [pc, #80]	; (800a148 <hci_user_evt_proc+0x94>)
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	e002      	b.n	800a102 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a0fc:	4b12      	ldr	r3, [pc, #72]	; (800a148 <hci_user_evt_proc+0x94>)
 800a0fe:	2201      	movs	r2, #1
 800a100:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <hci_user_evt_proc+0x94>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fb99 	bl	800b844 <TL_MM_EvtDone>
 800a112:	e004      	b.n	800a11e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4619      	mov	r1, r3
 800a118:	480a      	ldr	r0, [pc, #40]	; (800a144 <hci_user_evt_proc+0x90>)
 800a11a:	f000 fc47 	bl	800a9ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a11e:	4809      	ldr	r0, [pc, #36]	; (800a144 <hci_user_evt_proc+0x90>)
 800a120:	f000 fc22 	bl	800a968 <LST_is_empty>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d107      	bne.n	800a13a <hci_user_evt_proc+0x86>
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <hci_user_evt_proc+0x94>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a132:	4804      	ldr	r0, [pc, #16]	; (800a144 <hci_user_evt_proc+0x90>)
 800a134:	f7f9 fc4a 	bl	80039cc <hci_notify_asynch_evt>
  }


  return;
 800a138:	bf00      	nop
 800a13a:	bf00      	nop
}
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000274 	.word	0x20000274
 800a148:	20000280 	.word	0x20000280
 800a14c:	20001334 	.word	0x20001334

0800a150 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a15c:	2000      	movs	r0, #0
 800a15e:	f000 f8cb 	bl	800a2f8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a162:	2300      	movs	r3, #0
 800a164:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	885b      	ldrh	r3, [r3, #2]
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a170:	b21a      	sxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	029b      	lsls	r3, r3, #10
 800a178:	b21b      	sxth	r3, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	b2d9      	uxtb	r1, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	8bbb      	ldrh	r3, [r7, #28]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f88d 	bl	800a2ac <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a192:	e04e      	b.n	800a232 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a194:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a198:	f7f9 fc30 	bl	80039fc <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a19c:	e043      	b.n	800a226 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4828      	ldr	r0, [pc, #160]	; (800a248 <hci_send_req+0xf8>)
 800a1a6:	f000 fc6e 	bl	800aa86 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7a5b      	ldrb	r3, [r3, #9]
 800a1ae:	2b0f      	cmp	r3, #15
 800a1b0:	d114      	bne.n	800a1dc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	330b      	adds	r3, #11
 800a1b6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	885b      	ldrh	r3, [r3, #2]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	8bba      	ldrh	r2, [r7, #28]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d104      	bne.n	800a1ce <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d027      	beq.n	800a226 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	77fb      	strb	r3, [r7, #31]
 800a1da:	e024      	b.n	800a226 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	330b      	adds	r3, #11
 800a1e0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	8bba      	ldrh	r2, [r7, #28]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d114      	bne.n	800a21a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	7a9b      	ldrb	r3, [r3, #10]
 800a1f4:	3b03      	subs	r3, #3
 800a1f6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bfa8      	it	ge
 800a202:	461a      	movge	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6918      	ldr	r0, [r3, #16]
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	1cd9      	adds	r1, r3, #3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	461a      	mov	r2, r3
 800a216:	f001 fe61 	bl	800bedc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a222:	2301      	movs	r3, #1
 800a224:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a226:	4808      	ldr	r0, [pc, #32]	; (800a248 <hci_send_req+0xf8>)
 800a228:	f000 fb9e 	bl	800a968 <LST_is_empty>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0b5      	beq.n	800a19e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a232:	7ffb      	ldrb	r3, [r7, #31]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0ad      	beq.n	800a194 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a238:	2001      	movs	r0, #1
 800a23a:	f000 f85d 	bl	800a2f8 <NotifyCmdStatus>

  return 0;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20001354 	.word	0x20001354

0800a24c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a254:	480f      	ldr	r0, [pc, #60]	; (800a294 <TlInit+0x48>)
 800a256:	f000 fb77 	bl	800a948 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a25a:	4a0f      	ldr	r2, [pc, #60]	; (800a298 <TlInit+0x4c>)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a260:	480e      	ldr	r0, [pc, #56]	; (800a29c <TlInit+0x50>)
 800a262:	f000 fb71 	bl	800a948 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <TlInit+0x54>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <TlInit+0x58>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <TlInit+0x5c>)
 800a27a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <TlInit+0x58>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f107 0208 	add.w	r2, r7, #8
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
  }

  return;
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
}
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001354 	.word	0x20001354
 800a298:	2000027c 	.word	0x2000027c
 800a29c:	20000274 	.word	0x20000274
 800a2a0:	20000280 	.word	0x20000280
 800a2a4:	20001334 	.word	0x20001334
 800a2a8:	0800a339 	.word	0x0800a339

0800a2ac <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	603a      	str	r2, [r7, #0]
 800a2b6:	80fb      	strh	r3, [r7, #6]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <SendCmd+0x44>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <SendCmd+0x44>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	797a      	ldrb	r2, [r7, #5]
 800a2cc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <SendCmd+0x44>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	330c      	adds	r3, #12
 800a2d4:	797a      	ldrb	r2, [r7, #5]
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fdff 	bl	800bedc <memcpy>

  hciContext.io.Send(0,0);
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <SendCmd+0x48>)
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	4798      	blx	r3

  return;
 800a2e8:	bf00      	nop
}
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	2000027c 	.word	0x2000027c
 800a2f4:	20001334 	.word	0x20001334

0800a2f8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a302:	79fb      	ldrb	r3, [r7, #7]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d108      	bne.n	800a31a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <NotifyCmdStatus+0x3c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00d      	beq.n	800a32c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a310:	4b08      	ldr	r3, [pc, #32]	; (800a334 <NotifyCmdStatus+0x3c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2000      	movs	r0, #0
 800a316:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a318:	e008      	b.n	800a32c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <NotifyCmdStatus+0x3c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d004      	beq.n	800a32c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a322:	4b04      	ldr	r3, [pc, #16]	; (800a334 <NotifyCmdStatus+0x3c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2001      	movs	r0, #1
 800a328:	4798      	blx	r3
  return;
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
}
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	2000135c 	.word	0x2000135c

0800a338 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a5b      	ldrb	r3, [r3, #9]
 800a344:	2b0f      	cmp	r3, #15
 800a346:	d003      	beq.n	800a350 <TlEvtReceived+0x18>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7a5b      	ldrb	r3, [r3, #9]
 800a34c:	2b0e      	cmp	r3, #14
 800a34e:	d107      	bne.n	800a360 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	4809      	ldr	r0, [pc, #36]	; (800a378 <TlEvtReceived+0x40>)
 800a354:	f000 fb50 	bl	800a9f8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a358:	2000      	movs	r0, #0
 800a35a:	f7f9 fb44 	bl	80039e6 <hci_cmd_resp_release>
 800a35e:	e006      	b.n	800a36e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	4806      	ldr	r0, [pc, #24]	; (800a37c <TlEvtReceived+0x44>)
 800a364:	f000 fb48 	bl	800a9f8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a368:	4804      	ldr	r0, [pc, #16]	; (800a37c <TlEvtReceived+0x44>)
 800a36a:	f7f9 fb2f 	bl	80039cc <hci_notify_asynch_evt>
  }

  return;
 800a36e:	bf00      	nop
}
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20001354 	.word	0x20001354
 800a37c:	20000274 	.word	0x20000274

0800a380 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a05      	ldr	r2, [pc, #20]	; (800a3a0 <hci_register_io_bus+0x20>)
 800a38c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a04      	ldr	r2, [pc, #16]	; (800a3a4 <hci_register_io_bus+0x24>)
 800a392:	611a      	str	r2, [r3, #16]

  return;
 800a394:	bf00      	nop
}
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	0800b5bd 	.word	0x0800b5bd
 800a3a4:	0800b625 	.word	0x0800b625

0800a3a8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f001 fd8f 	bl	800bedc <memcpy>
 800a3be:	4603      	mov	r3, r0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f001 fd8d 	bl	800bef8 <memset>
 800a3de:	4603      	mov	r3, r0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a3f2:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <OTP_Read+0x48>)
 800a3f4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a3f6:	e002      	b.n	800a3fe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3b08      	subs	r3, #8
 800a3fc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3307      	adds	r3, #7
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	79fa      	ldrb	r2, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	d003      	beq.n	800a412 <OTP_Read+0x2a>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4a09      	ldr	r2, [pc, #36]	; (800a434 <OTP_Read+0x4c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d1f2      	bne.n	800a3f8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3307      	adds	r3, #7
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	79fa      	ldrb	r2, [r7, #7]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d001      	beq.n	800a422 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	1fff73f8 	.word	0x1fff73f8
 800a434:	1fff7000 	.word	0x1fff7000

0800a438 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08a      	sub	sp, #40	; 0x28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a440:	2300      	movs	r3, #0
 800a442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3301      	adds	r3, #1
 800a44a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2bff      	cmp	r3, #255	; 0xff
 800a452:	d14c      	bne.n	800a4ee <PeerToPeer_Event_Handler+0xb6>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	3302      	adds	r3, #2
 800a458:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	461a      	mov	r2, r3
 800a462:	f640 4301 	movw	r3, #3073	; 0xc01
 800a466:	429a      	cmp	r2, r3
 800a468:	d13d      	bne.n	800a4e6 <PeerToPeer_Event_Handler+0xae>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	3302      	adds	r3, #2
 800a46e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	885b      	ldrh	r3, [r3, #2]
 800a474:	b29b      	uxth	r3, r3
 800a476:	461a      	mov	r2, r3
 800a478:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <PeerToPeer_Event_Handler+0xc4>)
 800a47a:	889b      	ldrh	r3, [r3, #4]
 800a47c:	3302      	adds	r3, #2
 800a47e:	429a      	cmp	r2, r3
 800a480:	d118      	bne.n	800a4b4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800a482:	2301      	movs	r3, #1
 800a484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	7a1b      	ldrb	r3, [r3, #8]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a494:	2300      	movs	r3, #0
 800a496:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7f9 fb15 	bl	8003acc <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800a4a2:	e022      	b.n	800a4ea <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7f9 fb0d 	bl	8003acc <P2PS_STM_App_Notification>
        break;
 800a4b2:	e01a      	b.n	800a4ea <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	885b      	ldrh	r3, [r3, #2]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <PeerToPeer_Event_Handler+0xc4>)
 800a4be:	885b      	ldrh	r3, [r3, #2]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d111      	bne.n	800a4ea <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	88db      	ldrh	r3, [r3, #6]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a4da:	f107 0308 	add.w	r3, r7, #8
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7f9 faf4 	bl	8003acc <P2PS_STM_App_Notification>
        break;
 800a4e4:	e001      	b.n	800a4ea <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800a4e6:	bf00      	nop
 800a4e8:	e002      	b.n	800a4f0 <PeerToPeer_Event_Handler+0xb8>
        break;
 800a4ea:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a4ec:	e000      	b.n	800a4f0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800a4ee:	bf00      	nop
  }

  return(return_value);
 800a4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3728      	adds	r7, #40	; 0x28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20000284 	.word	0x20000284

0800a500 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08a      	sub	sp, #40	; 0x28
 800a504:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a506:	484a      	ldr	r0, [pc, #296]	; (800a630 <P2PS_STM_Init+0x130>)
 800a508:	f000 ff74 	bl	800b3f4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a50c:	238f      	movs	r3, #143	; 0x8f
 800a50e:	703b      	strb	r3, [r7, #0]
 800a510:	23e5      	movs	r3, #229	; 0xe5
 800a512:	707b      	strb	r3, [r7, #1]
 800a514:	23b3      	movs	r3, #179	; 0xb3
 800a516:	70bb      	strb	r3, [r7, #2]
 800a518:	23d5      	movs	r3, #213	; 0xd5
 800a51a:	70fb      	strb	r3, [r7, #3]
 800a51c:	232e      	movs	r3, #46	; 0x2e
 800a51e:	713b      	strb	r3, [r7, #4]
 800a520:	237f      	movs	r3, #127	; 0x7f
 800a522:	717b      	strb	r3, [r7, #5]
 800a524:	234a      	movs	r3, #74	; 0x4a
 800a526:	71bb      	strb	r3, [r7, #6]
 800a528:	2398      	movs	r3, #152	; 0x98
 800a52a:	71fb      	strb	r3, [r7, #7]
 800a52c:	232a      	movs	r3, #42	; 0x2a
 800a52e:	723b      	strb	r3, [r7, #8]
 800a530:	2348      	movs	r3, #72	; 0x48
 800a532:	727b      	strb	r3, [r7, #9]
 800a534:	237a      	movs	r3, #122	; 0x7a
 800a536:	72bb      	strb	r3, [r7, #10]
 800a538:	23cc      	movs	r3, #204	; 0xcc
 800a53a:	72fb      	strb	r3, [r7, #11]
 800a53c:	2340      	movs	r3, #64	; 0x40
 800a53e:	733b      	strb	r3, [r7, #12]
 800a540:	23fe      	movs	r3, #254	; 0xfe
 800a542:	737b      	strb	r3, [r7, #13]
 800a544:	2300      	movs	r3, #0
 800a546:	73bb      	strb	r3, [r7, #14]
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a54c:	4639      	mov	r1, r7
 800a54e:	4b39      	ldr	r3, [pc, #228]	; (800a634 <P2PS_STM_Init+0x134>)
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	2308      	movs	r3, #8
 800a554:	2201      	movs	r2, #1
 800a556:	2002      	movs	r0, #2
 800a558:	f7fe fe29 	bl	80091ae <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a55c:	2319      	movs	r3, #25
 800a55e:	703b      	strb	r3, [r7, #0]
 800a560:	23ed      	movs	r3, #237	; 0xed
 800a562:	707b      	strb	r3, [r7, #1]
 800a564:	2382      	movs	r3, #130	; 0x82
 800a566:	70bb      	strb	r3, [r7, #2]
 800a568:	23ae      	movs	r3, #174	; 0xae
 800a56a:	70fb      	strb	r3, [r7, #3]
 800a56c:	23ed      	movs	r3, #237	; 0xed
 800a56e:	713b      	strb	r3, [r7, #4]
 800a570:	2321      	movs	r3, #33	; 0x21
 800a572:	717b      	strb	r3, [r7, #5]
 800a574:	234c      	movs	r3, #76	; 0x4c
 800a576:	71bb      	strb	r3, [r7, #6]
 800a578:	239d      	movs	r3, #157	; 0x9d
 800a57a:	71fb      	strb	r3, [r7, #7]
 800a57c:	2341      	movs	r3, #65	; 0x41
 800a57e:	723b      	strb	r3, [r7, #8]
 800a580:	2345      	movs	r3, #69	; 0x45
 800a582:	727b      	strb	r3, [r7, #9]
 800a584:	2322      	movs	r3, #34	; 0x22
 800a586:	72bb      	strb	r3, [r7, #10]
 800a588:	238e      	movs	r3, #142	; 0x8e
 800a58a:	72fb      	strb	r3, [r7, #11]
 800a58c:	2341      	movs	r3, #65	; 0x41
 800a58e:	733b      	strb	r3, [r7, #12]
 800a590:	23fe      	movs	r3, #254	; 0xfe
 800a592:	737b      	strb	r3, [r7, #13]
 800a594:	2300      	movs	r3, #0
 800a596:	73bb      	strb	r3, [r7, #14]
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a59c:	4b25      	ldr	r3, [pc, #148]	; (800a634 <P2PS_STM_Init+0x134>)
 800a59e:	8818      	ldrh	r0, [r3, #0]
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4b25      	ldr	r3, [pc, #148]	; (800a638 <P2PS_STM_Init+0x138>)
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	2306      	movs	r3, #6
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	2102      	movs	r1, #2
 800a5be:	f7fe fea5 	bl	800930c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a5c2:	2319      	movs	r3, #25
 800a5c4:	703b      	strb	r3, [r7, #0]
 800a5c6:	23ed      	movs	r3, #237	; 0xed
 800a5c8:	707b      	strb	r3, [r7, #1]
 800a5ca:	2382      	movs	r3, #130	; 0x82
 800a5cc:	70bb      	strb	r3, [r7, #2]
 800a5ce:	23ae      	movs	r3, #174	; 0xae
 800a5d0:	70fb      	strb	r3, [r7, #3]
 800a5d2:	23ed      	movs	r3, #237	; 0xed
 800a5d4:	713b      	strb	r3, [r7, #4]
 800a5d6:	2321      	movs	r3, #33	; 0x21
 800a5d8:	717b      	strb	r3, [r7, #5]
 800a5da:	234c      	movs	r3, #76	; 0x4c
 800a5dc:	71bb      	strb	r3, [r7, #6]
 800a5de:	239d      	movs	r3, #157	; 0x9d
 800a5e0:	71fb      	strb	r3, [r7, #7]
 800a5e2:	2341      	movs	r3, #65	; 0x41
 800a5e4:	723b      	strb	r3, [r7, #8]
 800a5e6:	2345      	movs	r3, #69	; 0x45
 800a5e8:	727b      	strb	r3, [r7, #9]
 800a5ea:	2322      	movs	r3, #34	; 0x22
 800a5ec:	72bb      	strb	r3, [r7, #10]
 800a5ee:	238e      	movs	r3, #142	; 0x8e
 800a5f0:	72fb      	strb	r3, [r7, #11]
 800a5f2:	2342      	movs	r3, #66	; 0x42
 800a5f4:	733b      	strb	r3, [r7, #12]
 800a5f6:	23fe      	movs	r3, #254	; 0xfe
 800a5f8:	737b      	strb	r3, [r7, #13]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73bb      	strb	r3, [r7, #14]
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a602:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <P2PS_STM_Init+0x134>)
 800a604:	8818      	ldrh	r0, [r3, #0]
 800a606:	463a      	mov	r2, r7
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <P2PS_STM_Init+0x13c>)
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	2301      	movs	r3, #1
 800a60e:	9304      	str	r3, [sp, #16]
 800a610:	230a      	movs	r3, #10
 800a612:	9303      	str	r3, [sp, #12]
 800a614:	2301      	movs	r3, #1
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	2300      	movs	r3, #0
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	2310      	movs	r3, #16
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2302      	movs	r3, #2
 800a622:	2102      	movs	r1, #2
 800a624:	f7fe fe72 	bl	800930c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a628:	bf00      	nop
}
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	0800a439 	.word	0x0800a439
 800a634:	20000284 	.word	0x20000284
 800a638:	20000286 	.word	0x20000286
 800a63c:	20000288 	.word	0x20000288

0800a640 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af02      	add	r7, sp, #8
 800a646:	4603      	mov	r3, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a64c:	2342      	movs	r3, #66	; 0x42
 800a64e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a650:	88fb      	ldrh	r3, [r7, #6]
 800a652:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800a656:	4293      	cmp	r3, r2
 800a658:	d10c      	bne.n	800a674 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <P2PS_STM_App_Update_Char+0x40>)
 800a65c:	8818      	ldrh	r0, [r3, #0]
 800a65e:	4b08      	ldr	r3, [pc, #32]	; (800a680 <P2PS_STM_App_Update_Char+0x40>)
 800a660:	8899      	ldrh	r1, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	2302      	movs	r3, #2
 800a668:	2200      	movs	r2, #0
 800a66a:	f7fe ff39 	bl	80094e0 <aci_gatt_update_char_value>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800a672:	e000      	b.n	800a676 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800a674:	bf00      	nop
  }

  return result;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20000284 	.word	0x20000284

0800a684 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a68c:	f107 030c 	add.w	r3, r7, #12
 800a690:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2121      	movs	r1, #33	; 0x21
 800a69c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a6a0:	f000 f888 	bl	800a7b4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	330b      	adds	r3, #11
 800a6a8:	78db      	ldrb	r3, [r3, #3]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b088      	sub	sp, #32
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a6ba:	f107 030c 	add.w	r3, r7, #12
 800a6be:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	210f      	movs	r1, #15
 800a6ca:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a6ce:	f000 f871 	bl	800a7b4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	330b      	adds	r3, #11
 800a6d6:	78db      	ldrb	r3, [r3, #3]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3720      	adds	r7, #32
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	4a08      	ldr	r2, [pc, #32]	; (800a710 <shci_init+0x30>)
 800a6f0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a6f2:	4a08      	ldr	r2, [pc, #32]	; (800a714 <shci_init+0x34>)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a6f8:	4806      	ldr	r0, [pc, #24]	; (800a714 <shci_init+0x34>)
 800a6fa:	f000 f911 	bl	800a920 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f894 	bl	800a830 <TlInit>

  return;
 800a708:	bf00      	nop
}
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	20001380 	.word	0x20001380
 800a714:	20001360 	.word	0x20001360

0800a718 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a71e:	4822      	ldr	r0, [pc, #136]	; (800a7a8 <shci_user_evt_proc+0x90>)
 800a720:	f000 f922 	bl	800a968 <LST_is_empty>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d12b      	bne.n	800a782 <shci_user_evt_proc+0x6a>
 800a72a:	4b20      	ldr	r3, [pc, #128]	; (800a7ac <shci_user_evt_proc+0x94>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d027      	beq.n	800a782 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4619      	mov	r1, r3
 800a738:	481b      	ldr	r0, [pc, #108]	; (800a7a8 <shci_user_evt_proc+0x90>)
 800a73a:	f000 f9a4 	bl	800aa86 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a73e:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <shci_user_evt_proc+0x98>)
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00c      	beq.n	800a760 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a74a:	2301      	movs	r3, #1
 800a74c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a74e:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <shci_user_evt_proc+0x98>)
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	1d3a      	adds	r2, r7, #4
 800a754:	4610      	mov	r0, r2
 800a756:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a758:	793a      	ldrb	r2, [r7, #4]
 800a75a:	4b14      	ldr	r3, [pc, #80]	; (800a7ac <shci_user_evt_proc+0x94>)
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e002      	b.n	800a766 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a760:	4b12      	ldr	r3, [pc, #72]	; (800a7ac <shci_user_evt_proc+0x94>)
 800a762:	2201      	movs	r2, #1
 800a764:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <shci_user_evt_proc+0x94>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4618      	mov	r0, r3
 800a772:	f001 f867 	bl	800b844 <TL_MM_EvtDone>
 800a776:	e004      	b.n	800a782 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4619      	mov	r1, r3
 800a77c:	480a      	ldr	r0, [pc, #40]	; (800a7a8 <shci_user_evt_proc+0x90>)
 800a77e:	f000 f915 	bl	800a9ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a782:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <shci_user_evt_proc+0x90>)
 800a784:	f000 f8f0 	bl	800a968 <LST_is_empty>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d107      	bne.n	800a79e <shci_user_evt_proc+0x86>
 800a78e:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <shci_user_evt_proc+0x94>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a796:	4804      	ldr	r0, [pc, #16]	; (800a7a8 <shci_user_evt_proc+0x90>)
 800a798:	f7f6 f905 	bl	80009a6 <shci_notify_asynch_evt>
  }


  return;
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
}
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200002c8 	.word	0x200002c8
 800a7ac:	200002d8 	.word	0x200002d8
 800a7b0:	20001360 	.word	0x20001360

0800a7b4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60ba      	str	r2, [r7, #8]
 800a7bc:	607b      	str	r3, [r7, #4]
 800a7be:	4603      	mov	r3, r0
 800a7c0:	81fb      	strh	r3, [r7, #14]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	f000 f864 	bl	800a894 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a7cc:	4b16      	ldr	r3, [pc, #88]	; (800a828 <shci_send+0x74>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	89fa      	ldrh	r2, [r7, #14]
 800a7d2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <shci_send+0x74>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	7b7a      	ldrb	r2, [r7, #13]
 800a7dc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <shci_send+0x74>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	330c      	adds	r3, #12
 800a7e4:	7b7a      	ldrb	r2, [r7, #13]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 fb77 	bl	800bedc <memcpy>

  shciContext.io.Send(0,0);
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <shci_send+0x78>)
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a7f8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a7fc:	f7f6 f8eb 	bl	80009d6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f103 0008 	add.w	r0, r3, #8
 800a806:	4b08      	ldr	r3, [pc, #32]	; (800a828 <shci_send+0x74>)
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	4b07      	ldr	r3, [pc, #28]	; (800a828 <shci_send+0x74>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	789b      	ldrb	r3, [r3, #2]
 800a810:	3303      	adds	r3, #3
 800a812:	461a      	mov	r2, r3
 800a814:	f001 fb62 	bl	800bedc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a818:	2001      	movs	r0, #1
 800a81a:	f000 f83b 	bl	800a894 <Cmd_SetStatus>

  return;
 800a81e:	bf00      	nop
}
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200002d4 	.word	0x200002d4
 800a82c:	20001360 	.word	0x20001360

0800a830 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a838:	4a10      	ldr	r2, [pc, #64]	; (800a87c <TlInit+0x4c>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a83e:	4810      	ldr	r0, [pc, #64]	; (800a880 <TlInit+0x50>)
 800a840:	f000 f882 	bl	800a948 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a844:	2001      	movs	r0, #1
 800a846:	f000 f825 	bl	800a894 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a84a:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <TlInit+0x54>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a850:	4b0d      	ldr	r3, [pc, #52]	; (800a888 <TlInit+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00c      	beq.n	800a872 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a85c:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <TlInit+0x5c>)
 800a85e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <TlInit+0x60>)
 800a862:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a864:	4b08      	ldr	r3, [pc, #32]	; (800a888 <TlInit+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f107 020c 	add.w	r2, r7, #12
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
  }

  return;
 800a870:	bf00      	nop
 800a872:	bf00      	nop
}
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	200002d4 	.word	0x200002d4
 800a880:	200002c8 	.word	0x200002c8
 800a884:	200002d8 	.word	0x200002d8
 800a888:	20001360 	.word	0x20001360
 800a88c:	0800a8e5 	.word	0x0800a8e5
 800a890:	0800a8fd 	.word	0x0800a8fd

0800a894 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10b      	bne.n	800a8bc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a8a4:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <Cmd_SetStatus+0x48>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d003      	beq.n	800a8b4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a8ac:	4b0b      	ldr	r3, [pc, #44]	; (800a8dc <Cmd_SetStatus+0x48>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <Cmd_SetStatus+0x4c>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a8ba:	e00b      	b.n	800a8d4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a8bc:	4b08      	ldr	r3, [pc, #32]	; (800a8e0 <Cmd_SetStatus+0x4c>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a8c2:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <Cmd_SetStatus+0x48>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a8ca:	4b04      	ldr	r3, [pc, #16]	; (800a8dc <Cmd_SetStatus+0x48>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	4798      	blx	r3
  return;
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
}
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20001380 	.word	0x20001380
 800a8e0:	200002d0 	.word	0x200002d0

0800a8e4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f7f6 f867 	bl	80009c0 <shci_cmd_resp_release>

  return;
 800a8f2:	bf00      	nop
}
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	4805      	ldr	r0, [pc, #20]	; (800a91c <TlUserEvtReceived+0x20>)
 800a908:	f000 f876 	bl	800a9f8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a90c:	4803      	ldr	r0, [pc, #12]	; (800a91c <TlUserEvtReceived+0x20>)
 800a90e:	f7f6 f84a 	bl	80009a6 <shci_notify_asynch_evt>

  return;
 800a912:	bf00      	nop
}
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200002c8 	.word	0x200002c8

0800a920 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a05      	ldr	r2, [pc, #20]	; (800a940 <shci_register_io_bus+0x20>)
 800a92c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a04      	ldr	r2, [pc, #16]	; (800a944 <shci_register_io_bus+0x24>)
 800a932:	611a      	str	r2, [r3, #16]

  return;
 800a934:	bf00      	nop
}
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	0800b6d1 	.word	0x0800b6d1
 800a944:	0800b725 	.word	0x0800b725

0800a948 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	605a      	str	r2, [r3, #4]
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a970:	f3ef 8310 	mrs	r3, PRIMASK
 800a974:	60fb      	str	r3, [r7, #12]
  return(result);
 800a976:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a97a:	b672      	cpsid	i
}
 800a97c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	d102      	bne.n	800a98e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a988:	2301      	movs	r3, #1
 800a98a:	75fb      	strb	r3, [r7, #23]
 800a98c:	e001      	b.n	800a992 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f383 8810 	msr	PRIMASK, r3
}
 800a99c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c0:	b672      	cpsid	i
}
 800a9c2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	605a      	str	r2, [r3, #4]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f383 8810 	msr	PRIMASK, r3
}
 800a9ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a9ec:	bf00      	nop
 800a9ee:	371c      	adds	r7, #28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa02:	f3ef 8310 	mrs	r3, PRIMASK
 800aa06:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa0c:	b672      	cpsid	i
}
 800aa0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f383 8810 	msr	PRIMASK, r3
}
 800aa36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa4c:	f3ef 8310 	mrs	r3, PRIMASK
 800aa50:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa56:	b672      	cpsid	i
}
 800aa58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6812      	ldr	r2, [r2, #0]
 800aa62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6852      	ldr	r2, [r2, #4]
 800aa6c:	605a      	str	r2, [r3, #4]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f383 8810 	msr	PRIMASK, r3
}
 800aa78:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b086      	sub	sp, #24
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa90:	f3ef 8310 	mrs	r3, PRIMASK
 800aa94:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa9a:	b672      	cpsid	i
}
 800aa9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff ffca 	bl	800aa44 <LST_remove_node>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f383 8810 	msr	PRIMASK, r3
}
 800aaba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aabc:	bf00      	nop
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	887a      	ldrh	r2, [r7, #2]
 800aafa:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	7e3a      	ldrb	r2, [r7, #24]
 800ab00:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800ab02:	7e3b      	ldrb	r3, [r7, #24]
 800ab04:	f003 0302 	and.w	r3, r3, #2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d006      	beq.n	800ab1a <CircularQueue_Init+0x56>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	891b      	ldrh	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800ab14:	f04f 33ff 	mov.w	r3, #4294967295
 800ab18:	e000      	b.n	800ab1c <CircularQueue_Init+0x58>
  }
  return 0;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08e      	sub	sp, #56	; 0x38
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ab38:	2300      	movs	r3, #0
 800ab3a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800ab40:	2300      	movs	r3, #0
 800ab42:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ab44:	2300      	movs	r3, #0
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab48:	2300      	movs	r3, #0
 800ab4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ab50:	2300      	movs	r3, #0
 800ab52:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	891b      	ldrh	r3, [r3, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <CircularQueue_Add+0x38>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e000      	b.n	800ab62 <CircularQueue_Add+0x3a>
 800ab60:	2300      	movs	r3, #0
 800ab62:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02a      	beq.n	800abc2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	891b      	ldrh	r3, [r3, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d123      	bne.n	800abbc <CircularQueue_Add+0x94>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6819      	ldr	r1, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	1c58      	adds	r0, r3, #1
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	4298      	cmp	r0, r3
 800ab92:	d306      	bcc.n	800aba2 <CircularQueue_Add+0x7a>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6918      	ldr	r0, [r3, #16]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	1ac3      	subs	r3, r0, r3
 800ab9e:	3301      	adds	r3, #1
 800aba0:	e002      	b.n	800aba8 <CircularQueue_Add+0x80>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	3301      	adds	r3, #1
 800aba8:	440b      	add	r3, r1
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4413      	add	r3, r2
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3302      	adds	r3, #2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	e001      	b.n	800abc0 <CircularQueue_Add+0x98>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	891b      	ldrh	r3, [r3, #8]
 800abc0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	891b      	ldrh	r3, [r3, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	891b      	ldrh	r3, [r3, #8]
 800abce:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d307      	bcc.n	800abec <CircularQueue_Add+0xc4>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6919      	ldr	r1, [r3, #16]
 800abe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800abe6:	440b      	add	r3, r1
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	e000      	b.n	800abee <CircularQueue_Add+0xc6>
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800abf0:	88fa      	ldrh	r2, [r7, #6]
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
 800abf4:	4413      	add	r3, r2
 800abf6:	461a      	mov	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	fb03 f302 	mul.w	r3, r3, r2
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d80b      	bhi.n	800ac1c <CircularQueue_Add+0xf4>
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	7ffb      	ldrb	r3, [r7, #31]
 800ac08:	4413      	add	r3, r2
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac12:	fb02 f201 	mul.w	r2, r2, r1
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	e000      	b.n	800ac1e <CircularQueue_Add+0xf6>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ac20:	7dfa      	ldrb	r2, [r7, #23]
 800ac22:	7ffb      	ldrb	r3, [r7, #31]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	bf8c      	ite	hi
 800ac28:	2301      	movhi	r3, #1
 800ac2a:	2300      	movls	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800ac30:	7fbb      	ldrb	r3, [r7, #30]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d008      	beq.n	800ac48 <CircularQueue_Add+0x120>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	7f1b      	ldrb	r3, [r3, #28]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <CircularQueue_Add+0x120>
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	e000      	b.n	800ac4a <CircularQueue_Add+0x122>
 800ac48:	8bbb      	ldrh	r3, [r7, #28]
 800ac4a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ac4c:	7fbb      	ldrb	r3, [r7, #30]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d008      	beq.n	800ac64 <CircularQueue_Add+0x13c>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	7f1b      	ldrb	r3, [r3, #28]
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <CircularQueue_Add+0x13c>
 800ac5e:	7ffb      	ldrb	r3, [r7, #31]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	e000      	b.n	800ac66 <CircularQueue_Add+0x13e>
 800ac64:	8bbb      	ldrh	r3, [r7, #28]
 800ac66:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ac68:	88fb      	ldrh	r3, [r7, #6]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 817e 	beq.w	800af6c <CircularQueue_Add+0x444>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	695a      	ldr	r2, [r3, #20]
 800ac74:	88f9      	ldrh	r1, [r7, #6]
 800ac76:	7ffb      	ldrb	r3, [r7, #31]
 800ac78:	440b      	add	r3, r1
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	fb03 f301 	mul.w	r3, r3, r1
 800ac82:	441a      	add	r2, r3
 800ac84:	8bbb      	ldrh	r3, [r7, #28]
 800ac86:	441a      	add	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	f200 816d 	bhi.w	800af6c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ac92:	2300      	movs	r3, #0
 800ac94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac96:	e14a      	b.n	800af2e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	691a      	ldr	r2, [r3, #16]
 800ac9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac9e:	441a      	add	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d307      	bcc.n	800acb8 <CircularQueue_Add+0x190>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acae:	441a      	add	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	e003      	b.n	800acc0 <CircularQueue_Add+0x198>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acbe:	4413      	add	r3, r2
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	891b      	ldrh	r3, [r3, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d130      	bne.n	800ad34 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	1c59      	adds	r1, r3, #1
 800acda:	6339      	str	r1, [r7, #48]	; 0x30
 800acdc:	4413      	add	r3, r2
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acea:	429a      	cmp	r2, r3
 800acec:	d304      	bcc.n	800acf8 <CircularQueue_Add+0x1d0>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	e000      	b.n	800acfa <CircularQueue_Add+0x1d2>
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800acfc:	88fb      	ldrh	r3, [r7, #6]
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	b298      	uxth	r0, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	1c59      	adds	r1, r3, #1
 800ad0a:	6339      	str	r1, [r7, #48]	; 0x30
 800ad0c:	4413      	add	r3, r2
 800ad0e:	b2c2      	uxtb	r2, r0
 800ad10:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d304      	bcc.n	800ad26 <CircularQueue_Add+0x1fe>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	e000      	b.n	800ad28 <CircularQueue_Add+0x200>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	1c9a      	adds	r2, r3, #2
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ad34:	88fa      	ldrh	r2, [r7, #6]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6859      	ldr	r1, [r3, #4]
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	1acb      	subs	r3, r1, r3
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	bf28      	it	cs
 800ad42:	4613      	movcs	r3, r2
 800ad44:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d007      	beq.n	800ad5e <CircularQueue_Add+0x236>
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d225      	bcs.n	800ada2 <CircularQueue_Add+0x27a>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	7f1b      	ldrb	r3, [r3, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d121      	bne.n	800ada2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	18d0      	adds	r0, r2, r3
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad6a:	fb02 f303 	mul.w	r3, r2, r3
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	4413      	add	r3, r2
 800ad72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad74:	4619      	mov	r1, r3
 800ad76:	f001 f8b1 	bl	800bedc <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	695a      	ldr	r2, [r3, #20]
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	441a      	add	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ad86:	2300      	movs	r3, #0
 800ad88:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ad8e:	88fa      	ldrh	r2, [r7, #6]
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ad96:	7ffb      	ldrb	r3, [r7, #31]
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ada0:	e0a4      	b.n	800aeec <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 80a1 	beq.w	800aeec <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	7f1b      	ldrb	r3, [r3, #28]
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d03a      	beq.n	800ae2c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	891b      	ldrh	r3, [r3, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10d      	bne.n	800adda <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	3b02      	subs	r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	22ff      	movs	r2, #255	; 0xff
 800adca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	3b01      	subs	r3, #1
 800add4:	4413      	add	r3, r2
 800add6:	22ff      	movs	r2, #255	; 0xff
 800add8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	695a      	ldr	r2, [r3, #20]
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	441a      	add	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800adea:	88fb      	ldrh	r3, [r7, #6]
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800adee:	2300      	movs	r3, #0
 800adf0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	891b      	ldrh	r3, [r3, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d16f      	bne.n	800aeda <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	1c59      	adds	r1, r3, #1
 800ae02:	6339      	str	r1, [r7, #48]	; 0x30
 800ae04:	4413      	add	r3, r2
 800ae06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ae0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0e:	0a18      	lsrs	r0, r3, #8
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	1c59      	adds	r1, r3, #1
 800ae18:	6339      	str	r1, [r7, #48]	; 0x30
 800ae1a:	4413      	add	r3, r2
 800ae1c:	b2c2      	uxtb	r2, r0
 800ae1e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	1c9a      	adds	r2, r3, #2
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	615a      	str	r2, [r3, #20]
 800ae2a:	e056      	b.n	800aeda <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	7f1b      	ldrb	r3, [r3, #28]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d050      	beq.n	800aeda <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	891b      	ldrh	r3, [r3, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d14a      	bne.n	800aed6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	3b02      	subs	r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae4c:	b2d2      	uxtb	r2, r2
 800ae4e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	0a19      	lsrs	r1, r3, #8
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	4413      	add	r3, r2
 800ae5e:	b2ca      	uxtb	r2, r1
 800ae60:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	18d0      	adds	r0, r2, r3
 800ae6a:	88fb      	ldrh	r3, [r7, #6]
 800ae6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae6e:	fb02 f303 	mul.w	r3, r2, r3
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	4413      	add	r3, r2
 800ae76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f001 f82f 	bl	800bedc <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	441a      	add	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800aea0:	2300      	movs	r3, #0
 800aea2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	1c59      	adds	r1, r3, #1
 800aeac:	6339      	str	r1, [r7, #48]	; 0x30
 800aeae:	4413      	add	r3, r2
 800aeb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb8:	0a18      	lsrs	r0, r3, #8
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	1c59      	adds	r1, r3, #1
 800aec2:	6339      	str	r1, [r7, #48]	; 0x30
 800aec4:	4413      	add	r3, r2
 800aec6:	b2c2      	uxtb	r2, r0
 800aec8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	1c9a      	adds	r2, r3, #2
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	615a      	str	r2, [r3, #20]
 800aed4:	e001      	b.n	800aeda <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	e049      	b.n	800af6e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800aeda:	7ffb      	ldrb	r3, [r7, #31]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	4413      	add	r3, r2
 800aee4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d015      	beq.n	800af1e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	18d0      	adds	r0, r2, r3
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefe:	fb02 f203 	mul.w	r2, r2, r3
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	4413      	add	r3, r2
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	4413      	add	r3, r2
 800af0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0c:	4619      	mov	r1, r3
 800af0e:	f000 ffe5 	bl	800bedc <memcpy>
        q->byteCount += NbBytesToCopy;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	695a      	ldr	r2, [r3, #20]
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800af28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2a:	3301      	adds	r3, #1
 800af2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	f4ff aeb0 	bcc.w	800ac98 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6919      	ldr	r1, [r3, #16]
 800af40:	7ffb      	ldrb	r3, [r7, #31]
 800af42:	4419      	add	r1, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	4299      	cmp	r1, r3
 800af4a:	d307      	bcc.n	800af5c <CircularQueue_Add+0x434>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6919      	ldr	r1, [r3, #16]
 800af50:	7ffb      	ldrb	r3, [r7, #31]
 800af52:	4419      	add	r1, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	1acb      	subs	r3, r1, r3
 800af5a:	e003      	b.n	800af64 <CircularQueue_Add+0x43c>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6919      	ldr	r1, [r3, #16]
 800af60:	7ffb      	ldrb	r3, [r7, #31]
 800af62:	440b      	add	r3, r1
 800af64:	4413      	add	r3, r2
 800af66:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	e000      	b.n	800af6e <CircularQueue_Add+0x446>
    return NULL;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3738      	adds	r7, #56	; 0x38
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	891b      	ldrh	r3, [r3, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <CircularQueue_Remove+0x1e>
 800af90:	2302      	movs	r3, #2
 800af92:	e000      	b.n	800af96 <CircularQueue_Remove+0x20>
 800af94:	2300      	movs	r3, #0
 800af96:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 80d4 	beq.w	800b150 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	891b      	ldrh	r3, [r3, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d121      	bne.n	800aff4 <CircularQueue_Remove+0x7e>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	4413      	add	r3, r2
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6819      	ldr	r1, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	1c58      	adds	r0, r3, #1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	4298      	cmp	r0, r3
 800afce:	d306      	bcc.n	800afde <CircularQueue_Remove+0x68>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68d8      	ldr	r0, [r3, #12]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	1ac3      	subs	r3, r0, r3
 800afda:	3301      	adds	r3, #1
 800afdc:	e002      	b.n	800afe4 <CircularQueue_Remove+0x6e>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	440b      	add	r3, r1
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b29b      	uxth	r3, r3
 800afea:	021b      	lsls	r3, r3, #8
 800afec:	b29b      	uxth	r3, r3
 800afee:	4413      	add	r3, r2
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	e001      	b.n	800aff8 <CircularQueue_Remove+0x82>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	891b      	ldrh	r3, [r3, #8]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7f1b      	ldrb	r3, [r3, #28]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d059      	beq.n	800b0bc <CircularQueue_Remove+0x146>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7f1b      	ldrb	r3, [r3, #28]
 800b00c:	f003 0302 	and.w	r3, r3, #2
 800b010:	2b00      	cmp	r3, #0
 800b012:	d153      	bne.n	800b0bc <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d103      	bne.n	800b028 <CircularQueue_Remove+0xb2>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	891b      	ldrh	r3, [r3, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d012      	beq.n	800b04e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68da      	ldr	r2, [r3, #12]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b030:	429a      	cmp	r2, r3
 800b032:	d943      	bls.n	800b0bc <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	891b      	ldrh	r3, [r3, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d03f      	beq.n	800b0bc <CircularQueue_Remove+0x146>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	8912      	ldrh	r2, [r2, #8]
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d236      	bcs.n	800b0bc <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68d9      	ldr	r1, [r3, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	1acb      	subs	r3, r1, r3
 800b05c:	441a      	add	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	891b      	ldrh	r3, [r3, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d121      	bne.n	800b0b4 <CircularQueue_Remove+0x13e>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	4413      	add	r3, r2
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6819      	ldr	r1, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	1c58      	adds	r0, r3, #1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4298      	cmp	r0, r3
 800b08e:	d306      	bcc.n	800b09e <CircularQueue_Remove+0x128>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68d8      	ldr	r0, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	1ac3      	subs	r3, r0, r3
 800b09a:	3301      	adds	r3, #1
 800b09c:	e002      	b.n	800b0a4 <CircularQueue_Remove+0x12e>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	440b      	add	r3, r1
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	e001      	b.n	800b0b8 <CircularQueue_Remove+0x142>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	891b      	ldrh	r3, [r3, #8]
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68d9      	ldr	r1, [r3, #12]
 800b0c4:	7afb      	ldrb	r3, [r7, #11]
 800b0c6:	4419      	add	r1, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	4299      	cmp	r1, r3
 800b0ce:	d307      	bcc.n	800b0e0 <CircularQueue_Remove+0x16a>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68d9      	ldr	r1, [r3, #12]
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	4419      	add	r1, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	1acb      	subs	r3, r1, r3
 800b0de:	e003      	b.n	800b0e8 <CircularQueue_Remove+0x172>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68d9      	ldr	r1, [r3, #12]
 800b0e4:	7afb      	ldrb	r3, [r7, #11]
 800b0e6:	440b      	add	r3, r1
 800b0e8:	4413      	add	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	8812      	ldrh	r2, [r2, #0]
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	7afa      	ldrb	r2, [r7, #11]
 800b0f8:	440a      	add	r2, r1
 800b0fa:	1a9a      	subs	r2, r3, r2
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01e      	beq.n	800b146 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	8812      	ldrh	r2, [r2, #0]
 800b110:	441a      	add	r2, r3
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	441a      	add	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d30a      	bcc.n	800b134 <CircularQueue_Remove+0x1be>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	8812      	ldrh	r2, [r2, #0]
 800b126:	441a      	add	r2, r3
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	441a      	add	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	e006      	b.n	800b142 <CircularQueue_Remove+0x1cc>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	8812      	ldrh	r2, [r2, #0]
 800b13c:	441a      	add	r2, r3
 800b13e:	7afb      	ldrb	r3, [r7, #11]
 800b140:	4413      	add	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	1e5a      	subs	r2, r3, #1
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800b150:	68fb      	ldr	r3, [r7, #12]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b15e:	b480      	push	{r7}
 800b160:	b087      	sub	sp, #28
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	891b      	ldrh	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <CircularQueue_Sense+0x1e>
 800b178:	2302      	movs	r3, #2
 800b17a:	e000      	b.n	800b17e <CircularQueue_Sense+0x20>
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 8093 	beq.w	800b2ba <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	891b      	ldrh	r3, [r3, #8]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d121      	bne.n	800b1e6 <CircularQueue_Sense+0x88>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6819      	ldr	r1, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	1c58      	adds	r0, r3, #1
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	d306      	bcc.n	800b1d0 <CircularQueue_Sense+0x72>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68d8      	ldr	r0, [r3, #12]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	1ac3      	subs	r3, r0, r3
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	e002      	b.n	800b1d6 <CircularQueue_Sense+0x78>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	440b      	add	r3, r1
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	e001      	b.n	800b1ea <CircularQueue_Sense+0x8c>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7f1b      	ldrb	r3, [r3, #28]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d04a      	beq.n	800b290 <CircularQueue_Sense+0x132>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	7f1b      	ldrb	r3, [r3, #28]
 800b1fe:	f003 0302 	and.w	r3, r3, #2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d144      	bne.n	800b290 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b20e:	4293      	cmp	r3, r2
 800b210:	d103      	bne.n	800b21a <CircularQueue_Sense+0xbc>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	891b      	ldrh	r3, [r3, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d012      	beq.n	800b240 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800b222:	429a      	cmp	r2, r3
 800b224:	d934      	bls.n	800b290 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	891b      	ldrh	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d030      	beq.n	800b290 <CircularQueue_Sense+0x132>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	8912      	ldrh	r2, [r2, #8]
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d227      	bcs.n	800b290 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	891b      	ldrh	r3, [r3, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d11d      	bne.n	800b288 <CircularQueue_Sense+0x12a>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	4413      	add	r3, r2
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6819      	ldr	r1, [r3, #0]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	1c58      	adds	r0, r3, #1
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	4298      	cmp	r0, r3
 800b266:	d305      	bcc.n	800b274 <CircularQueue_Sense+0x116>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	6938      	ldr	r0, [r7, #16]
 800b26e:	1ac3      	subs	r3, r0, r3
 800b270:	3301      	adds	r3, #1
 800b272:	e001      	b.n	800b278 <CircularQueue_Sense+0x11a>
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	3301      	adds	r3, #1
 800b278:	440b      	add	r3, r1
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	021b      	lsls	r3, r3, #8
 800b280:	b29b      	uxth	r3, r3
 800b282:	4413      	add	r3, r2
 800b284:	b29b      	uxth	r3, r3
 800b286:	e001      	b.n	800b28c <CircularQueue_Sense+0x12e>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	891b      	ldrh	r3, [r3, #8]
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	7bf9      	ldrb	r1, [r7, #15]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	4419      	add	r1, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4299      	cmp	r1, r3
 800b2a0:	d306      	bcc.n	800b2b0 <CircularQueue_Sense+0x152>
 800b2a2:	7bf9      	ldrb	r1, [r7, #15]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	4419      	add	r1, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	1acb      	subs	r3, r1, r3
 800b2ae:	e002      	b.n	800b2b6 <CircularQueue_Sense+0x158>
 800b2b0:	7bf9      	ldrb	r1, [r7, #15]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	440b      	add	r3, r1
 800b2b6:	4413      	add	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
  }
  return x;
 800b2ba:	697b      	ldr	r3, [r7, #20]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	371c      	adds	r7, #28
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	af00      	add	r7, sp, #0
  return;
 800b2cc:	bf00      	nop
}
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	af00      	add	r7, sp, #0
  return;
 800b2da:	bf00      	nop
}
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
  return;
 800b2e8:	bf00      	nop
}
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <HIDS_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
__weak void HIDS_Init( void )
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	af00      	add	r7, sp, #0
  return;
 800b2f6:	bf00      	nop
}
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b300:	b480      	push	{r7}
 800b302:	af00      	add	r7, sp, #0
  return;
 800b304:	bf00      	nop
}
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <HTS_Init>:
__weak void HTS_Init( void )
{
 800b30e:	b480      	push	{r7}
 800b310:	af00      	add	r7, sp, #0
  return;
 800b312:	bf00      	nop
}
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <IAS_Init>:
__weak void IAS_Init( void )
{
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
  return;
 800b320:	bf00      	nop
}
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <LLS_Init>:
__weak void LLS_Init( void )
{
 800b32a:	b480      	push	{r7}
 800b32c:	af00      	add	r7, sp, #0
  return;
 800b32e:	bf00      	nop
}
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <TPS_Init>:
__weak void TPS_Init( void )
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
  return;
 800b33c:	bf00      	nop
}
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b346:	b480      	push	{r7}
 800b348:	af00      	add	r7, sp, #0
  return;
 800b34a:	bf00      	nop
}
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
  return;
 800b358:	bf00      	nop
}
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b362:	b480      	push	{r7}
 800b364:	af00      	add	r7, sp, #0
  return;
 800b366:	bf00      	nop
}
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
  return;
 800b374:	bf00      	nop
}
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b37e:	b480      	push	{r7}
 800b380:	af00      	add	r7, sp, #0
  return;
 800b382:	bf00      	nop
}
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b390:	4b04      	ldr	r3, [pc, #16]	; (800b3a4 <SVCCTL_Init+0x18>)
 800b392:	2200      	movs	r2, #0
 800b394:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b396:	4b04      	ldr	r3, [pc, #16]	; (800b3a8 <SVCCTL_Init+0x1c>)
 800b398:	2200      	movs	r2, #0
 800b39a:	761a      	strb	r2, [r3, #24]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b39c:	f000 f806 	bl	800b3ac <SVCCTL_SvcInit>

  return;
 800b3a0:	bf00      	nop
}
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	2000028c 	.word	0x2000028c
 800b3a8:	200002ac 	.word	0x200002ac

0800b3ac <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  BLS_Init();
 800b3b0:	f7ff ff8a 	bl	800b2c8 <BLS_Init>

  CRS_STM_Init();
 800b3b4:	f7ff ff8f 	bl	800b2d6 <CRS_STM_Init>

  DIS_Init();
 800b3b8:	f7ff ff94 	bl	800b2e4 <DIS_Init>

  EDS_STM_Init();
 800b3bc:	f7fe fdd0 	bl	8009f60 <EDS_STM_Init>

  HIDS_Init();
 800b3c0:	f7ff ff97 	bl	800b2f2 <HIDS_Init>

  HRS_Init();
 800b3c4:	f7ff ff9c 	bl	800b300 <HRS_Init>

  HTS_Init();
 800b3c8:	f7ff ffa1 	bl	800b30e <HTS_Init>

  IAS_Init();
 800b3cc:	f7ff ffa6 	bl	800b31c <IAS_Init>

  LLS_Init();
 800b3d0:	f7ff ffab 	bl	800b32a <LLS_Init>

  TPS_Init();
 800b3d4:	f7ff ffb0 	bl	800b338 <TPS_Init>

  MOTENV_STM_Init();
 800b3d8:	f7ff ffb5 	bl	800b346 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b3dc:	f7ff f890 	bl	800a500 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b3e0:	f7ff ffb8 	bl	800b354 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b3e4:	f7ff ffc4 	bl	800b370 <BVOPUS_STM_Init>

  MESH_Init();
 800b3e8:	f7ff ffbb 	bl	800b362 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b3ec:	f7ff ffc7 	bl	800b37e <SVCCTL_InitCustomSvc>
  
  return;
 800b3f0:	bf00      	nop
}
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b3fc:	4b09      	ldr	r3, [pc, #36]	; (800b424 <SVCCTL_RegisterSvcHandler+0x30>)
 800b3fe:	7f1b      	ldrb	r3, [r3, #28]
 800b400:	4619      	mov	r1, r3
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <SVCCTL_RegisterSvcHandler+0x30>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <SVCCTL_RegisterSvcHandler+0x30>)
 800b40c:	7f1b      	ldrb	r3, [r3, #28]
 800b40e:	3301      	adds	r3, #1
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <SVCCTL_RegisterSvcHandler+0x30>)
 800b414:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b416:	bf00      	nop
}
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	2000028c 	.word	0x2000028c

0800b428 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800b430:	4b09      	ldr	r3, [pc, #36]	; (800b458 <SVCCTL_RegisterCltHandler+0x30>)
 800b432:	7e1b      	ldrb	r3, [r3, #24]
 800b434:	4619      	mov	r1, r3
 800b436:	4a08      	ldr	r2, [pc, #32]	; (800b458 <SVCCTL_RegisterCltHandler+0x30>)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800b43e:	4b06      	ldr	r3, [pc, #24]	; (800b458 <SVCCTL_RegisterCltHandler+0x30>)
 800b440:	7e1b      	ldrb	r3, [r3, #24]
 800b442:	3301      	adds	r3, #1
 800b444:	b2da      	uxtb	r2, r3
 800b446:	4b04      	ldr	r3, [pc, #16]	; (800b458 <SVCCTL_RegisterCltHandler+0x30>)
 800b448:	761a      	strb	r2, [r3, #24]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800b44a:	bf00      	nop
}
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	200002ac 	.word	0x200002ac

0800b45c <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3301      	adds	r3, #1
 800b468:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b46a:	2300      	movs	r3, #0
 800b46c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d13f      	bne.n	800b4f6 <SVCCTL_UserEvtRx+0x9a>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	3302      	adds	r3, #2
 800b47a:	60fb      	str	r3, [r7, #12]

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	b29b      	uxth	r3, r3
 800b482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b48a:	d132      	bne.n	800b4f2 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b48c:	2300      	movs	r3, #0
 800b48e:	757b      	strb	r3, [r7, #21]
 800b490:	e00d      	b.n	800b4ae <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b492:	7d7b      	ldrb	r3, [r7, #21]
 800b494:	4a27      	ldr	r2, [pc, #156]	; (800b534 <SVCCTL_UserEvtRx+0xd8>)
 800b496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
 800b49e:	4603      	mov	r3, r0
 800b4a0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d108      	bne.n	800b4ba <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b4a8:	7d7b      	ldrb	r3, [r7, #21]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	757b      	strb	r3, [r7, #21]
 800b4ae:	4b21      	ldr	r3, [pc, #132]	; (800b534 <SVCCTL_UserEvtRx+0xd8>)
 800b4b0:	7f1b      	ldrb	r3, [r3, #28]
 800b4b2:	7d7a      	ldrb	r2, [r7, #21]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d3ec      	bcc.n	800b492 <SVCCTL_UserEvtRx+0x36>
 800b4b8:	e000      	b.n	800b4bc <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800b4ba:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	757b      	strb	r3, [r7, #21]
 800b4c4:	e00d      	b.n	800b4e2 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800b4c6:	7d7b      	ldrb	r3, [r7, #21]
 800b4c8:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <SVCCTL_UserEvtRx+0xdc>)
 800b4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d108      	bne.n	800b4ee <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b4dc:	7d7b      	ldrb	r3, [r7, #21]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	757b      	strb	r3, [r7, #21]
 800b4e2:	4b15      	ldr	r3, [pc, #84]	; (800b538 <SVCCTL_UserEvtRx+0xdc>)
 800b4e4:	7e1b      	ldrb	r3, [r3, #24]
 800b4e6:	7d7a      	ldrb	r2, [r7, #21]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d3ec      	bcc.n	800b4c6 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800b4ec:	e002      	b.n	800b4f4 <SVCCTL_UserEvtRx+0x98>
              break;
 800b4ee:	bf00      	nop
          break;
 800b4f0:	e000      	b.n	800b4f4 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800b4f2:	bf00      	nop
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b4f4:	e000      	b.n	800b4f8 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800b4f6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d00f      	beq.n	800b51e <SVCCTL_UserEvtRx+0xc2>
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	dc10      	bgt.n	800b524 <SVCCTL_UserEvtRx+0xc8>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <SVCCTL_UserEvtRx+0xb0>
 800b506:	2b01      	cmp	r3, #1
 800b508:	d006      	beq.n	800b518 <SVCCTL_UserEvtRx+0xbc>
 800b50a:	e00b      	b.n	800b524 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7f7 f829 	bl	8002564 <SVCCTL_App_Notification>
 800b512:	4603      	mov	r3, r0
 800b514:	75bb      	strb	r3, [r7, #22]
      break;
 800b516:	e008      	b.n	800b52a <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b518:	2301      	movs	r3, #1
 800b51a:	75bb      	strb	r3, [r7, #22]
      break;
 800b51c:	e005      	b.n	800b52a <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b51e:	2300      	movs	r3, #0
 800b520:	75bb      	strb	r3, [r7, #22]
      break;
 800b522:	e002      	b.n	800b52a <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b524:	2301      	movs	r3, #1
 800b526:	75bb      	strb	r3, [r7, #22]
      break;
 800b528:	bf00      	nop
  }

  return (return_status);
 800b52a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	2000028c 	.word	0x2000028c
 800b538:	200002ac 	.word	0x200002ac

0800b53c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b540:	f7f9 f980 	bl	8004844 <HW_IPCC_Enable>

  return;
 800b544:	bf00      	nop
}
 800b546:	bd80      	pop	{r7, pc}

0800b548 <TL_Init>:


void TL_Init( void )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b54c:	4b10      	ldr	r3, [pc, #64]	; (800b590 <TL_Init+0x48>)
 800b54e:	4a11      	ldr	r2, [pc, #68]	; (800b594 <TL_Init+0x4c>)
 800b550:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <TL_Init+0x48>)
 800b554:	4a10      	ldr	r2, [pc, #64]	; (800b598 <TL_Init+0x50>)
 800b556:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b558:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <TL_Init+0x48>)
 800b55a:	4a10      	ldr	r2, [pc, #64]	; (800b59c <TL_Init+0x54>)
 800b55c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b55e:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <TL_Init+0x48>)
 800b560:	4a0f      	ldr	r2, [pc, #60]	; (800b5a0 <TL_Init+0x58>)
 800b562:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <TL_Init+0x48>)
 800b566:	4a0f      	ldr	r2, [pc, #60]	; (800b5a4 <TL_Init+0x5c>)
 800b568:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b56a:	4b09      	ldr	r3, [pc, #36]	; (800b590 <TL_Init+0x48>)
 800b56c:	4a0e      	ldr	r2, [pc, #56]	; (800b5a8 <TL_Init+0x60>)
 800b56e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <TL_Init+0x48>)
 800b572:	4a0e      	ldr	r2, [pc, #56]	; (800b5ac <TL_Init+0x64>)
 800b574:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b576:	4b06      	ldr	r3, [pc, #24]	; (800b590 <TL_Init+0x48>)
 800b578:	4a0d      	ldr	r2, [pc, #52]	; (800b5b0 <TL_Init+0x68>)
 800b57a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <TL_Init+0x48>)
 800b57e:	4a0d      	ldr	r2, [pc, #52]	; (800b5b4 <TL_Init+0x6c>)
 800b580:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b582:	4b03      	ldr	r3, [pc, #12]	; (800b590 <TL_Init+0x48>)
 800b584:	4a0c      	ldr	r2, [pc, #48]	; (800b5b8 <TL_Init+0x70>)
 800b586:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b588:	f7f9 f970 	bl	800486c <HW_IPCC_Init>

  return;
 800b58c:	bf00      	nop
}
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20030000 	.word	0x20030000
 800b594:	20030134 	.word	0x20030134
 800b598:	20030154 	.word	0x20030154
 800b59c:	20030164 	.word	0x20030164
 800b5a0:	20030170 	.word	0x20030170
 800b5a4:	20030178 	.word	0x20030178
 800b5a8:	20030180 	.word	0x20030180
 800b5ac:	20030188 	.word	0x20030188
 800b5b0:	200301a4 	.word	0x200301a4
 800b5b4:	200301a8 	.word	0x200301a8
 800b5b8:	200301b4 	.word	0x200301b4

0800b5bc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b5c8:	4811      	ldr	r0, [pc, #68]	; (800b610 <TL_BLE_Init+0x54>)
 800b5ca:	f7ff f9bd 	bl	800a948 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b5ce:	4b11      	ldr	r3, [pc, #68]	; (800b614 <TL_BLE_Init+0x58>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	4a0c      	ldr	r2, [pc, #48]	; (800b618 <TL_BLE_Init+0x5c>)
 800b5e8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	4a08      	ldr	r2, [pc, #32]	; (800b610 <TL_BLE_Init+0x54>)
 800b5ee:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b5f0:	f7f9 f952 	bl	8004898 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a08      	ldr	r2, [pc, #32]	; (800b61c <TL_BLE_Init+0x60>)
 800b5fa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	4a07      	ldr	r2, [pc, #28]	; (800b620 <TL_BLE_Init+0x64>)
 800b602:	6013      	str	r3, [r2, #0]

  return 0;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	200301d0 	.word	0x200301d0
 800b614:	20030000 	.word	0x20030000
 800b618:	20030a48 	.word	0x20030a48
 800b61c:	2000138c 	.word	0x2000138c
 800b620:	20001390 	.word	0x20001390

0800b624 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <TL_BLE_SendCmd+0x34>)
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2201      	movs	r2, #1
 800b638:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b63a:	4b07      	ldr	r3, [pc, #28]	; (800b658 <TL_BLE_SendCmd+0x34>)
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	2001      	movs	r0, #1
 800b644:	f000 f96c 	bl	800b920 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b648:	f7f9 f930 	bl	80048ac <HW_IPCC_BLE_SendCmd>

  return 0;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20030000 	.word	0x20030000

0800b65c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b662:	e01c      	b.n	800b69e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b664:	1d3b      	adds	r3, r7, #4
 800b666:	4619      	mov	r1, r3
 800b668:	4812      	ldr	r0, [pc, #72]	; (800b6b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b66a:	f7ff fa0c 	bl	800aa86 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7a5b      	ldrb	r3, [r3, #9]
 800b672:	2b0f      	cmp	r3, #15
 800b674:	d003      	beq.n	800b67e <HW_IPCC_BLE_RxEvtNot+0x22>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7a5b      	ldrb	r3, [r3, #9]
 800b67a:	2b0e      	cmp	r3, #14
 800b67c:	d105      	bne.n	800b68a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4619      	mov	r1, r3
 800b682:	2002      	movs	r0, #2
 800b684:	f000 f94c 	bl	800b920 <OutputDbgTrace>
 800b688:	e004      	b.n	800b694 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4619      	mov	r1, r3
 800b68e:	2003      	movs	r0, #3
 800b690:	f000 f946 	bl	800b920 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b694:	4b08      	ldr	r3, [pc, #32]	; (800b6b8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b69e:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b6a0:	f7ff f962 	bl	800a968 <LST_is_empty>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0dc      	beq.n	800b664 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b6aa:	bf00      	nop
}
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	200301d0 	.word	0x200301d0
 800b6b8:	2000138c 	.word	0x2000138c

0800b6bc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b6c0:	4b02      	ldr	r3, [pc, #8]	; (800b6cc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4798      	blx	r3

  return;
 800b6c6:	bf00      	nop
}
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20001390 	.word	0x20001390

0800b6d0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b6dc:	480d      	ldr	r0, [pc, #52]	; (800b714 <TL_SYS_Init+0x44>)
 800b6de:	f7ff f933 	bl	800a948 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <TL_SYS_Init+0x48>)
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4a08      	ldr	r2, [pc, #32]	; (800b714 <TL_SYS_Init+0x44>)
 800b6f4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b6f6:	f7f9 f8fb 	bl	80048f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a07      	ldr	r2, [pc, #28]	; (800b71c <TL_SYS_Init+0x4c>)
 800b700:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	4a06      	ldr	r2, [pc, #24]	; (800b720 <TL_SYS_Init+0x50>)
 800b708:	6013      	str	r3, [r2, #0]

  return 0;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200301d8 	.word	0x200301d8
 800b718:	20030000 	.word	0x20030000
 800b71c:	20001394 	.word	0x20001394
 800b720:	20001398 	.word	0x20001398

0800b724 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	460b      	mov	r3, r1
 800b72e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <TL_SYS_SendCmd+0x34>)
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2210      	movs	r2, #16
 800b738:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b73a:	4b07      	ldr	r3, [pc, #28]	; (800b758 <TL_SYS_SendCmd+0x34>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4619      	mov	r1, r3
 800b742:	2004      	movs	r0, #4
 800b744:	f000 f8ec 	bl	800b920 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b748:	f7f9 f8dc 	bl	8004904 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20030000 	.word	0x20030000

0800b75c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4619      	mov	r1, r3
 800b768:	2005      	movs	r0, #5
 800b76a:	f000 f8d9 	bl	800b920 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b76e:	4b05      	ldr	r3, [pc, #20]	; (800b784 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a03      	ldr	r2, [pc, #12]	; (800b780 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b774:	68d2      	ldr	r2, [r2, #12]
 800b776:	6812      	ldr	r2, [r2, #0]
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3

  return;
 800b77c:	bf00      	nop
}
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	20030000 	.word	0x20030000
 800b784:	20001394 	.word	0x20001394

0800b788 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b78e:	e00e      	b.n	800b7ae <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b790:	1d3b      	adds	r3, r7, #4
 800b792:	4619      	mov	r1, r3
 800b794:	480b      	ldr	r0, [pc, #44]	; (800b7c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b796:	f7ff f976 	bl	800aa86 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4619      	mov	r1, r3
 800b79e:	2006      	movs	r0, #6
 800b7a0:	f000 f8be 	bl	800b920 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b7a4:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <HW_IPCC_SYS_EvtNot+0x40>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b7ae:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b7b0:	f7ff f8da 	bl	800a968 <LST_is_empty>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0ea      	beq.n	800b790 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b7ba:	bf00      	nop
}
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	200301d8 	.word	0x200301d8
 800b7c8:	20001398 	.word	0x20001398

0800b7cc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b7d4:	4817      	ldr	r0, [pc, #92]	; (800b834 <TL_MM_Init+0x68>)
 800b7d6:	f7ff f8b7 	bl	800a948 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b7da:	4817      	ldr	r0, [pc, #92]	; (800b838 <TL_MM_Init+0x6c>)
 800b7dc:	f7ff f8b4 	bl	800a948 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b7e0:	4b16      	ldr	r3, [pc, #88]	; (800b83c <TL_MM_Init+0x70>)
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	4a16      	ldr	r2, [pc, #88]	; (800b840 <TL_MM_Init+0x74>)
 800b7e6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b7e8:	4b15      	ldr	r3, [pc, #84]	; (800b840 <TL_MM_Init+0x74>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6892      	ldr	r2, [r2, #8]
 800b7f0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b7f2:	4b13      	ldr	r3, [pc, #76]	; (800b840 <TL_MM_Init+0x74>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68d2      	ldr	r2, [r2, #12]
 800b7fa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b7fc:	4b10      	ldr	r3, [pc, #64]	; (800b840 <TL_MM_Init+0x74>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a0c      	ldr	r2, [pc, #48]	; (800b834 <TL_MM_Init+0x68>)
 800b802:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b804:	4b0e      	ldr	r3, [pc, #56]	; (800b840 <TL_MM_Init+0x74>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b80e:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <TL_MM_Init+0x74>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6852      	ldr	r2, [r2, #4]
 800b816:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b818:	4b09      	ldr	r3, [pc, #36]	; (800b840 <TL_MM_Init+0x74>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6912      	ldr	r2, [r2, #16]
 800b820:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b822:	4b07      	ldr	r3, [pc, #28]	; (800b840 <TL_MM_Init+0x74>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	6952      	ldr	r2, [r2, #20]
 800b82a:	619a      	str	r2, [r3, #24]

  return;
 800b82c:	bf00      	nop
}
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200301c0 	.word	0x200301c0
 800b838:	20001384 	.word	0x20001384
 800b83c:	20030000 	.word	0x20030000
 800b840:	2000139c 	.word	0x2000139c

0800b844 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4807      	ldr	r0, [pc, #28]	; (800b86c <TL_MM_EvtDone+0x28>)
 800b850:	f7ff f8d2 	bl	800a9f8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	2000      	movs	r0, #0
 800b858:	f000 f862 	bl	800b920 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b85c:	4804      	ldr	r0, [pc, #16]	; (800b870 <TL_MM_EvtDone+0x2c>)
 800b85e:	f7f9 f877 	bl	8004950 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b862:	bf00      	nop
}
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20001384 	.word	0x20001384
 800b870:	0800b875 	.word	0x0800b875

0800b874 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b87a:	e00c      	b.n	800b896 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b87c:	1d3b      	adds	r3, r7, #4
 800b87e:	4619      	mov	r1, r3
 800b880:	480a      	ldr	r0, [pc, #40]	; (800b8ac <SendFreeBuf+0x38>)
 800b882:	f7ff f900 	bl	800aa86 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b886:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <SendFreeBuf+0x3c>)
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff f8b1 	bl	800a9f8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b896:	4805      	ldr	r0, [pc, #20]	; (800b8ac <SendFreeBuf+0x38>)
 800b898:	f7ff f866 	bl	800a968 <LST_is_empty>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0ec      	beq.n	800b87c <SendFreeBuf+0x8>
  }

  return;
 800b8a2:	bf00      	nop
}
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20001384 	.word	0x20001384
 800b8b0:	20030000 	.word	0x20030000

0800b8b4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b8b8:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <TL_TRACES_Init+0x1c>)
 800b8ba:	f7ff f845 	bl	800a948 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <TL_TRACES_Init+0x20>)
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	4a03      	ldr	r2, [pc, #12]	; (800b8d0 <TL_TRACES_Init+0x1c>)
 800b8c4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b8c6:	f7f9 f879 	bl	80049bc <HW_IPCC_TRACES_Init>

  return;
 800b8ca:	bf00      	nop
}
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200301c8 	.word	0x200301c8
 800b8d4:	20030000 	.word	0x20030000

0800b8d8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b8de:	e008      	b.n	800b8f2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b8e0:	1d3b      	adds	r3, r7, #4
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4808      	ldr	r0, [pc, #32]	; (800b908 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b8e6:	f7ff f8ce 	bl	800aa86 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f80d 	bl	800b90c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b8f2:	4805      	ldr	r0, [pc, #20]	; (800b908 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b8f4:	f7ff f838 	bl	800a968 <LST_is_empty>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0f0      	beq.n	800b8e0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b8fe:	bf00      	nop
}
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	200301c8 	.word	0x200301c8

0800b90c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	2b06      	cmp	r3, #6
 800b930:	d845      	bhi.n	800b9be <OutputDbgTrace+0x9e>
 800b932:	a201      	add	r2, pc, #4	; (adr r2, 800b938 <OutputDbgTrace+0x18>)
 800b934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b938:	0800b955 	.word	0x0800b955
 800b93c:	0800b979 	.word	0x0800b979
 800b940:	0800b97f 	.word	0x0800b97f
 800b944:	0800b993 	.word	0x0800b993
 800b948:	0800b99f 	.word	0x0800b99f
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9b3 	.word	0x0800b9b3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	7a5b      	ldrb	r3, [r3, #9]
 800b95c:	2bff      	cmp	r3, #255	; 0xff
 800b95e:	d005      	beq.n	800b96c <OutputDbgTrace+0x4c>
 800b960:	2bff      	cmp	r3, #255	; 0xff
 800b962:	dc05      	bgt.n	800b970 <OutputDbgTrace+0x50>
 800b964:	2b0e      	cmp	r3, #14
 800b966:	d005      	beq.n	800b974 <OutputDbgTrace+0x54>
 800b968:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b96a:	e001      	b.n	800b970 <OutputDbgTrace+0x50>
          break;
 800b96c:	bf00      	nop
 800b96e:	e027      	b.n	800b9c0 <OutputDbgTrace+0xa0>
          break;
 800b970:	bf00      	nop
 800b972:	e025      	b.n	800b9c0 <OutputDbgTrace+0xa0>
          break;
 800b974:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b976:	e023      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b97c:	e020      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	7a5b      	ldrb	r3, [r3, #9]
 800b986:	2b0e      	cmp	r3, #14
 800b988:	d001      	beq.n	800b98e <OutputDbgTrace+0x6e>
 800b98a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b98c:	e000      	b.n	800b990 <OutputDbgTrace+0x70>
          break;
 800b98e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b990:	e016      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	7a5b      	ldrb	r3, [r3, #9]
 800b99a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b99c:	e010      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b9a2:	e00d      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	7a5b      	ldrb	r3, [r3, #9]
 800b9ac:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b9ae:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b9b0:	e006      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b9bc:	e000      	b.n	800b9c0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b9be:	bf00      	nop
  }

  return;
 800b9c0:	bf00      	nop
}
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <UTIL_LPM_Init+0x1c>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <UTIL_LPM_Init+0x20>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b9dc:	bf00      	nop
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	200013a0 	.word	0x200013a0
 800b9ec:	200013a4 	.word	0x200013a4

0800b9f0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800ba00:	613b      	str	r3, [r7, #16]
  return(result);
 800ba02:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ba04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba06:	b672      	cpsid	i
}
 800ba08:	bf00      	nop
  
  switch(state)
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d008      	beq.n	800ba22 <UTIL_LPM_SetOffMode+0x32>
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d10e      	bne.n	800ba32 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <UTIL_LPM_SetOffMode+0x5c>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	4a0b      	ldr	r2, [pc, #44]	; (800ba4c <UTIL_LPM_SetOffMode+0x5c>)
 800ba1e:	6013      	str	r3, [r2, #0]
      break;
 800ba20:	e008      	b.n	800ba34 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	43da      	mvns	r2, r3
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <UTIL_LPM_SetOffMode+0x5c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	4a07      	ldr	r2, [pc, #28]	; (800ba4c <UTIL_LPM_SetOffMode+0x5c>)
 800ba2e:	6013      	str	r3, [r2, #0]
      break;
 800ba30:	e000      	b.n	800ba34 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ba32:	bf00      	nop
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f383 8810 	msr	PRIMASK, r3
}
 800ba3e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ba40:	bf00      	nop
 800ba42:	371c      	adds	r7, #28
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr
 800ba4c:	200013a4 	.word	0x200013a4

0800ba50 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08c      	sub	sp, #48	; 0x30
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ba58:	4b67      	ldr	r3, [pc, #412]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ba5e:	4b66      	ldr	r3, [pc, #408]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4013      	ands	r3, r2
 800ba66:	4a64      	ldr	r2, [pc, #400]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800ba68:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800ba6a:	e083      	b.n	800bb74 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ba70:	e002      	b.n	800ba78 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	3301      	adds	r3, #1
 800ba76:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ba78:	4a60      	ldr	r2, [pc, #384]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ba80:	4b5f      	ldr	r3, [pc, #380]	; (800bc00 <UTIL_SEQ_Run+0x1b0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	401a      	ands	r2, r3
 800ba86:	4b5c      	ldr	r3, [pc, #368]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0f0      	beq.n	800ba72 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800ba90:	4a5a      	ldr	r2, [pc, #360]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ba98:	4b59      	ldr	r3, [pc, #356]	; (800bc00 <UTIL_SEQ_Run+0x1b0>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	401a      	ands	r2, r3
 800ba9e:	4b56      	ldr	r3, [pc, #344]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4013      	ands	r3, r2
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800baa6:	4a55      	ldr	r2, [pc, #340]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	4413      	add	r3, r2
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	4013      	ands	r3, r2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bab8:	4a50      	ldr	r2, [pc, #320]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	4413      	add	r3, r2
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bac6:	4a4d      	ldr	r2, [pc, #308]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	4413      	add	r3, r2
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	4013      	ands	r3, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 f99d 	bl	800be14 <SEQ_BitPosition>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	4b49      	ldr	r3, [pc, #292]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800bae0:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bae2:	4a46      	ldr	r2, [pc, #280]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4413      	add	r3, r2
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	4b45      	ldr	r3, [pc, #276]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2101      	movs	r1, #1
 800baf2:	fa01 f303 	lsl.w	r3, r1, r3
 800baf6:	43db      	mvns	r3, r3
 800baf8:	401a      	ands	r2, r3
 800bafa:	4940      	ldr	r1, [pc, #256]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	440b      	add	r3, r1
 800bb02:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb04:	f3ef 8310 	mrs	r3, PRIMASK
 800bb08:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb0a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bb0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb0e:	b672      	cpsid	i
}
 800bb10:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bb12:	4b3c      	ldr	r3, [pc, #240]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2201      	movs	r2, #1
 800bb18:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1c:	43da      	mvns	r2, r3
 800bb1e:	4b3a      	ldr	r3, [pc, #232]	; (800bc08 <UTIL_SEQ_Run+0x1b8>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4013      	ands	r3, r2
 800bb24:	4a38      	ldr	r2, [pc, #224]	; (800bc08 <UTIL_SEQ_Run+0x1b8>)
 800bb26:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bb28:	2302      	movs	r3, #2
 800bb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb2c:	e013      	b.n	800bb56 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	3b01      	subs	r3, #1
 800bb32:	4a32      	ldr	r2, [pc, #200]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800bb34:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bb38:	4b32      	ldr	r3, [pc, #200]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb42:	43da      	mvns	r2, r3
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	3b01      	subs	r3, #1
 800bb48:	400a      	ands	r2, r1
 800bb4a:	492c      	ldr	r1, [pc, #176]	; (800bbfc <UTIL_SEQ_Run+0x1ac>)
 800bb4c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	3b01      	subs	r3, #1
 800bb54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e8      	bne.n	800bb2e <UTIL_SEQ_Run+0xde>
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f383 8810 	msr	PRIMASK, r3
}
 800bb66:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bb68:	4b26      	ldr	r3, [pc, #152]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a27      	ldr	r2, [pc, #156]	; (800bc0c <UTIL_SEQ_Run+0x1bc>)
 800bb6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb72:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800bb74:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <UTIL_SEQ_Run+0x1b8>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	4b21      	ldr	r3, [pc, #132]	; (800bc00 <UTIL_SEQ_Run+0x1b0>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	401a      	ands	r2, r3
 800bb7e:	4b1e      	ldr	r3, [pc, #120]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4013      	ands	r3, r2
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <UTIL_SEQ_Run+0x148>
 800bb88:	4b21      	ldr	r3, [pc, #132]	; (800bc10 <UTIL_SEQ_Run+0x1c0>)
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	4b21      	ldr	r3, [pc, #132]	; (800bc14 <UTIL_SEQ_Run+0x1c4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4013      	ands	r3, r2
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f43f af6a 	beq.w	800ba6c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bb98:	4b1a      	ldr	r3, [pc, #104]	; (800bc04 <UTIL_SEQ_Run+0x1b4>)
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bba0:	f000 f92a 	bl	800bdf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bba4:	f3ef 8310 	mrs	r3, PRIMASK
 800bba8:	613b      	str	r3, [r7, #16]
  return(result);
 800bbaa:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bbac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbae:	b672      	cpsid	i
}
 800bbb0:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800bbb2:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <UTIL_SEQ_Run+0x1b8>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b12      	ldr	r3, [pc, #72]	; (800bc00 <UTIL_SEQ_Run+0x1b0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	401a      	ands	r2, r3
 800bbbc:	4b0e      	ldr	r3, [pc, #56]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d108      	bne.n	800bbd8 <UTIL_SEQ_Run+0x188>
 800bbc6:	4b12      	ldr	r3, [pc, #72]	; (800bc10 <UTIL_SEQ_Run+0x1c0>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	4b12      	ldr	r3, [pc, #72]	; (800bc14 <UTIL_SEQ_Run+0x1c4>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800bbd4:	f7f4 fed3 	bl	800097e <UTIL_SEQ_Idle>
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f383 8810 	msr	PRIMASK, r3
}
 800bbe2:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800bbe4:	f000 f90f 	bl	800be06 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bbe8:	4a03      	ldr	r2, [pc, #12]	; (800bbf8 <UTIL_SEQ_Run+0x1a8>)
 800bbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbec:	6013      	str	r3, [r2, #0]

  return;
 800bbee:	bf00      	nop
}
 800bbf0:	3730      	adds	r7, #48	; 0x30
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000044 	.word	0x20000044
 800bbfc:	20001438 	.word	0x20001438
 800bc00:	20000040 	.word	0x20000040
 800bc04:	200013b4 	.word	0x200013b4
 800bc08:	200013a8 	.word	0x200013a8
 800bc0c:	200013b8 	.word	0x200013b8
 800bc10:	200013ac 	.word	0x200013ac
 800bc14:	200013b0 	.word	0x200013b0

0800bc18 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc24:	f3ef 8310 	mrs	r3, PRIMASK
 800bc28:	617b      	str	r3, [r7, #20]
  return(result);
 800bc2a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bc2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc2e:	b672      	cpsid	i
}
 800bc30:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f000 f8ee 	bl	800be14 <SEQ_BitPosition>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4a06      	ldr	r2, [pc, #24]	; (800bc58 <UTIL_SEQ_RegTask+0x40>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	f383 8810 	msr	PRIMASK, r3
}
 800bc4e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bc50:	bf00      	nop
}
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	200013b8 	.word	0x200013b8

0800bc5c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc66:	f3ef 8310 	mrs	r3, PRIMASK
 800bc6a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bc6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc70:	b672      	cpsid	i
}
 800bc72:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bc74:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <UTIL_SEQ_SetTask+0x50>)
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	4a0b      	ldr	r2, [pc, #44]	; (800bcac <UTIL_SEQ_SetTask+0x50>)
 800bc7e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bc80:	4a0b      	ldr	r2, [pc, #44]	; (800bcb0 <UTIL_SEQ_SetTask+0x54>)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	4908      	ldr	r1, [pc, #32]	; (800bcb0 <UTIL_SEQ_SetTask+0x54>)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f383 8810 	msr	PRIMASK, r3
}
 800bc9e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bca0:	bf00      	nop
}
 800bca2:	371c      	adds	r7, #28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	200013a8 	.word	0x200013a8
 800bcb0:	20001438 	.word	0x20001438

0800bcb4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b087      	sub	sp, #28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bcc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bcc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcc6:	b672      	cpsid	i
}
 800bcc8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	43da      	mvns	r2, r3
 800bcce:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <UTIL_SEQ_PauseTask+0x3c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	4a06      	ldr	r2, [pc, #24]	; (800bcf0 <UTIL_SEQ_PauseTask+0x3c>)
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f383 8810 	msr	PRIMASK, r3
}
 800bce2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bce4:	bf00      	nop
}
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	20000040 	.word	0x20000040

0800bcf4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcfc:	f3ef 8310 	mrs	r3, PRIMASK
 800bd00:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd02:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd06:	b672      	cpsid	i
}
 800bd08:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bd0a:	4b09      	ldr	r3, [pc, #36]	; (800bd30 <UTIL_SEQ_ResumeTask+0x3c>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	4a07      	ldr	r2, [pc, #28]	; (800bd30 <UTIL_SEQ_ResumeTask+0x3c>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f383 8810 	msr	PRIMASK, r3
}
 800bd20:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd22:	bf00      	nop
}
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	20000040 	.word	0x20000040

0800bd34 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd3c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd40:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd42:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd46:	b672      	cpsid	i
}
 800bd48:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bd4a:	4b09      	ldr	r3, [pc, #36]	; (800bd70 <UTIL_SEQ_SetEvt+0x3c>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	4a07      	ldr	r2, [pc, #28]	; (800bd70 <UTIL_SEQ_SetEvt+0x3c>)
 800bd54:	6013      	str	r3, [r2, #0]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f383 8810 	msr	PRIMASK, r3
}
 800bd60:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd62:	bf00      	nop
}
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	200013ac 	.word	0x200013ac

0800bd74 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800bd7c:	4b1b      	ldr	r3, [pc, #108]	; (800bdec <UTIL_SEQ_WaitEvt+0x78>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800bd82:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <UTIL_SEQ_WaitEvt+0x78>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d102      	bne.n	800bd92 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
 800bd90:	e005      	b.n	800bd9e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800bd92:	4b16      	ldr	r3, [pc, #88]	; (800bdec <UTIL_SEQ_WaitEvt+0x78>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2201      	movs	r2, #1
 800bd98:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800bd9e:	4b14      	ldr	r3, [pc, #80]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800bda4:	4a12      	ldr	r2, [pc, #72]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800bdaa:	e005      	b.n	800bdb8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800bdac:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6978      	ldr	r0, [r7, #20]
 800bdb4:	f7f4 fdea 	bl	800098c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <UTIL_SEQ_WaitEvt+0x80>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0f2      	beq.n	800bdac <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800bdc6:	4a09      	ldr	r2, [pc, #36]	; (800bdec <UTIL_SEQ_WaitEvt+0x78>)
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800bdcc:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	43da      	mvns	r2, r3
 800bdd2:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <UTIL_SEQ_WaitEvt+0x80>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	4a06      	ldr	r2, [pc, #24]	; (800bdf4 <UTIL_SEQ_WaitEvt+0x80>)
 800bdda:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800bddc:	4a04      	ldr	r2, [pc, #16]	; (800bdf0 <UTIL_SEQ_WaitEvt+0x7c>)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6013      	str	r3, [r2, #0]

  return;
 800bde2:	bf00      	nop
}
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	200013b4 	.word	0x200013b4
 800bdf0:	200013b0 	.word	0x200013b0
 800bdf4:	200013ac 	.word	0x200013ac

0800bdf8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bdfc:	bf00      	nop
}
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800be06:	b480      	push	{r7}
 800be08:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800be0a:	bf00      	nop
}
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	041b      	lsls	r3, r3, #16
 800be26:	2b00      	cmp	r3, #0
 800be28:	d104      	bne.n	800be34 <SEQ_BitPosition+0x20>
 800be2a:	2310      	movs	r3, #16
 800be2c:	73fb      	strb	r3, [r7, #15]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	041b      	lsls	r3, r3, #16
 800be32:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <SEQ_BitPosition+0x36>
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
 800be40:	3308      	adds	r3, #8
 800be42:	73fb      	strb	r3, [r7, #15]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d105      	bne.n	800be60 <SEQ_BitPosition+0x4c>
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	3304      	adds	r3, #4
 800be58:	73fb      	strb	r3, [r7, #15]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	011b      	lsls	r3, r3, #4
 800be5e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	0f1b      	lsrs	r3, r3, #28
 800be64:	4a07      	ldr	r2, [pc, #28]	; (800be84 <SEQ_BitPosition+0x70>)
 800be66:	5cd2      	ldrb	r2, [r2, r3]
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	4413      	add	r3, r2
 800be6c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
 800be70:	f1c3 031f 	rsb	r3, r3, #31
 800be74:	b2db      	uxtb	r3, r3
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	0800dcc8 	.word	0x0800dcc8

0800be88 <__errno>:
 800be88:	4b01      	ldr	r3, [pc, #4]	; (800be90 <__errno+0x8>)
 800be8a:	6818      	ldr	r0, [r3, #0]
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20000048 	.word	0x20000048

0800be94 <__libc_init_array>:
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	4d0d      	ldr	r5, [pc, #52]	; (800becc <__libc_init_array+0x38>)
 800be98:	4c0d      	ldr	r4, [pc, #52]	; (800bed0 <__libc_init_array+0x3c>)
 800be9a:	1b64      	subs	r4, r4, r5
 800be9c:	10a4      	asrs	r4, r4, #2
 800be9e:	2600      	movs	r6, #0
 800bea0:	42a6      	cmp	r6, r4
 800bea2:	d109      	bne.n	800beb8 <__libc_init_array+0x24>
 800bea4:	4d0b      	ldr	r5, [pc, #44]	; (800bed4 <__libc_init_array+0x40>)
 800bea6:	4c0c      	ldr	r4, [pc, #48]	; (800bed8 <__libc_init_array+0x44>)
 800bea8:	f001 f858 	bl	800cf5c <_init>
 800beac:	1b64      	subs	r4, r4, r5
 800beae:	10a4      	asrs	r4, r4, #2
 800beb0:	2600      	movs	r6, #0
 800beb2:	42a6      	cmp	r6, r4
 800beb4:	d105      	bne.n	800bec2 <__libc_init_array+0x2e>
 800beb6:	bd70      	pop	{r4, r5, r6, pc}
 800beb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bebc:	4798      	blx	r3
 800bebe:	3601      	adds	r6, #1
 800bec0:	e7ee      	b.n	800bea0 <__libc_init_array+0xc>
 800bec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec6:	4798      	blx	r3
 800bec8:	3601      	adds	r6, #1
 800beca:	e7f2      	b.n	800beb2 <__libc_init_array+0x1e>
 800becc:	0800dd78 	.word	0x0800dd78
 800bed0:	0800dd78 	.word	0x0800dd78
 800bed4:	0800dd78 	.word	0x0800dd78
 800bed8:	0800dd7c 	.word	0x0800dd7c

0800bedc <memcpy>:
 800bedc:	440a      	add	r2, r1
 800bede:	4291      	cmp	r1, r2
 800bee0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee4:	d100      	bne.n	800bee8 <memcpy+0xc>
 800bee6:	4770      	bx	lr
 800bee8:	b510      	push	{r4, lr}
 800beea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bef2:	4291      	cmp	r1, r2
 800bef4:	d1f9      	bne.n	800beea <memcpy+0xe>
 800bef6:	bd10      	pop	{r4, pc}

0800bef8 <memset>:
 800bef8:	4402      	add	r2, r0
 800befa:	4603      	mov	r3, r0
 800befc:	4293      	cmp	r3, r2
 800befe:	d100      	bne.n	800bf02 <memset+0xa>
 800bf00:	4770      	bx	lr
 800bf02:	f803 1b01 	strb.w	r1, [r3], #1
 800bf06:	e7f9      	b.n	800befc <memset+0x4>

0800bf08 <iprintf>:
 800bf08:	b40f      	push	{r0, r1, r2, r3}
 800bf0a:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <iprintf+0x2c>)
 800bf0c:	b513      	push	{r0, r1, r4, lr}
 800bf0e:	681c      	ldr	r4, [r3, #0]
 800bf10:	b124      	cbz	r4, 800bf1c <iprintf+0x14>
 800bf12:	69a3      	ldr	r3, [r4, #24]
 800bf14:	b913      	cbnz	r3, 800bf1c <iprintf+0x14>
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 fa74 	bl	800c404 <__sinit>
 800bf1c:	ab05      	add	r3, sp, #20
 800bf1e:	9a04      	ldr	r2, [sp, #16]
 800bf20:	68a1      	ldr	r1, [r4, #8]
 800bf22:	9301      	str	r3, [sp, #4]
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 fc45 	bl	800c7b4 <_vfiprintf_r>
 800bf2a:	b002      	add	sp, #8
 800bf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf30:	b004      	add	sp, #16
 800bf32:	4770      	bx	lr
 800bf34:	20000048 	.word	0x20000048

0800bf38 <putchar>:
 800bf38:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <putchar+0x28>)
 800bf3a:	b513      	push	{r0, r1, r4, lr}
 800bf3c:	681c      	ldr	r4, [r3, #0]
 800bf3e:	4601      	mov	r1, r0
 800bf40:	b134      	cbz	r4, 800bf50 <putchar+0x18>
 800bf42:	69a3      	ldr	r3, [r4, #24]
 800bf44:	b923      	cbnz	r3, 800bf50 <putchar+0x18>
 800bf46:	9001      	str	r0, [sp, #4]
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fa5b 	bl	800c404 <__sinit>
 800bf4e:	9901      	ldr	r1, [sp, #4]
 800bf50:	68a2      	ldr	r2, [r4, #8]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b002      	add	sp, #8
 800bf56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf5a:	f000 beef 	b.w	800cd3c <_putc_r>
 800bf5e:	bf00      	nop
 800bf60:	20000048 	.word	0x20000048

0800bf64 <_puts_r>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	460e      	mov	r6, r1
 800bf68:	4605      	mov	r5, r0
 800bf6a:	b118      	cbz	r0, 800bf74 <_puts_r+0x10>
 800bf6c:	6983      	ldr	r3, [r0, #24]
 800bf6e:	b90b      	cbnz	r3, 800bf74 <_puts_r+0x10>
 800bf70:	f000 fa48 	bl	800c404 <__sinit>
 800bf74:	69ab      	ldr	r3, [r5, #24]
 800bf76:	68ac      	ldr	r4, [r5, #8]
 800bf78:	b913      	cbnz	r3, 800bf80 <_puts_r+0x1c>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 fa42 	bl	800c404 <__sinit>
 800bf80:	4b2c      	ldr	r3, [pc, #176]	; (800c034 <_puts_r+0xd0>)
 800bf82:	429c      	cmp	r4, r3
 800bf84:	d120      	bne.n	800bfc8 <_puts_r+0x64>
 800bf86:	686c      	ldr	r4, [r5, #4]
 800bf88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf8a:	07db      	lsls	r3, r3, #31
 800bf8c:	d405      	bmi.n	800bf9a <_puts_r+0x36>
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	0598      	lsls	r0, r3, #22
 800bf92:	d402      	bmi.n	800bf9a <_puts_r+0x36>
 800bf94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf96:	f000 fad3 	bl	800c540 <__retarget_lock_acquire_recursive>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	0719      	lsls	r1, r3, #28
 800bf9e:	d51d      	bpl.n	800bfdc <_puts_r+0x78>
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	b1db      	cbz	r3, 800bfdc <_puts_r+0x78>
 800bfa4:	3e01      	subs	r6, #1
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfac:	3b01      	subs	r3, #1
 800bfae:	60a3      	str	r3, [r4, #8]
 800bfb0:	bb39      	cbnz	r1, 800c002 <_puts_r+0x9e>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da38      	bge.n	800c028 <_puts_r+0xc4>
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	210a      	movs	r1, #10
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f848 	bl	800c050 <__swbuf_r>
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d011      	beq.n	800bfe8 <_puts_r+0x84>
 800bfc4:	250a      	movs	r5, #10
 800bfc6:	e011      	b.n	800bfec <_puts_r+0x88>
 800bfc8:	4b1b      	ldr	r3, [pc, #108]	; (800c038 <_puts_r+0xd4>)
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d101      	bne.n	800bfd2 <_puts_r+0x6e>
 800bfce:	68ac      	ldr	r4, [r5, #8]
 800bfd0:	e7da      	b.n	800bf88 <_puts_r+0x24>
 800bfd2:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <_puts_r+0xd8>)
 800bfd4:	429c      	cmp	r4, r3
 800bfd6:	bf08      	it	eq
 800bfd8:	68ec      	ldreq	r4, [r5, #12]
 800bfda:	e7d5      	b.n	800bf88 <_puts_r+0x24>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f888 	bl	800c0f4 <__swsetup_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d0dd      	beq.n	800bfa4 <_puts_r+0x40>
 800bfe8:	f04f 35ff 	mov.w	r5, #4294967295
 800bfec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfee:	07da      	lsls	r2, r3, #31
 800bff0:	d405      	bmi.n	800bffe <_puts_r+0x9a>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	059b      	lsls	r3, r3, #22
 800bff6:	d402      	bmi.n	800bffe <_puts_r+0x9a>
 800bff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffa:	f000 faa2 	bl	800c542 <__retarget_lock_release_recursive>
 800bffe:	4628      	mov	r0, r5
 800c000:	bd70      	pop	{r4, r5, r6, pc}
 800c002:	2b00      	cmp	r3, #0
 800c004:	da04      	bge.n	800c010 <_puts_r+0xac>
 800c006:	69a2      	ldr	r2, [r4, #24]
 800c008:	429a      	cmp	r2, r3
 800c00a:	dc06      	bgt.n	800c01a <_puts_r+0xb6>
 800c00c:	290a      	cmp	r1, #10
 800c00e:	d004      	beq.n	800c01a <_puts_r+0xb6>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	7019      	strb	r1, [r3, #0]
 800c018:	e7c5      	b.n	800bfa6 <_puts_r+0x42>
 800c01a:	4622      	mov	r2, r4
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f817 	bl	800c050 <__swbuf_r>
 800c022:	3001      	adds	r0, #1
 800c024:	d1bf      	bne.n	800bfa6 <_puts_r+0x42>
 800c026:	e7df      	b.n	800bfe8 <_puts_r+0x84>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	250a      	movs	r5, #10
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	6022      	str	r2, [r4, #0]
 800c030:	701d      	strb	r5, [r3, #0]
 800c032:	e7db      	b.n	800bfec <_puts_r+0x88>
 800c034:	0800dcfc 	.word	0x0800dcfc
 800c038:	0800dd1c 	.word	0x0800dd1c
 800c03c:	0800dcdc 	.word	0x0800dcdc

0800c040 <puts>:
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <puts+0xc>)
 800c042:	4601      	mov	r1, r0
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f7ff bf8d 	b.w	800bf64 <_puts_r>
 800c04a:	bf00      	nop
 800c04c:	20000048 	.word	0x20000048

0800c050 <__swbuf_r>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	460e      	mov	r6, r1
 800c054:	4614      	mov	r4, r2
 800c056:	4605      	mov	r5, r0
 800c058:	b118      	cbz	r0, 800c062 <__swbuf_r+0x12>
 800c05a:	6983      	ldr	r3, [r0, #24]
 800c05c:	b90b      	cbnz	r3, 800c062 <__swbuf_r+0x12>
 800c05e:	f000 f9d1 	bl	800c404 <__sinit>
 800c062:	4b21      	ldr	r3, [pc, #132]	; (800c0e8 <__swbuf_r+0x98>)
 800c064:	429c      	cmp	r4, r3
 800c066:	d12b      	bne.n	800c0c0 <__swbuf_r+0x70>
 800c068:	686c      	ldr	r4, [r5, #4]
 800c06a:	69a3      	ldr	r3, [r4, #24]
 800c06c:	60a3      	str	r3, [r4, #8]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	071a      	lsls	r2, r3, #28
 800c072:	d52f      	bpl.n	800c0d4 <__swbuf_r+0x84>
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	b36b      	cbz	r3, 800c0d4 <__swbuf_r+0x84>
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	6820      	ldr	r0, [r4, #0]
 800c07c:	1ac0      	subs	r0, r0, r3
 800c07e:	6963      	ldr	r3, [r4, #20]
 800c080:	b2f6      	uxtb	r6, r6
 800c082:	4283      	cmp	r3, r0
 800c084:	4637      	mov	r7, r6
 800c086:	dc04      	bgt.n	800c092 <__swbuf_r+0x42>
 800c088:	4621      	mov	r1, r4
 800c08a:	4628      	mov	r0, r5
 800c08c:	f000 f926 	bl	800c2dc <_fflush_r>
 800c090:	bb30      	cbnz	r0, 800c0e0 <__swbuf_r+0x90>
 800c092:	68a3      	ldr	r3, [r4, #8]
 800c094:	3b01      	subs	r3, #1
 800c096:	60a3      	str	r3, [r4, #8]
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	6022      	str	r2, [r4, #0]
 800c09e:	701e      	strb	r6, [r3, #0]
 800c0a0:	6963      	ldr	r3, [r4, #20]
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	d004      	beq.n	800c0b2 <__swbuf_r+0x62>
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	07db      	lsls	r3, r3, #31
 800c0ac:	d506      	bpl.n	800c0bc <__swbuf_r+0x6c>
 800c0ae:	2e0a      	cmp	r6, #10
 800c0b0:	d104      	bne.n	800c0bc <__swbuf_r+0x6c>
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f000 f911 	bl	800c2dc <_fflush_r>
 800c0ba:	b988      	cbnz	r0, 800c0e0 <__swbuf_r+0x90>
 800c0bc:	4638      	mov	r0, r7
 800c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <__swbuf_r+0x9c>)
 800c0c2:	429c      	cmp	r4, r3
 800c0c4:	d101      	bne.n	800c0ca <__swbuf_r+0x7a>
 800c0c6:	68ac      	ldr	r4, [r5, #8]
 800c0c8:	e7cf      	b.n	800c06a <__swbuf_r+0x1a>
 800c0ca:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <__swbuf_r+0xa0>)
 800c0cc:	429c      	cmp	r4, r3
 800c0ce:	bf08      	it	eq
 800c0d0:	68ec      	ldreq	r4, [r5, #12]
 800c0d2:	e7ca      	b.n	800c06a <__swbuf_r+0x1a>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 f80c 	bl	800c0f4 <__swsetup_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d0cb      	beq.n	800c078 <__swbuf_r+0x28>
 800c0e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e4:	e7ea      	b.n	800c0bc <__swbuf_r+0x6c>
 800c0e6:	bf00      	nop
 800c0e8:	0800dcfc 	.word	0x0800dcfc
 800c0ec:	0800dd1c 	.word	0x0800dd1c
 800c0f0:	0800dcdc 	.word	0x0800dcdc

0800c0f4 <__swsetup_r>:
 800c0f4:	4b32      	ldr	r3, [pc, #200]	; (800c1c0 <__swsetup_r+0xcc>)
 800c0f6:	b570      	push	{r4, r5, r6, lr}
 800c0f8:	681d      	ldr	r5, [r3, #0]
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	b125      	cbz	r5, 800c10a <__swsetup_r+0x16>
 800c100:	69ab      	ldr	r3, [r5, #24]
 800c102:	b913      	cbnz	r3, 800c10a <__swsetup_r+0x16>
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f97d 	bl	800c404 <__sinit>
 800c10a:	4b2e      	ldr	r3, [pc, #184]	; (800c1c4 <__swsetup_r+0xd0>)
 800c10c:	429c      	cmp	r4, r3
 800c10e:	d10f      	bne.n	800c130 <__swsetup_r+0x3c>
 800c110:	686c      	ldr	r4, [r5, #4]
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c118:	0719      	lsls	r1, r3, #28
 800c11a:	d42c      	bmi.n	800c176 <__swsetup_r+0x82>
 800c11c:	06dd      	lsls	r5, r3, #27
 800c11e:	d411      	bmi.n	800c144 <__swsetup_r+0x50>
 800c120:	2309      	movs	r3, #9
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	f04f 30ff 	mov.w	r0, #4294967295
 800c12e:	e03e      	b.n	800c1ae <__swsetup_r+0xba>
 800c130:	4b25      	ldr	r3, [pc, #148]	; (800c1c8 <__swsetup_r+0xd4>)
 800c132:	429c      	cmp	r4, r3
 800c134:	d101      	bne.n	800c13a <__swsetup_r+0x46>
 800c136:	68ac      	ldr	r4, [r5, #8]
 800c138:	e7eb      	b.n	800c112 <__swsetup_r+0x1e>
 800c13a:	4b24      	ldr	r3, [pc, #144]	; (800c1cc <__swsetup_r+0xd8>)
 800c13c:	429c      	cmp	r4, r3
 800c13e:	bf08      	it	eq
 800c140:	68ec      	ldreq	r4, [r5, #12]
 800c142:	e7e6      	b.n	800c112 <__swsetup_r+0x1e>
 800c144:	0758      	lsls	r0, r3, #29
 800c146:	d512      	bpl.n	800c16e <__swsetup_r+0x7a>
 800c148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c14a:	b141      	cbz	r1, 800c15e <__swsetup_r+0x6a>
 800c14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c150:	4299      	cmp	r1, r3
 800c152:	d002      	beq.n	800c15a <__swsetup_r+0x66>
 800c154:	4630      	mov	r0, r6
 800c156:	f000 fa59 	bl	800c60c <_free_r>
 800c15a:	2300      	movs	r3, #0
 800c15c:	6363      	str	r3, [r4, #52]	; 0x34
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	2300      	movs	r3, #0
 800c168:	6063      	str	r3, [r4, #4]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f043 0308 	orr.w	r3, r3, #8
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	b94b      	cbnz	r3, 800c18e <__swsetup_r+0x9a>
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c184:	d003      	beq.n	800c18e <__swsetup_r+0x9a>
 800c186:	4621      	mov	r1, r4
 800c188:	4630      	mov	r0, r6
 800c18a:	f000 f9ff 	bl	800c58c <__smakebuf_r>
 800c18e:	89a0      	ldrh	r0, [r4, #12]
 800c190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c194:	f010 0301 	ands.w	r3, r0, #1
 800c198:	d00a      	beq.n	800c1b0 <__swsetup_r+0xbc>
 800c19a:	2300      	movs	r3, #0
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	6963      	ldr	r3, [r4, #20]
 800c1a0:	425b      	negs	r3, r3
 800c1a2:	61a3      	str	r3, [r4, #24]
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	b943      	cbnz	r3, 800c1ba <__swsetup_r+0xc6>
 800c1a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1ac:	d1ba      	bne.n	800c124 <__swsetup_r+0x30>
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	0781      	lsls	r1, r0, #30
 800c1b2:	bf58      	it	pl
 800c1b4:	6963      	ldrpl	r3, [r4, #20]
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	e7f4      	b.n	800c1a4 <__swsetup_r+0xb0>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e7f7      	b.n	800c1ae <__swsetup_r+0xba>
 800c1be:	bf00      	nop
 800c1c0:	20000048 	.word	0x20000048
 800c1c4:	0800dcfc 	.word	0x0800dcfc
 800c1c8:	0800dd1c 	.word	0x0800dd1c
 800c1cc:	0800dcdc 	.word	0x0800dcdc

0800c1d0 <__sflush_r>:
 800c1d0:	898a      	ldrh	r2, [r1, #12]
 800c1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	0710      	lsls	r0, r2, #28
 800c1da:	460c      	mov	r4, r1
 800c1dc:	d458      	bmi.n	800c290 <__sflush_r+0xc0>
 800c1de:	684b      	ldr	r3, [r1, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dc05      	bgt.n	800c1f0 <__sflush_r+0x20>
 800c1e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	dc02      	bgt.n	800c1f0 <__sflush_r+0x20>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f2:	2e00      	cmp	r6, #0
 800c1f4:	d0f9      	beq.n	800c1ea <__sflush_r+0x1a>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1fc:	682f      	ldr	r7, [r5, #0]
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	d032      	beq.n	800c268 <__sflush_r+0x98>
 800c202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	075a      	lsls	r2, r3, #29
 800c208:	d505      	bpl.n	800c216 <__sflush_r+0x46>
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	1ac0      	subs	r0, r0, r3
 800c20e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c210:	b10b      	cbz	r3, 800c216 <__sflush_r+0x46>
 800c212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c214:	1ac0      	subs	r0, r0, r3
 800c216:	2300      	movs	r3, #0
 800c218:	4602      	mov	r2, r0
 800c21a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c21c:	6a21      	ldr	r1, [r4, #32]
 800c21e:	4628      	mov	r0, r5
 800c220:	47b0      	blx	r6
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	d106      	bne.n	800c236 <__sflush_r+0x66>
 800c228:	6829      	ldr	r1, [r5, #0]
 800c22a:	291d      	cmp	r1, #29
 800c22c:	d82c      	bhi.n	800c288 <__sflush_r+0xb8>
 800c22e:	4a2a      	ldr	r2, [pc, #168]	; (800c2d8 <__sflush_r+0x108>)
 800c230:	40ca      	lsrs	r2, r1
 800c232:	07d6      	lsls	r6, r2, #31
 800c234:	d528      	bpl.n	800c288 <__sflush_r+0xb8>
 800c236:	2200      	movs	r2, #0
 800c238:	6062      	str	r2, [r4, #4]
 800c23a:	04d9      	lsls	r1, r3, #19
 800c23c:	6922      	ldr	r2, [r4, #16]
 800c23e:	6022      	str	r2, [r4, #0]
 800c240:	d504      	bpl.n	800c24c <__sflush_r+0x7c>
 800c242:	1c42      	adds	r2, r0, #1
 800c244:	d101      	bne.n	800c24a <__sflush_r+0x7a>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	b903      	cbnz	r3, 800c24c <__sflush_r+0x7c>
 800c24a:	6560      	str	r0, [r4, #84]	; 0x54
 800c24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24e:	602f      	str	r7, [r5, #0]
 800c250:	2900      	cmp	r1, #0
 800c252:	d0ca      	beq.n	800c1ea <__sflush_r+0x1a>
 800c254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c258:	4299      	cmp	r1, r3
 800c25a:	d002      	beq.n	800c262 <__sflush_r+0x92>
 800c25c:	4628      	mov	r0, r5
 800c25e:	f000 f9d5 	bl	800c60c <_free_r>
 800c262:	2000      	movs	r0, #0
 800c264:	6360      	str	r0, [r4, #52]	; 0x34
 800c266:	e7c1      	b.n	800c1ec <__sflush_r+0x1c>
 800c268:	6a21      	ldr	r1, [r4, #32]
 800c26a:	2301      	movs	r3, #1
 800c26c:	4628      	mov	r0, r5
 800c26e:	47b0      	blx	r6
 800c270:	1c41      	adds	r1, r0, #1
 800c272:	d1c7      	bne.n	800c204 <__sflush_r+0x34>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0c4      	beq.n	800c204 <__sflush_r+0x34>
 800c27a:	2b1d      	cmp	r3, #29
 800c27c:	d001      	beq.n	800c282 <__sflush_r+0xb2>
 800c27e:	2b16      	cmp	r3, #22
 800c280:	d101      	bne.n	800c286 <__sflush_r+0xb6>
 800c282:	602f      	str	r7, [r5, #0]
 800c284:	e7b1      	b.n	800c1ea <__sflush_r+0x1a>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	e7ad      	b.n	800c1ec <__sflush_r+0x1c>
 800c290:	690f      	ldr	r7, [r1, #16]
 800c292:	2f00      	cmp	r7, #0
 800c294:	d0a9      	beq.n	800c1ea <__sflush_r+0x1a>
 800c296:	0793      	lsls	r3, r2, #30
 800c298:	680e      	ldr	r6, [r1, #0]
 800c29a:	bf08      	it	eq
 800c29c:	694b      	ldreq	r3, [r1, #20]
 800c29e:	600f      	str	r7, [r1, #0]
 800c2a0:	bf18      	it	ne
 800c2a2:	2300      	movne	r3, #0
 800c2a4:	eba6 0807 	sub.w	r8, r6, r7
 800c2a8:	608b      	str	r3, [r1, #8]
 800c2aa:	f1b8 0f00 	cmp.w	r8, #0
 800c2ae:	dd9c      	ble.n	800c1ea <__sflush_r+0x1a>
 800c2b0:	6a21      	ldr	r1, [r4, #32]
 800c2b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2b4:	4643      	mov	r3, r8
 800c2b6:	463a      	mov	r2, r7
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b0      	blx	r6
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	dc06      	bgt.n	800c2ce <__sflush_r+0xfe>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	e78e      	b.n	800c1ec <__sflush_r+0x1c>
 800c2ce:	4407      	add	r7, r0
 800c2d0:	eba8 0800 	sub.w	r8, r8, r0
 800c2d4:	e7e9      	b.n	800c2aa <__sflush_r+0xda>
 800c2d6:	bf00      	nop
 800c2d8:	20400001 	.word	0x20400001

0800c2dc <_fflush_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	690b      	ldr	r3, [r1, #16]
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	b913      	cbnz	r3, 800c2ec <_fflush_r+0x10>
 800c2e6:	2500      	movs	r5, #0
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	b118      	cbz	r0, 800c2f6 <_fflush_r+0x1a>
 800c2ee:	6983      	ldr	r3, [r0, #24]
 800c2f0:	b90b      	cbnz	r3, 800c2f6 <_fflush_r+0x1a>
 800c2f2:	f000 f887 	bl	800c404 <__sinit>
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <_fflush_r+0x6c>)
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	d11b      	bne.n	800c334 <_fflush_r+0x58>
 800c2fc:	686c      	ldr	r4, [r5, #4]
 800c2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0ef      	beq.n	800c2e6 <_fflush_r+0xa>
 800c306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c308:	07d0      	lsls	r0, r2, #31
 800c30a:	d404      	bmi.n	800c316 <_fflush_r+0x3a>
 800c30c:	0599      	lsls	r1, r3, #22
 800c30e:	d402      	bmi.n	800c316 <_fflush_r+0x3a>
 800c310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c312:	f000 f915 	bl	800c540 <__retarget_lock_acquire_recursive>
 800c316:	4628      	mov	r0, r5
 800c318:	4621      	mov	r1, r4
 800c31a:	f7ff ff59 	bl	800c1d0 <__sflush_r>
 800c31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c320:	07da      	lsls	r2, r3, #31
 800c322:	4605      	mov	r5, r0
 800c324:	d4e0      	bmi.n	800c2e8 <_fflush_r+0xc>
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	059b      	lsls	r3, r3, #22
 800c32a:	d4dd      	bmi.n	800c2e8 <_fflush_r+0xc>
 800c32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32e:	f000 f908 	bl	800c542 <__retarget_lock_release_recursive>
 800c332:	e7d9      	b.n	800c2e8 <_fflush_r+0xc>
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <_fflush_r+0x70>)
 800c336:	429c      	cmp	r4, r3
 800c338:	d101      	bne.n	800c33e <_fflush_r+0x62>
 800c33a:	68ac      	ldr	r4, [r5, #8]
 800c33c:	e7df      	b.n	800c2fe <_fflush_r+0x22>
 800c33e:	4b04      	ldr	r3, [pc, #16]	; (800c350 <_fflush_r+0x74>)
 800c340:	429c      	cmp	r4, r3
 800c342:	bf08      	it	eq
 800c344:	68ec      	ldreq	r4, [r5, #12]
 800c346:	e7da      	b.n	800c2fe <_fflush_r+0x22>
 800c348:	0800dcfc 	.word	0x0800dcfc
 800c34c:	0800dd1c 	.word	0x0800dd1c
 800c350:	0800dcdc 	.word	0x0800dcdc

0800c354 <std>:
 800c354:	2300      	movs	r3, #0
 800c356:	b510      	push	{r4, lr}
 800c358:	4604      	mov	r4, r0
 800c35a:	e9c0 3300 	strd	r3, r3, [r0]
 800c35e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c362:	6083      	str	r3, [r0, #8]
 800c364:	8181      	strh	r1, [r0, #12]
 800c366:	6643      	str	r3, [r0, #100]	; 0x64
 800c368:	81c2      	strh	r2, [r0, #14]
 800c36a:	6183      	str	r3, [r0, #24]
 800c36c:	4619      	mov	r1, r3
 800c36e:	2208      	movs	r2, #8
 800c370:	305c      	adds	r0, #92	; 0x5c
 800c372:	f7ff fdc1 	bl	800bef8 <memset>
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <std+0x38>)
 800c378:	6263      	str	r3, [r4, #36]	; 0x24
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x3c>)
 800c37c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x40>)
 800c380:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x44>)
 800c384:	6224      	str	r4, [r4, #32]
 800c386:	6323      	str	r3, [r4, #48]	; 0x30
 800c388:	bd10      	pop	{r4, pc}
 800c38a:	bf00      	nop
 800c38c:	0800cded 	.word	0x0800cded
 800c390:	0800ce0f 	.word	0x0800ce0f
 800c394:	0800ce47 	.word	0x0800ce47
 800c398:	0800ce6b 	.word	0x0800ce6b

0800c39c <_cleanup_r>:
 800c39c:	4901      	ldr	r1, [pc, #4]	; (800c3a4 <_cleanup_r+0x8>)
 800c39e:	f000 b8af 	b.w	800c500 <_fwalk_reent>
 800c3a2:	bf00      	nop
 800c3a4:	0800c2dd 	.word	0x0800c2dd

0800c3a8 <__sfmoreglue>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	1e4a      	subs	r2, r1, #1
 800c3ac:	2568      	movs	r5, #104	; 0x68
 800c3ae:	4355      	muls	r5, r2
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3b6:	f000 f979 	bl	800c6ac <_malloc_r>
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	b140      	cbz	r0, 800c3d0 <__sfmoreglue+0x28>
 800c3be:	2100      	movs	r1, #0
 800c3c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c4:	300c      	adds	r0, #12
 800c3c6:	60a0      	str	r0, [r4, #8]
 800c3c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3cc:	f7ff fd94 	bl	800bef8 <memset>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	bd70      	pop	{r4, r5, r6, pc}

0800c3d4 <__sfp_lock_acquire>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	; (800c3dc <__sfp_lock_acquire+0x8>)
 800c3d6:	f000 b8b3 	b.w	800c540 <__retarget_lock_acquire_recursive>
 800c3da:	bf00      	nop
 800c3dc:	2000169c 	.word	0x2000169c

0800c3e0 <__sfp_lock_release>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	; (800c3e8 <__sfp_lock_release+0x8>)
 800c3e2:	f000 b8ae 	b.w	800c542 <__retarget_lock_release_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	2000169c 	.word	0x2000169c

0800c3ec <__sinit_lock_acquire>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	; (800c3f4 <__sinit_lock_acquire+0x8>)
 800c3ee:	f000 b8a7 	b.w	800c540 <__retarget_lock_acquire_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	20001697 	.word	0x20001697

0800c3f8 <__sinit_lock_release>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__sinit_lock_release+0x8>)
 800c3fa:	f000 b8a2 	b.w	800c542 <__retarget_lock_release_recursive>
 800c3fe:	bf00      	nop
 800c400:	20001697 	.word	0x20001697

0800c404 <__sinit>:
 800c404:	b510      	push	{r4, lr}
 800c406:	4604      	mov	r4, r0
 800c408:	f7ff fff0 	bl	800c3ec <__sinit_lock_acquire>
 800c40c:	69a3      	ldr	r3, [r4, #24]
 800c40e:	b11b      	cbz	r3, 800c418 <__sinit+0x14>
 800c410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c414:	f7ff bff0 	b.w	800c3f8 <__sinit_lock_release>
 800c418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c41c:	6523      	str	r3, [r4, #80]	; 0x50
 800c41e:	4b13      	ldr	r3, [pc, #76]	; (800c46c <__sinit+0x68>)
 800c420:	4a13      	ldr	r2, [pc, #76]	; (800c470 <__sinit+0x6c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	62a2      	str	r2, [r4, #40]	; 0x28
 800c426:	42a3      	cmp	r3, r4
 800c428:	bf04      	itt	eq
 800c42a:	2301      	moveq	r3, #1
 800c42c:	61a3      	streq	r3, [r4, #24]
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 f820 	bl	800c474 <__sfp>
 800c434:	6060      	str	r0, [r4, #4]
 800c436:	4620      	mov	r0, r4
 800c438:	f000 f81c 	bl	800c474 <__sfp>
 800c43c:	60a0      	str	r0, [r4, #8]
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 f818 	bl	800c474 <__sfp>
 800c444:	2200      	movs	r2, #0
 800c446:	60e0      	str	r0, [r4, #12]
 800c448:	2104      	movs	r1, #4
 800c44a:	6860      	ldr	r0, [r4, #4]
 800c44c:	f7ff ff82 	bl	800c354 <std>
 800c450:	68a0      	ldr	r0, [r4, #8]
 800c452:	2201      	movs	r2, #1
 800c454:	2109      	movs	r1, #9
 800c456:	f7ff ff7d 	bl	800c354 <std>
 800c45a:	68e0      	ldr	r0, [r4, #12]
 800c45c:	2202      	movs	r2, #2
 800c45e:	2112      	movs	r1, #18
 800c460:	f7ff ff78 	bl	800c354 <std>
 800c464:	2301      	movs	r3, #1
 800c466:	61a3      	str	r3, [r4, #24]
 800c468:	e7d2      	b.n	800c410 <__sinit+0xc>
 800c46a:	bf00      	nop
 800c46c:	0800dcd8 	.word	0x0800dcd8
 800c470:	0800c39d 	.word	0x0800c39d

0800c474 <__sfp>:
 800c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c476:	4607      	mov	r7, r0
 800c478:	f7ff ffac 	bl	800c3d4 <__sfp_lock_acquire>
 800c47c:	4b1e      	ldr	r3, [pc, #120]	; (800c4f8 <__sfp+0x84>)
 800c47e:	681e      	ldr	r6, [r3, #0]
 800c480:	69b3      	ldr	r3, [r6, #24]
 800c482:	b913      	cbnz	r3, 800c48a <__sfp+0x16>
 800c484:	4630      	mov	r0, r6
 800c486:	f7ff ffbd 	bl	800c404 <__sinit>
 800c48a:	3648      	adds	r6, #72	; 0x48
 800c48c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c490:	3b01      	subs	r3, #1
 800c492:	d503      	bpl.n	800c49c <__sfp+0x28>
 800c494:	6833      	ldr	r3, [r6, #0]
 800c496:	b30b      	cbz	r3, 800c4dc <__sfp+0x68>
 800c498:	6836      	ldr	r6, [r6, #0]
 800c49a:	e7f7      	b.n	800c48c <__sfp+0x18>
 800c49c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4a0:	b9d5      	cbnz	r5, 800c4d8 <__sfp+0x64>
 800c4a2:	4b16      	ldr	r3, [pc, #88]	; (800c4fc <__sfp+0x88>)
 800c4a4:	60e3      	str	r3, [r4, #12]
 800c4a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4aa:	6665      	str	r5, [r4, #100]	; 0x64
 800c4ac:	f000 f847 	bl	800c53e <__retarget_lock_init_recursive>
 800c4b0:	f7ff ff96 	bl	800c3e0 <__sfp_lock_release>
 800c4b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4bc:	6025      	str	r5, [r4, #0]
 800c4be:	61a5      	str	r5, [r4, #24]
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4c8:	f7ff fd16 	bl	800bef8 <memset>
 800c4cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d8:	3468      	adds	r4, #104	; 0x68
 800c4da:	e7d9      	b.n	800c490 <__sfp+0x1c>
 800c4dc:	2104      	movs	r1, #4
 800c4de:	4638      	mov	r0, r7
 800c4e0:	f7ff ff62 	bl	800c3a8 <__sfmoreglue>
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	6030      	str	r0, [r6, #0]
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d1d5      	bne.n	800c498 <__sfp+0x24>
 800c4ec:	f7ff ff78 	bl	800c3e0 <__sfp_lock_release>
 800c4f0:	230c      	movs	r3, #12
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	e7ee      	b.n	800c4d4 <__sfp+0x60>
 800c4f6:	bf00      	nop
 800c4f8:	0800dcd8 	.word	0x0800dcd8
 800c4fc:	ffff0001 	.word	0xffff0001

0800c500 <_fwalk_reent>:
 800c500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c504:	4606      	mov	r6, r0
 800c506:	4688      	mov	r8, r1
 800c508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c50c:	2700      	movs	r7, #0
 800c50e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c512:	f1b9 0901 	subs.w	r9, r9, #1
 800c516:	d505      	bpl.n	800c524 <_fwalk_reent+0x24>
 800c518:	6824      	ldr	r4, [r4, #0]
 800c51a:	2c00      	cmp	r4, #0
 800c51c:	d1f7      	bne.n	800c50e <_fwalk_reent+0xe>
 800c51e:	4638      	mov	r0, r7
 800c520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c524:	89ab      	ldrh	r3, [r5, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d907      	bls.n	800c53a <_fwalk_reent+0x3a>
 800c52a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c52e:	3301      	adds	r3, #1
 800c530:	d003      	beq.n	800c53a <_fwalk_reent+0x3a>
 800c532:	4629      	mov	r1, r5
 800c534:	4630      	mov	r0, r6
 800c536:	47c0      	blx	r8
 800c538:	4307      	orrs	r7, r0
 800c53a:	3568      	adds	r5, #104	; 0x68
 800c53c:	e7e9      	b.n	800c512 <_fwalk_reent+0x12>

0800c53e <__retarget_lock_init_recursive>:
 800c53e:	4770      	bx	lr

0800c540 <__retarget_lock_acquire_recursive>:
 800c540:	4770      	bx	lr

0800c542 <__retarget_lock_release_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__swhatbuf_r>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	460e      	mov	r6, r1
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	2900      	cmp	r1, #0
 800c54e:	b096      	sub	sp, #88	; 0x58
 800c550:	4614      	mov	r4, r2
 800c552:	461d      	mov	r5, r3
 800c554:	da07      	bge.n	800c566 <__swhatbuf_r+0x22>
 800c556:	2300      	movs	r3, #0
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	89b3      	ldrh	r3, [r6, #12]
 800c55c:	061a      	lsls	r2, r3, #24
 800c55e:	d410      	bmi.n	800c582 <__swhatbuf_r+0x3e>
 800c560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c564:	e00e      	b.n	800c584 <__swhatbuf_r+0x40>
 800c566:	466a      	mov	r2, sp
 800c568:	f000 fca6 	bl	800ceb8 <_fstat_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	dbf2      	blt.n	800c556 <__swhatbuf_r+0x12>
 800c570:	9a01      	ldr	r2, [sp, #4]
 800c572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c57a:	425a      	negs	r2, r3
 800c57c:	415a      	adcs	r2, r3
 800c57e:	602a      	str	r2, [r5, #0]
 800c580:	e7ee      	b.n	800c560 <__swhatbuf_r+0x1c>
 800c582:	2340      	movs	r3, #64	; 0x40
 800c584:	2000      	movs	r0, #0
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	b016      	add	sp, #88	; 0x58
 800c58a:	bd70      	pop	{r4, r5, r6, pc}

0800c58c <__smakebuf_r>:
 800c58c:	898b      	ldrh	r3, [r1, #12]
 800c58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c590:	079d      	lsls	r5, r3, #30
 800c592:	4606      	mov	r6, r0
 800c594:	460c      	mov	r4, r1
 800c596:	d507      	bpl.n	800c5a8 <__smakebuf_r+0x1c>
 800c598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	6163      	str	r3, [r4, #20]
 800c5a4:	b002      	add	sp, #8
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	ab01      	add	r3, sp, #4
 800c5aa:	466a      	mov	r2, sp
 800c5ac:	f7ff ffca 	bl	800c544 <__swhatbuf_r>
 800c5b0:	9900      	ldr	r1, [sp, #0]
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f000 f879 	bl	800c6ac <_malloc_r>
 800c5ba:	b948      	cbnz	r0, 800c5d0 <__smakebuf_r+0x44>
 800c5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c0:	059a      	lsls	r2, r3, #22
 800c5c2:	d4ef      	bmi.n	800c5a4 <__smakebuf_r+0x18>
 800c5c4:	f023 0303 	bic.w	r3, r3, #3
 800c5c8:	f043 0302 	orr.w	r3, r3, #2
 800c5cc:	81a3      	strh	r3, [r4, #12]
 800c5ce:	e7e3      	b.n	800c598 <__smakebuf_r+0xc>
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <__smakebuf_r+0x7c>)
 800c5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	6020      	str	r0, [r4, #0]
 800c5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5dc:	81a3      	strh	r3, [r4, #12]
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	6163      	str	r3, [r4, #20]
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	6120      	str	r0, [r4, #16]
 800c5e6:	b15b      	cbz	r3, 800c600 <__smakebuf_r+0x74>
 800c5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	f000 fc75 	bl	800cedc <_isatty_r>
 800c5f2:	b128      	cbz	r0, 800c600 <__smakebuf_r+0x74>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	89a0      	ldrh	r0, [r4, #12]
 800c602:	4305      	orrs	r5, r0
 800c604:	81a5      	strh	r5, [r4, #12]
 800c606:	e7cd      	b.n	800c5a4 <__smakebuf_r+0x18>
 800c608:	0800c39d 	.word	0x0800c39d

0800c60c <_free_r>:
 800c60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c60e:	2900      	cmp	r1, #0
 800c610:	d048      	beq.n	800c6a4 <_free_r+0x98>
 800c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c616:	9001      	str	r0, [sp, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f1a1 0404 	sub.w	r4, r1, #4
 800c61e:	bfb8      	it	lt
 800c620:	18e4      	addlt	r4, r4, r3
 800c622:	f000 fc7d 	bl	800cf20 <__malloc_lock>
 800c626:	4a20      	ldr	r2, [pc, #128]	; (800c6a8 <_free_r+0x9c>)
 800c628:	9801      	ldr	r0, [sp, #4]
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	4615      	mov	r5, r2
 800c62e:	b933      	cbnz	r3, 800c63e <_free_r+0x32>
 800c630:	6063      	str	r3, [r4, #4]
 800c632:	6014      	str	r4, [r2, #0]
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c63a:	f000 bc77 	b.w	800cf2c <__malloc_unlock>
 800c63e:	42a3      	cmp	r3, r4
 800c640:	d90b      	bls.n	800c65a <_free_r+0x4e>
 800c642:	6821      	ldr	r1, [r4, #0]
 800c644:	1862      	adds	r2, r4, r1
 800c646:	4293      	cmp	r3, r2
 800c648:	bf04      	itt	eq
 800c64a:	681a      	ldreq	r2, [r3, #0]
 800c64c:	685b      	ldreq	r3, [r3, #4]
 800c64e:	6063      	str	r3, [r4, #4]
 800c650:	bf04      	itt	eq
 800c652:	1852      	addeq	r2, r2, r1
 800c654:	6022      	streq	r2, [r4, #0]
 800c656:	602c      	str	r4, [r5, #0]
 800c658:	e7ec      	b.n	800c634 <_free_r+0x28>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x58>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x4e>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1855      	adds	r5, r2, r1
 800c668:	42a5      	cmp	r5, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x78>
 800c66c:	6824      	ldr	r4, [r4, #0]
 800c66e:	4421      	add	r1, r4
 800c670:	1854      	adds	r4, r2, r1
 800c672:	42a3      	cmp	r3, r4
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1dd      	bne.n	800c634 <_free_r+0x28>
 800c678:	681c      	ldr	r4, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	6053      	str	r3, [r2, #4]
 800c67e:	4421      	add	r1, r4
 800c680:	6011      	str	r1, [r2, #0]
 800c682:	e7d7      	b.n	800c634 <_free_r+0x28>
 800c684:	d902      	bls.n	800c68c <_free_r+0x80>
 800c686:	230c      	movs	r3, #12
 800c688:	6003      	str	r3, [r0, #0]
 800c68a:	e7d3      	b.n	800c634 <_free_r+0x28>
 800c68c:	6825      	ldr	r5, [r4, #0]
 800c68e:	1961      	adds	r1, r4, r5
 800c690:	428b      	cmp	r3, r1
 800c692:	bf04      	itt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	bf04      	itt	eq
 800c69c:	1949      	addeq	r1, r1, r5
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	6054      	str	r4, [r2, #4]
 800c6a2:	e7c7      	b.n	800c634 <_free_r+0x28>
 800c6a4:	b003      	add	sp, #12
 800c6a6:	bd30      	pop	{r4, r5, pc}
 800c6a8:	20001448 	.word	0x20001448

0800c6ac <_malloc_r>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	1ccd      	adds	r5, r1, #3
 800c6b0:	f025 0503 	bic.w	r5, r5, #3
 800c6b4:	3508      	adds	r5, #8
 800c6b6:	2d0c      	cmp	r5, #12
 800c6b8:	bf38      	it	cc
 800c6ba:	250c      	movcc	r5, #12
 800c6bc:	2d00      	cmp	r5, #0
 800c6be:	4606      	mov	r6, r0
 800c6c0:	db01      	blt.n	800c6c6 <_malloc_r+0x1a>
 800c6c2:	42a9      	cmp	r1, r5
 800c6c4:	d903      	bls.n	800c6ce <_malloc_r+0x22>
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	6033      	str	r3, [r6, #0]
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ce:	f000 fc27 	bl	800cf20 <__malloc_lock>
 800c6d2:	4921      	ldr	r1, [pc, #132]	; (800c758 <_malloc_r+0xac>)
 800c6d4:	680a      	ldr	r2, [r1, #0]
 800c6d6:	4614      	mov	r4, r2
 800c6d8:	b99c      	cbnz	r4, 800c702 <_malloc_r+0x56>
 800c6da:	4f20      	ldr	r7, [pc, #128]	; (800c75c <_malloc_r+0xb0>)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	b923      	cbnz	r3, 800c6ea <_malloc_r+0x3e>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	f000 fb72 	bl	800cdcc <_sbrk_r>
 800c6e8:	6038      	str	r0, [r7, #0]
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	f000 fb6d 	bl	800cdcc <_sbrk_r>
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	d123      	bne.n	800c73e <_malloc_r+0x92>
 800c6f6:	230c      	movs	r3, #12
 800c6f8:	6033      	str	r3, [r6, #0]
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f000 fc16 	bl	800cf2c <__malloc_unlock>
 800c700:	e7e3      	b.n	800c6ca <_malloc_r+0x1e>
 800c702:	6823      	ldr	r3, [r4, #0]
 800c704:	1b5b      	subs	r3, r3, r5
 800c706:	d417      	bmi.n	800c738 <_malloc_r+0x8c>
 800c708:	2b0b      	cmp	r3, #11
 800c70a:	d903      	bls.n	800c714 <_malloc_r+0x68>
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	441c      	add	r4, r3
 800c710:	6025      	str	r5, [r4, #0]
 800c712:	e004      	b.n	800c71e <_malloc_r+0x72>
 800c714:	6863      	ldr	r3, [r4, #4]
 800c716:	42a2      	cmp	r2, r4
 800c718:	bf0c      	ite	eq
 800c71a:	600b      	streq	r3, [r1, #0]
 800c71c:	6053      	strne	r3, [r2, #4]
 800c71e:	4630      	mov	r0, r6
 800c720:	f000 fc04 	bl	800cf2c <__malloc_unlock>
 800c724:	f104 000b 	add.w	r0, r4, #11
 800c728:	1d23      	adds	r3, r4, #4
 800c72a:	f020 0007 	bic.w	r0, r0, #7
 800c72e:	1ac2      	subs	r2, r0, r3
 800c730:	d0cc      	beq.n	800c6cc <_malloc_r+0x20>
 800c732:	1a1b      	subs	r3, r3, r0
 800c734:	50a3      	str	r3, [r4, r2]
 800c736:	e7c9      	b.n	800c6cc <_malloc_r+0x20>
 800c738:	4622      	mov	r2, r4
 800c73a:	6864      	ldr	r4, [r4, #4]
 800c73c:	e7cc      	b.n	800c6d8 <_malloc_r+0x2c>
 800c73e:	1cc4      	adds	r4, r0, #3
 800c740:	f024 0403 	bic.w	r4, r4, #3
 800c744:	42a0      	cmp	r0, r4
 800c746:	d0e3      	beq.n	800c710 <_malloc_r+0x64>
 800c748:	1a21      	subs	r1, r4, r0
 800c74a:	4630      	mov	r0, r6
 800c74c:	f000 fb3e 	bl	800cdcc <_sbrk_r>
 800c750:	3001      	adds	r0, #1
 800c752:	d1dd      	bne.n	800c710 <_malloc_r+0x64>
 800c754:	e7cf      	b.n	800c6f6 <_malloc_r+0x4a>
 800c756:	bf00      	nop
 800c758:	20001448 	.word	0x20001448
 800c75c:	2000144c 	.word	0x2000144c

0800c760 <__sfputc_r>:
 800c760:	6893      	ldr	r3, [r2, #8]
 800c762:	3b01      	subs	r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	b410      	push	{r4}
 800c768:	6093      	str	r3, [r2, #8]
 800c76a:	da08      	bge.n	800c77e <__sfputc_r+0x1e>
 800c76c:	6994      	ldr	r4, [r2, #24]
 800c76e:	42a3      	cmp	r3, r4
 800c770:	db01      	blt.n	800c776 <__sfputc_r+0x16>
 800c772:	290a      	cmp	r1, #10
 800c774:	d103      	bne.n	800c77e <__sfputc_r+0x1e>
 800c776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77a:	f7ff bc69 	b.w	800c050 <__swbuf_r>
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	1c58      	adds	r0, r3, #1
 800c782:	6010      	str	r0, [r2, #0]
 800c784:	7019      	strb	r1, [r3, #0]
 800c786:	4608      	mov	r0, r1
 800c788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <__sfputs_r>:
 800c78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c790:	4606      	mov	r6, r0
 800c792:	460f      	mov	r7, r1
 800c794:	4614      	mov	r4, r2
 800c796:	18d5      	adds	r5, r2, r3
 800c798:	42ac      	cmp	r4, r5
 800c79a:	d101      	bne.n	800c7a0 <__sfputs_r+0x12>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e007      	b.n	800c7b0 <__sfputs_r+0x22>
 800c7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a4:	463a      	mov	r2, r7
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7ff ffda 	bl	800c760 <__sfputc_r>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d1f3      	bne.n	800c798 <__sfputs_r+0xa>
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7b4 <_vfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	b09d      	sub	sp, #116	; 0x74
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4698      	mov	r8, r3
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	b118      	cbz	r0, 800c7cc <_vfiprintf_r+0x18>
 800c7c4:	6983      	ldr	r3, [r0, #24]
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_vfiprintf_r+0x18>
 800c7c8:	f7ff fe1c 	bl	800c404 <__sinit>
 800c7cc:	4b89      	ldr	r3, [pc, #548]	; (800c9f4 <_vfiprintf_r+0x240>)
 800c7ce:	429d      	cmp	r5, r3
 800c7d0:	d11b      	bne.n	800c80a <_vfiprintf_r+0x56>
 800c7d2:	6875      	ldr	r5, [r6, #4]
 800c7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	d405      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7da:	89ab      	ldrh	r3, [r5, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d402      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e2:	f7ff fead 	bl	800c540 <__retarget_lock_acquire_recursive>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	071b      	lsls	r3, r3, #28
 800c7ea:	d501      	bpl.n	800c7f0 <_vfiprintf_r+0x3c>
 800c7ec:	692b      	ldr	r3, [r5, #16]
 800c7ee:	b9eb      	cbnz	r3, 800c82c <_vfiprintf_r+0x78>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff fc7e 	bl	800c0f4 <__swsetup_r>
 800c7f8:	b1c0      	cbz	r0, 800c82c <_vfiprintf_r+0x78>
 800c7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7fc:	07dc      	lsls	r4, r3, #31
 800c7fe:	d50e      	bpl.n	800c81e <_vfiprintf_r+0x6a>
 800c800:	f04f 30ff 	mov.w	r0, #4294967295
 800c804:	b01d      	add	sp, #116	; 0x74
 800c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80a:	4b7b      	ldr	r3, [pc, #492]	; (800c9f8 <_vfiprintf_r+0x244>)
 800c80c:	429d      	cmp	r5, r3
 800c80e:	d101      	bne.n	800c814 <_vfiprintf_r+0x60>
 800c810:	68b5      	ldr	r5, [r6, #8]
 800c812:	e7df      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c814:	4b79      	ldr	r3, [pc, #484]	; (800c9fc <_vfiprintf_r+0x248>)
 800c816:	429d      	cmp	r5, r3
 800c818:	bf08      	it	eq
 800c81a:	68f5      	ldreq	r5, [r6, #12]
 800c81c:	e7da      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	0598      	lsls	r0, r3, #22
 800c822:	d4ed      	bmi.n	800c800 <_vfiprintf_r+0x4c>
 800c824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c826:	f7ff fe8c 	bl	800c542 <__retarget_lock_release_recursive>
 800c82a:	e7e9      	b.n	800c800 <_vfiprintf_r+0x4c>
 800c82c:	2300      	movs	r3, #0
 800c82e:	9309      	str	r3, [sp, #36]	; 0x24
 800c830:	2320      	movs	r3, #32
 800c832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c836:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83a:	2330      	movs	r3, #48	; 0x30
 800c83c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca00 <_vfiprintf_r+0x24c>
 800c840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c844:	f04f 0901 	mov.w	r9, #1
 800c848:	4623      	mov	r3, r4
 800c84a:	469a      	mov	sl, r3
 800c84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c850:	b10a      	cbz	r2, 800c856 <_vfiprintf_r+0xa2>
 800c852:	2a25      	cmp	r2, #37	; 0x25
 800c854:	d1f9      	bne.n	800c84a <_vfiprintf_r+0x96>
 800c856:	ebba 0b04 	subs.w	fp, sl, r4
 800c85a:	d00b      	beq.n	800c874 <_vfiprintf_r+0xc0>
 800c85c:	465b      	mov	r3, fp
 800c85e:	4622      	mov	r2, r4
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ff93 	bl	800c78e <__sfputs_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	f000 80aa 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	445a      	add	r2, fp
 800c872:	9209      	str	r2, [sp, #36]	; 0x24
 800c874:	f89a 3000 	ldrb.w	r3, [sl]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80a2 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c87e:	2300      	movs	r3, #0
 800c880:	f04f 32ff 	mov.w	r2, #4294967295
 800c884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c888:	f10a 0a01 	add.w	sl, sl, #1
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c894:	931a      	str	r3, [sp, #104]	; 0x68
 800c896:	4654      	mov	r4, sl
 800c898:	2205      	movs	r2, #5
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4858      	ldr	r0, [pc, #352]	; (800ca00 <_vfiprintf_r+0x24c>)
 800c8a0:	f7f3 fc76 	bl	8000190 <memchr>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	b9d8      	cbnz	r0, 800c8e0 <_vfiprintf_r+0x12c>
 800c8a8:	06d1      	lsls	r1, r2, #27
 800c8aa:	bf44      	itt	mi
 800c8ac:	2320      	movmi	r3, #32
 800c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b2:	0713      	lsls	r3, r2, #28
 800c8b4:	bf44      	itt	mi
 800c8b6:	232b      	movmi	r3, #43	; 0x2b
 800c8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c2:	d015      	beq.n	800c8f0 <_vfiprintf_r+0x13c>
 800c8c4:	9a07      	ldr	r2, [sp, #28]
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d4:	3b30      	subs	r3, #48	; 0x30
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d94e      	bls.n	800c978 <_vfiprintf_r+0x1c4>
 800c8da:	b1b0      	cbz	r0, 800c90a <_vfiprintf_r+0x156>
 800c8dc:	9207      	str	r2, [sp, #28]
 800c8de:	e014      	b.n	800c90a <_vfiprintf_r+0x156>
 800c8e0:	eba0 0308 	sub.w	r3, r0, r8
 800c8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	46a2      	mov	sl, r4
 800c8ee:	e7d2      	b.n	800c896 <_vfiprintf_r+0xe2>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	1d19      	adds	r1, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	9103      	str	r1, [sp, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfbb      	ittet	lt
 800c8fc:	425b      	neglt	r3, r3
 800c8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c902:	9307      	strge	r3, [sp, #28]
 800c904:	9307      	strlt	r3, [sp, #28]
 800c906:	bfb8      	it	lt
 800c908:	9204      	strlt	r2, [sp, #16]
 800c90a:	7823      	ldrb	r3, [r4, #0]
 800c90c:	2b2e      	cmp	r3, #46	; 0x2e
 800c90e:	d10c      	bne.n	800c92a <_vfiprintf_r+0x176>
 800c910:	7863      	ldrb	r3, [r4, #1]
 800c912:	2b2a      	cmp	r3, #42	; 0x2a
 800c914:	d135      	bne.n	800c982 <_vfiprintf_r+0x1ce>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9203      	str	r2, [sp, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	f04f 33ff 	movlt.w	r3, #4294967295
 800c926:	3402      	adds	r4, #2
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca10 <_vfiprintf_r+0x25c>
 800c92e:	7821      	ldrb	r1, [r4, #0]
 800c930:	2203      	movs	r2, #3
 800c932:	4650      	mov	r0, sl
 800c934:	f7f3 fc2c 	bl	8000190 <memchr>
 800c938:	b140      	cbz	r0, 800c94c <_vfiprintf_r+0x198>
 800c93a:	2340      	movs	r3, #64	; 0x40
 800c93c:	eba0 000a 	sub.w	r0, r0, sl
 800c940:	fa03 f000 	lsl.w	r0, r3, r0
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	4303      	orrs	r3, r0
 800c948:	3401      	adds	r4, #1
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	482c      	ldr	r0, [pc, #176]	; (800ca04 <_vfiprintf_r+0x250>)
 800c952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c956:	2206      	movs	r2, #6
 800c958:	f7f3 fc1a 	bl	8000190 <memchr>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d03f      	beq.n	800c9e0 <_vfiprintf_r+0x22c>
 800c960:	4b29      	ldr	r3, [pc, #164]	; (800ca08 <_vfiprintf_r+0x254>)
 800c962:	bb1b      	cbnz	r3, 800c9ac <_vfiprintf_r+0x1f8>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3307      	adds	r3, #7
 800c968:	f023 0307 	bic.w	r3, r3, #7
 800c96c:	3308      	adds	r3, #8
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	443b      	add	r3, r7
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	e767      	b.n	800c848 <_vfiprintf_r+0x94>
 800c978:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97c:	460c      	mov	r4, r1
 800c97e:	2001      	movs	r0, #1
 800c980:	e7a5      	b.n	800c8ce <_vfiprintf_r+0x11a>
 800c982:	2300      	movs	r3, #0
 800c984:	3401      	adds	r4, #1
 800c986:	9305      	str	r3, [sp, #20]
 800c988:	4619      	mov	r1, r3
 800c98a:	f04f 0c0a 	mov.w	ip, #10
 800c98e:	4620      	mov	r0, r4
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	; 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_vfiprintf_r+0x1ee>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c5      	beq.n	800c92a <_vfiprintf_r+0x176>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c3      	b.n	800c92a <_vfiprintf_r+0x176>
 800c9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e7f0      	b.n	800c98e <_vfiprintf_r+0x1da>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4b16      	ldr	r3, [pc, #88]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9b4:	a904      	add	r1, sp, #16
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f3af 8000 	nop.w
 800c9bc:	4607      	mov	r7, r0
 800c9be:	1c78      	adds	r0, r7, #1
 800c9c0:	d1d6      	bne.n	800c970 <_vfiprintf_r+0x1bc>
 800c9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c4:	07d9      	lsls	r1, r3, #31
 800c9c6:	d405      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	059a      	lsls	r2, r3, #22
 800c9cc:	d402      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d0:	f7ff fdb7 	bl	800c542 <__retarget_lock_release_recursive>
 800c9d4:	89ab      	ldrh	r3, [r5, #12]
 800c9d6:	065b      	lsls	r3, r3, #25
 800c9d8:	f53f af12 	bmi.w	800c800 <_vfiprintf_r+0x4c>
 800c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9de:	e711      	b.n	800c804 <_vfiprintf_r+0x50>
 800c9e0:	ab03      	add	r3, sp, #12
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	462a      	mov	r2, r5
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9e8:	a904      	add	r1, sp, #16
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f000 f880 	bl	800caf0 <_printf_i>
 800c9f0:	e7e4      	b.n	800c9bc <_vfiprintf_r+0x208>
 800c9f2:	bf00      	nop
 800c9f4:	0800dcfc 	.word	0x0800dcfc
 800c9f8:	0800dd1c 	.word	0x0800dd1c
 800c9fc:	0800dcdc 	.word	0x0800dcdc
 800ca00:	0800dd3c 	.word	0x0800dd3c
 800ca04:	0800dd46 	.word	0x0800dd46
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	0800c78f 	.word	0x0800c78f
 800ca10:	0800dd42 	.word	0x0800dd42

0800ca14 <_printf_common>:
 800ca14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca18:	4616      	mov	r6, r2
 800ca1a:	4699      	mov	r9, r3
 800ca1c:	688a      	ldr	r2, [r1, #8]
 800ca1e:	690b      	ldr	r3, [r1, #16]
 800ca20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca24:	4293      	cmp	r3, r2
 800ca26:	bfb8      	it	lt
 800ca28:	4613      	movlt	r3, r2
 800ca2a:	6033      	str	r3, [r6, #0]
 800ca2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca30:	4607      	mov	r7, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	b10a      	cbz	r2, 800ca3a <_printf_common+0x26>
 800ca36:	3301      	adds	r3, #1
 800ca38:	6033      	str	r3, [r6, #0]
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	0699      	lsls	r1, r3, #26
 800ca3e:	bf42      	ittt	mi
 800ca40:	6833      	ldrmi	r3, [r6, #0]
 800ca42:	3302      	addmi	r3, #2
 800ca44:	6033      	strmi	r3, [r6, #0]
 800ca46:	6825      	ldr	r5, [r4, #0]
 800ca48:	f015 0506 	ands.w	r5, r5, #6
 800ca4c:	d106      	bne.n	800ca5c <_printf_common+0x48>
 800ca4e:	f104 0a19 	add.w	sl, r4, #25
 800ca52:	68e3      	ldr	r3, [r4, #12]
 800ca54:	6832      	ldr	r2, [r6, #0]
 800ca56:	1a9b      	subs	r3, r3, r2
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	dc26      	bgt.n	800caaa <_printf_common+0x96>
 800ca5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca60:	1e13      	subs	r3, r2, #0
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	bf18      	it	ne
 800ca66:	2301      	movne	r3, #1
 800ca68:	0692      	lsls	r2, r2, #26
 800ca6a:	d42b      	bmi.n	800cac4 <_printf_common+0xb0>
 800ca6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d01e      	beq.n	800cab8 <_printf_common+0xa4>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	68e5      	ldr	r5, [r4, #12]
 800ca7e:	6832      	ldr	r2, [r6, #0]
 800ca80:	f003 0306 	and.w	r3, r3, #6
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	bf08      	it	eq
 800ca88:	1aad      	subeq	r5, r5, r2
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	6922      	ldr	r2, [r4, #16]
 800ca8e:	bf0c      	ite	eq
 800ca90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca94:	2500      	movne	r5, #0
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bfc4      	itt	gt
 800ca9a:	1a9b      	subgt	r3, r3, r2
 800ca9c:	18ed      	addgt	r5, r5, r3
 800ca9e:	2600      	movs	r6, #0
 800caa0:	341a      	adds	r4, #26
 800caa2:	42b5      	cmp	r5, r6
 800caa4:	d11a      	bne.n	800cadc <_printf_common+0xc8>
 800caa6:	2000      	movs	r0, #0
 800caa8:	e008      	b.n	800cabc <_printf_common+0xa8>
 800caaa:	2301      	movs	r3, #1
 800caac:	4652      	mov	r2, sl
 800caae:	4649      	mov	r1, r9
 800cab0:	4638      	mov	r0, r7
 800cab2:	47c0      	blx	r8
 800cab4:	3001      	adds	r0, #1
 800cab6:	d103      	bne.n	800cac0 <_printf_common+0xac>
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295
 800cabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac0:	3501      	adds	r5, #1
 800cac2:	e7c6      	b.n	800ca52 <_printf_common+0x3e>
 800cac4:	18e1      	adds	r1, r4, r3
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	2030      	movs	r0, #48	; 0x30
 800caca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cace:	4422      	add	r2, r4
 800cad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cad8:	3302      	adds	r3, #2
 800cada:	e7c7      	b.n	800ca6c <_printf_common+0x58>
 800cadc:	2301      	movs	r3, #1
 800cade:	4622      	mov	r2, r4
 800cae0:	4649      	mov	r1, r9
 800cae2:	4638      	mov	r0, r7
 800cae4:	47c0      	blx	r8
 800cae6:	3001      	adds	r0, #1
 800cae8:	d0e6      	beq.n	800cab8 <_printf_common+0xa4>
 800caea:	3601      	adds	r6, #1
 800caec:	e7d9      	b.n	800caa2 <_printf_common+0x8e>
	...

0800caf0 <_printf_i>:
 800caf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	4691      	mov	r9, r2
 800caf8:	7e27      	ldrb	r7, [r4, #24]
 800cafa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cafc:	2f78      	cmp	r7, #120	; 0x78
 800cafe:	4680      	mov	r8, r0
 800cb00:	469a      	mov	sl, r3
 800cb02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb06:	d807      	bhi.n	800cb18 <_printf_i+0x28>
 800cb08:	2f62      	cmp	r7, #98	; 0x62
 800cb0a:	d80a      	bhi.n	800cb22 <_printf_i+0x32>
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	f000 80d8 	beq.w	800ccc2 <_printf_i+0x1d2>
 800cb12:	2f58      	cmp	r7, #88	; 0x58
 800cb14:	f000 80a3 	beq.w	800cc5e <_printf_i+0x16e>
 800cb18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb20:	e03a      	b.n	800cb98 <_printf_i+0xa8>
 800cb22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb26:	2b15      	cmp	r3, #21
 800cb28:	d8f6      	bhi.n	800cb18 <_printf_i+0x28>
 800cb2a:	a001      	add	r0, pc, #4	; (adr r0, 800cb30 <_printf_i+0x40>)
 800cb2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cb30:	0800cb89 	.word	0x0800cb89
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cb19 	.word	0x0800cb19
 800cb3c:	0800cb19 	.word	0x0800cb19
 800cb40:	0800cb19 	.word	0x0800cb19
 800cb44:	0800cb19 	.word	0x0800cb19
 800cb48:	0800cb9d 	.word	0x0800cb9d
 800cb4c:	0800cb19 	.word	0x0800cb19
 800cb50:	0800cb19 	.word	0x0800cb19
 800cb54:	0800cb19 	.word	0x0800cb19
 800cb58:	0800cb19 	.word	0x0800cb19
 800cb5c:	0800cca9 	.word	0x0800cca9
 800cb60:	0800cbcd 	.word	0x0800cbcd
 800cb64:	0800cc8b 	.word	0x0800cc8b
 800cb68:	0800cb19 	.word	0x0800cb19
 800cb6c:	0800cb19 	.word	0x0800cb19
 800cb70:	0800cccb 	.word	0x0800cccb
 800cb74:	0800cb19 	.word	0x0800cb19
 800cb78:	0800cbcd 	.word	0x0800cbcd
 800cb7c:	0800cb19 	.word	0x0800cb19
 800cb80:	0800cb19 	.word	0x0800cb19
 800cb84:	0800cc93 	.word	0x0800cc93
 800cb88:	680b      	ldr	r3, [r1, #0]
 800cb8a:	1d1a      	adds	r2, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	600a      	str	r2, [r1, #0]
 800cb90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0a3      	b.n	800cce4 <_printf_i+0x1f4>
 800cb9c:	6825      	ldr	r5, [r4, #0]
 800cb9e:	6808      	ldr	r0, [r1, #0]
 800cba0:	062e      	lsls	r6, r5, #24
 800cba2:	f100 0304 	add.w	r3, r0, #4
 800cba6:	d50a      	bpl.n	800cbbe <_printf_i+0xce>
 800cba8:	6805      	ldr	r5, [r0, #0]
 800cbaa:	600b      	str	r3, [r1, #0]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	da03      	bge.n	800cbb8 <_printf_i+0xc8>
 800cbb0:	232d      	movs	r3, #45	; 0x2d
 800cbb2:	426d      	negs	r5, r5
 800cbb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb8:	485e      	ldr	r0, [pc, #376]	; (800cd34 <_printf_i+0x244>)
 800cbba:	230a      	movs	r3, #10
 800cbbc:	e019      	b.n	800cbf2 <_printf_i+0x102>
 800cbbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cbc2:	6805      	ldr	r5, [r0, #0]
 800cbc4:	600b      	str	r3, [r1, #0]
 800cbc6:	bf18      	it	ne
 800cbc8:	b22d      	sxthne	r5, r5
 800cbca:	e7ef      	b.n	800cbac <_printf_i+0xbc>
 800cbcc:	680b      	ldr	r3, [r1, #0]
 800cbce:	6825      	ldr	r5, [r4, #0]
 800cbd0:	1d18      	adds	r0, r3, #4
 800cbd2:	6008      	str	r0, [r1, #0]
 800cbd4:	0628      	lsls	r0, r5, #24
 800cbd6:	d501      	bpl.n	800cbdc <_printf_i+0xec>
 800cbd8:	681d      	ldr	r5, [r3, #0]
 800cbda:	e002      	b.n	800cbe2 <_printf_i+0xf2>
 800cbdc:	0669      	lsls	r1, r5, #25
 800cbde:	d5fb      	bpl.n	800cbd8 <_printf_i+0xe8>
 800cbe0:	881d      	ldrh	r5, [r3, #0]
 800cbe2:	4854      	ldr	r0, [pc, #336]	; (800cd34 <_printf_i+0x244>)
 800cbe4:	2f6f      	cmp	r7, #111	; 0x6f
 800cbe6:	bf0c      	ite	eq
 800cbe8:	2308      	moveq	r3, #8
 800cbea:	230a      	movne	r3, #10
 800cbec:	2100      	movs	r1, #0
 800cbee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbf2:	6866      	ldr	r6, [r4, #4]
 800cbf4:	60a6      	str	r6, [r4, #8]
 800cbf6:	2e00      	cmp	r6, #0
 800cbf8:	bfa2      	ittt	ge
 800cbfa:	6821      	ldrge	r1, [r4, #0]
 800cbfc:	f021 0104 	bicge.w	r1, r1, #4
 800cc00:	6021      	strge	r1, [r4, #0]
 800cc02:	b90d      	cbnz	r5, 800cc08 <_printf_i+0x118>
 800cc04:	2e00      	cmp	r6, #0
 800cc06:	d04d      	beq.n	800cca4 <_printf_i+0x1b4>
 800cc08:	4616      	mov	r6, r2
 800cc0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc0e:	fb03 5711 	mls	r7, r3, r1, r5
 800cc12:	5dc7      	ldrb	r7, [r0, r7]
 800cc14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc18:	462f      	mov	r7, r5
 800cc1a:	42bb      	cmp	r3, r7
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	d9f4      	bls.n	800cc0a <_printf_i+0x11a>
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d10b      	bne.n	800cc3c <_printf_i+0x14c>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	07df      	lsls	r7, r3, #31
 800cc28:	d508      	bpl.n	800cc3c <_printf_i+0x14c>
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	6861      	ldr	r1, [r4, #4]
 800cc2e:	4299      	cmp	r1, r3
 800cc30:	bfde      	ittt	le
 800cc32:	2330      	movle	r3, #48	; 0x30
 800cc34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc3c:	1b92      	subs	r2, r2, r6
 800cc3e:	6122      	str	r2, [r4, #16]
 800cc40:	f8cd a000 	str.w	sl, [sp]
 800cc44:	464b      	mov	r3, r9
 800cc46:	aa03      	add	r2, sp, #12
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	f7ff fee2 	bl	800ca14 <_printf_common>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d14c      	bne.n	800ccee <_printf_i+0x1fe>
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	b004      	add	sp, #16
 800cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5e:	4835      	ldr	r0, [pc, #212]	; (800cd34 <_printf_i+0x244>)
 800cc60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	680e      	ldr	r6, [r1, #0]
 800cc68:	061f      	lsls	r7, r3, #24
 800cc6a:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc6e:	600e      	str	r6, [r1, #0]
 800cc70:	d514      	bpl.n	800cc9c <_printf_i+0x1ac>
 800cc72:	07d9      	lsls	r1, r3, #31
 800cc74:	bf44      	itt	mi
 800cc76:	f043 0320 	orrmi.w	r3, r3, #32
 800cc7a:	6023      	strmi	r3, [r4, #0]
 800cc7c:	b91d      	cbnz	r5, 800cc86 <_printf_i+0x196>
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	f023 0320 	bic.w	r3, r3, #32
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	2310      	movs	r3, #16
 800cc88:	e7b0      	b.n	800cbec <_printf_i+0xfc>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	f043 0320 	orr.w	r3, r3, #32
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	2378      	movs	r3, #120	; 0x78
 800cc94:	4828      	ldr	r0, [pc, #160]	; (800cd38 <_printf_i+0x248>)
 800cc96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc9a:	e7e3      	b.n	800cc64 <_printf_i+0x174>
 800cc9c:	065e      	lsls	r6, r3, #25
 800cc9e:	bf48      	it	mi
 800cca0:	b2ad      	uxthmi	r5, r5
 800cca2:	e7e6      	b.n	800cc72 <_printf_i+0x182>
 800cca4:	4616      	mov	r6, r2
 800cca6:	e7bb      	b.n	800cc20 <_printf_i+0x130>
 800cca8:	680b      	ldr	r3, [r1, #0]
 800ccaa:	6826      	ldr	r6, [r4, #0]
 800ccac:	6960      	ldr	r0, [r4, #20]
 800ccae:	1d1d      	adds	r5, r3, #4
 800ccb0:	600d      	str	r5, [r1, #0]
 800ccb2:	0635      	lsls	r5, r6, #24
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	d501      	bpl.n	800ccbc <_printf_i+0x1cc>
 800ccb8:	6018      	str	r0, [r3, #0]
 800ccba:	e002      	b.n	800ccc2 <_printf_i+0x1d2>
 800ccbc:	0671      	lsls	r1, r6, #25
 800ccbe:	d5fb      	bpl.n	800ccb8 <_printf_i+0x1c8>
 800ccc0:	8018      	strh	r0, [r3, #0]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	4616      	mov	r6, r2
 800ccc8:	e7ba      	b.n	800cc40 <_printf_i+0x150>
 800ccca:	680b      	ldr	r3, [r1, #0]
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	600a      	str	r2, [r1, #0]
 800ccd0:	681e      	ldr	r6, [r3, #0]
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7f3 fa5a 	bl	8000190 <memchr>
 800ccdc:	b108      	cbz	r0, 800cce2 <_printf_i+0x1f2>
 800ccde:	1b80      	subs	r0, r0, r6
 800cce0:	6060      	str	r0, [r4, #4]
 800cce2:	6863      	ldr	r3, [r4, #4]
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	2300      	movs	r3, #0
 800cce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccec:	e7a8      	b.n	800cc40 <_printf_i+0x150>
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	47d0      	blx	sl
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d0ab      	beq.n	800cc54 <_printf_i+0x164>
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	079b      	lsls	r3, r3, #30
 800cd00:	d413      	bmi.n	800cd2a <_printf_i+0x23a>
 800cd02:	68e0      	ldr	r0, [r4, #12]
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	4298      	cmp	r0, r3
 800cd08:	bfb8      	it	lt
 800cd0a:	4618      	movlt	r0, r3
 800cd0c:	e7a4      	b.n	800cc58 <_printf_i+0x168>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4632      	mov	r2, r6
 800cd12:	4649      	mov	r1, r9
 800cd14:	4640      	mov	r0, r8
 800cd16:	47d0      	blx	sl
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d09b      	beq.n	800cc54 <_printf_i+0x164>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	9903      	ldr	r1, [sp, #12]
 800cd22:	1a5b      	subs	r3, r3, r1
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dcf2      	bgt.n	800cd0e <_printf_i+0x21e>
 800cd28:	e7eb      	b.n	800cd02 <_printf_i+0x212>
 800cd2a:	2500      	movs	r5, #0
 800cd2c:	f104 0619 	add.w	r6, r4, #25
 800cd30:	e7f5      	b.n	800cd1e <_printf_i+0x22e>
 800cd32:	bf00      	nop
 800cd34:	0800dd4d 	.word	0x0800dd4d
 800cd38:	0800dd5e 	.word	0x0800dd5e

0800cd3c <_putc_r>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	460d      	mov	r5, r1
 800cd40:	4614      	mov	r4, r2
 800cd42:	4606      	mov	r6, r0
 800cd44:	b118      	cbz	r0, 800cd4e <_putc_r+0x12>
 800cd46:	6983      	ldr	r3, [r0, #24]
 800cd48:	b90b      	cbnz	r3, 800cd4e <_putc_r+0x12>
 800cd4a:	f7ff fb5b 	bl	800c404 <__sinit>
 800cd4e:	4b1c      	ldr	r3, [pc, #112]	; (800cdc0 <_putc_r+0x84>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	d124      	bne.n	800cd9e <_putc_r+0x62>
 800cd54:	6874      	ldr	r4, [r6, #4]
 800cd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd58:	07d8      	lsls	r0, r3, #31
 800cd5a:	d405      	bmi.n	800cd68 <_putc_r+0x2c>
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	0599      	lsls	r1, r3, #22
 800cd60:	d402      	bmi.n	800cd68 <_putc_r+0x2c>
 800cd62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd64:	f7ff fbec 	bl	800c540 <__retarget_lock_acquire_recursive>
 800cd68:	68a3      	ldr	r3, [r4, #8]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	60a3      	str	r3, [r4, #8]
 800cd70:	da05      	bge.n	800cd7e <_putc_r+0x42>
 800cd72:	69a2      	ldr	r2, [r4, #24]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	db1c      	blt.n	800cdb2 <_putc_r+0x76>
 800cd78:	b2eb      	uxtb	r3, r5
 800cd7a:	2b0a      	cmp	r3, #10
 800cd7c:	d019      	beq.n	800cdb2 <_putc_r+0x76>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	1c5a      	adds	r2, r3, #1
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	701d      	strb	r5, [r3, #0]
 800cd86:	b2ed      	uxtb	r5, r5
 800cd88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd8a:	07da      	lsls	r2, r3, #31
 800cd8c:	d405      	bmi.n	800cd9a <_putc_r+0x5e>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	059b      	lsls	r3, r3, #22
 800cd92:	d402      	bmi.n	800cd9a <_putc_r+0x5e>
 800cd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd96:	f7ff fbd4 	bl	800c542 <__retarget_lock_release_recursive>
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	bd70      	pop	{r4, r5, r6, pc}
 800cd9e:	4b09      	ldr	r3, [pc, #36]	; (800cdc4 <_putc_r+0x88>)
 800cda0:	429c      	cmp	r4, r3
 800cda2:	d101      	bne.n	800cda8 <_putc_r+0x6c>
 800cda4:	68b4      	ldr	r4, [r6, #8]
 800cda6:	e7d6      	b.n	800cd56 <_putc_r+0x1a>
 800cda8:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <_putc_r+0x8c>)
 800cdaa:	429c      	cmp	r4, r3
 800cdac:	bf08      	it	eq
 800cdae:	68f4      	ldreq	r4, [r6, #12]
 800cdb0:	e7d1      	b.n	800cd56 <_putc_r+0x1a>
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7ff f94a 	bl	800c050 <__swbuf_r>
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	e7e3      	b.n	800cd88 <_putc_r+0x4c>
 800cdc0:	0800dcfc 	.word	0x0800dcfc
 800cdc4:	0800dd1c 	.word	0x0800dd1c
 800cdc8:	0800dcdc 	.word	0x0800dcdc

0800cdcc <_sbrk_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_sbrk_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f5 fad0 	bl	800237c <_sbrk>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_sbrk_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_sbrk_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	200016a0 	.word	0x200016a0

0800cdec <__sread>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	460c      	mov	r4, r1
 800cdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf4:	f000 f8a0 	bl	800cf38 <_read_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	bfab      	itete	ge
 800cdfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ce00:	181b      	addge	r3, r3, r0
 800ce02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce06:	bfac      	ite	ge
 800ce08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce0a:	81a3      	strhlt	r3, [r4, #12]
 800ce0c:	bd10      	pop	{r4, pc}

0800ce0e <__swrite>:
 800ce0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	461f      	mov	r7, r3
 800ce14:	898b      	ldrh	r3, [r1, #12]
 800ce16:	05db      	lsls	r3, r3, #23
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	4616      	mov	r6, r2
 800ce1e:	d505      	bpl.n	800ce2c <__swrite+0x1e>
 800ce20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce24:	2302      	movs	r3, #2
 800ce26:	2200      	movs	r2, #0
 800ce28:	f000 f868 	bl	800cefc <_lseek_r>
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	4632      	mov	r2, r6
 800ce3a:	463b      	mov	r3, r7
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce42:	f000 b817 	b.w	800ce74 <_write_r>

0800ce46 <__sseek>:
 800ce46:	b510      	push	{r4, lr}
 800ce48:	460c      	mov	r4, r1
 800ce4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4e:	f000 f855 	bl	800cefc <_lseek_r>
 800ce52:	1c43      	adds	r3, r0, #1
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	bf15      	itete	ne
 800ce58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce62:	81a3      	strheq	r3, [r4, #12]
 800ce64:	bf18      	it	ne
 800ce66:	81a3      	strhne	r3, [r4, #12]
 800ce68:	bd10      	pop	{r4, pc}

0800ce6a <__sclose>:
 800ce6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6e:	f000 b813 	b.w	800ce98 <_close_r>
	...

0800ce74 <_write_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	; (800ce94 <_write_r+0x20>)
 800ce78:	4604      	mov	r4, r0
 800ce7a:	4608      	mov	r0, r1
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f7fc ffb8 	bl	8009df8 <_write>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_write_r+0x1e>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_write_r+0x1e>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	200016a0 	.word	0x200016a0

0800ce98 <_close_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d06      	ldr	r5, [pc, #24]	; (800ceb4 <_close_r+0x1c>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	602b      	str	r3, [r5, #0]
 800cea4:	f7f5 fa36 	bl	8002314 <_close>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <_close_r+0x1a>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b103      	cbz	r3, 800ceb2 <_close_r+0x1a>
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	200016a0 	.word	0x200016a0

0800ceb8 <_fstat_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d07      	ldr	r5, [pc, #28]	; (800ced8 <_fstat_r+0x20>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	f7f5 fa31 	bl	800232c <_fstat>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d102      	bne.n	800ced4 <_fstat_r+0x1c>
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	b103      	cbz	r3, 800ced4 <_fstat_r+0x1c>
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	200016a0 	.word	0x200016a0

0800cedc <_isatty_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d06      	ldr	r5, [pc, #24]	; (800cef8 <_isatty_r+0x1c>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	f7f5 fa30 	bl	800234c <_isatty>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_isatty_r+0x1a>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_isatty_r+0x1a>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	200016a0 	.word	0x200016a0

0800cefc <_lseek_r>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	4d07      	ldr	r5, [pc, #28]	; (800cf1c <_lseek_r+0x20>)
 800cf00:	4604      	mov	r4, r0
 800cf02:	4608      	mov	r0, r1
 800cf04:	4611      	mov	r1, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	602a      	str	r2, [r5, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f7f5 fa29 	bl	8002362 <_lseek>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_lseek_r+0x1e>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_lseek_r+0x1e>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	200016a0 	.word	0x200016a0

0800cf20 <__malloc_lock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	; (800cf28 <__malloc_lock+0x8>)
 800cf22:	f7ff bb0d 	b.w	800c540 <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	20001698 	.word	0x20001698

0800cf2c <__malloc_unlock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	; (800cf34 <__malloc_unlock+0x8>)
 800cf2e:	f7ff bb08 	b.w	800c542 <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	20001698 	.word	0x20001698

0800cf38 <_read_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	; (800cf58 <_read_r+0x20>)
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	4608      	mov	r0, r1
 800cf40:	4611      	mov	r1, r2
 800cf42:	2200      	movs	r2, #0
 800cf44:	602a      	str	r2, [r5, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	f7f5 f9c7 	bl	80022da <_read>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_read_r+0x1e>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_read_r+0x1e>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	200016a0 	.word	0x200016a0

0800cf5c <_init>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	bf00      	nop
 800cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf62:	bc08      	pop	{r3}
 800cf64:	469e      	mov	lr, r3
 800cf66:	4770      	bx	lr

0800cf68 <_fini>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr
